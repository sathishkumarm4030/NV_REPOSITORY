<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190508 15:05:13.846" generator="Robot 3.0.4 (Python 2.7.13 on win32)">
<suite source="C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites\SINGLE_CPE_HYBRID_SOLUTION_TEST.robot" id="s1" name="SINGLE CPE HYBRID SOLUTION TEST">
<kw type="setup" name="STARTUP">
<doc>Make connecection to Versa devices</doc>
<kw name="Cross Login" library="CPE1">
<msg timestamp="20190508 15:05:59.745" level="INFO">&lt;netmiko.versa.versa.VersaSSH object at 0x000000000DE7D9B0&gt;
versa: Administrator@Versa-Dir-BLR-1&gt;
ssh admin@20.20.125.11
admin@20.20.125.11's password: 

             .---.,
            (      ``.
       _     \        )    __      ________ _____   _____
      (  `.   \      /     \ \    / /  ____|  __ \ / ____|  /\
       \    `. )    /       \ \  / /| |__  | |__) | (___   /  \
        \     |    /         \ \/ / |  __| |  _  / \___ \ / /\ \
         \    |   /           \  /  | |____| | \ \ ____) / ____ \
          \   |  /             \/   |______|_|  \_\_____/_/    \_\
           \  | /
            \_|/                     ___ _    _____  ___   ___  _ ___
                                    | __| |  | __\ \/ | \ / / \| | __|
                                    | _|| |__| _| &gt;  &lt; \ V /| .` | _|
                                    |_| |____|___/_/\_\ \_/ |_|\_|_|


Versa FlexVNF software
Release     :	16.1R2 (S2.2)
Release date:	20180505
Package ID  :	5cd1c58	

Last login: Tue May  7 12:29:26 2019 from 10.91.116.67
admin@CPE11-BLR-HYBRID:~$ 
doing redispatch</msg>
<status status="PASS" endtime="20190508 15:05:59.745" starttime="20190508 15:05:25.036"></status>
</kw>
<kw name="Cross Login" library="CPE2">
<msg timestamp="20190508 15:06:33.901" level="INFO">&lt;netmiko.versa.versa.VersaSSH object at 0x000000000E0BD908&gt;
versa: Administrator@Versa-Dir-BLR-1&gt;
ssh admin@20.20.125.12
admin@20.20.125.12's password: 

             .---.,
            (      ``.
       _     \        )    __      ________ _____   _____
      (  `.   \      /     \ \    / /  ____|  __ \ / ____|  /\
       \    `. )    /       \ \  / /| |__  | |__) | (___   /  \
        \     |    /         \ \/ / |  __| |  _  / \___ \ / /\ \
         \    |   /           \  /  | |____| | \ \ ____) / ____ \
          \   |  /             \/   |______|_|  \_\_____/_/    \_\
           \  | /
            \_|/                     ___ _    _____  ___   ___  _ ___
                                    | __| |  | __\ \/ | \ / / \| | __|
                                    | _|| |__| _| &gt;  &lt; \ V /| .` | _|
                                    |_| |____|___/_/\_\ \_/ |_|\_|_|


Versa FlexVNF software
Release     :	16.1R2 (S2.2)
Release date:	20180508
Package ID  :	d1653f6	

Last login: Tue May  7 12:29:56 2019 from 10.91.116.67
admin@CPE12-BLR-MPLS:~$ 
doing redispatch</msg>
<status status="PASS" endtime="20190508 15:06:33.901" starttime="20190508 15:05:59.745"></status>
</kw>
<kw name="Get Device Info" library="CPE1">
<assign>
<var>${CPE1_dev_info_on_vd}</var>
</assign>
<msg timestamp="20190508 15:06:35.825" level="INFO">&lt;Response [200]&gt;</msg>
<msg timestamp="20190508 15:06:35.826" level="INFO">C:\Python27\lib\site-packages\urllib3\connectionpool.py:857: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  InsecureRequestWarning)</msg>
<msg timestamp="20190508 15:06:35.826" level="INFO">${CPE1_dev_info_on_vd} = {'ownerOrg': u'JAPAN', 'name': u'CPE11-BLR-HYBRID', 'ipAddress': u'20.20.125.11', 'packageName': u'versa-flexvnf-20180505-164725-5cd1c58-16.1R2S2.2-wsm', 'ping_status': u'REACHABLE', 'controllers': [u...</msg>
<status status="PASS" endtime="20190508 15:06:35.826" starttime="20190508 15:06:33.902"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CPE1_dev_info_on_vd}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:06:35.827" starttime="20190508 15:06:35.826"></status>
</kw>
<kw name="Get Data Dict" library="CPE1">
<assign>
<var>${CPE1}</var>
</assign>
<msg timestamp="20190508 15:06:35.839" level="INFO">${CPE1} = {'username': 'admin', 'main_logger': &lt;logging.Logger object at 0x000000000DD36B38&gt;, 'ctlr_dict': {'MUM': ['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'], 'BLR': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR']}, 'gw_list': ...</msg>
<status status="PASS" endtime="20190508 15:06:35.839" starttime="20190508 15:06:35.827"></status>
</kw>
<kw name="Get Data Dict" library="CPE2">
<assign>
<var>${CPE2}</var>
</assign>
<msg timestamp="20190508 15:06:35.850" level="INFO">${CPE2} = {'username': 'admin', 'main_logger': &lt;logging.Logger object at 0x000000000DD7C978&gt;, 'ctlr_dict': {'MUM': ['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'], 'BLR': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR']}, 'gw_list': ...</msg>
<status status="PASS" endtime="20190508 15:06:35.850" starttime="20190508 15:06:35.839"></status>
</kw>
<kw name="Create Controller List" library="CPE1">
<arguments>
<arg>${CPE1['ORG_NAME']}</arg>
<arg>${CPE1['ORG_ID']}</arg>
<arg>${CPE1['NO_OF_VRFS']}</arg>
<arg>${CPE1['NODE']}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:06:35.870" starttime="20190508 15:06:35.850"></status>
</kw>
<kw name="Create Gateway List" library="CPE1">
<arguments>
<arg>${CPE1['ORG_NAME']}</arg>
<arg>${CPE1['ORG_ID']}</arg>
<arg>${CPE1['NO_OF_VRFS']}</arg>
<arg>${CPE1['NODE']}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:06:35.886" starttime="20190508 15:06:35.871"></status>
</kw>
<kw name="Create Cpe Data" library="CPE1">
<status status="PASS" endtime="20190508 15:06:35.887" starttime="20190508 15:06:35.887"></status>
</kw>
<kw name="Create Controller List" library="CPE2">
<arguments>
<arg>${CPE2['ORG_NAME']}</arg>
<arg>${CPE2['ORG_ID']}</arg>
<arg>${CPE2['NO_OF_VRFS']}</arg>
<arg>${CPE2['NODE']}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:06:35.902" starttime="20190508 15:06:35.888"></status>
</kw>
<kw name="Create Gateway List" library="CPE2">
<arguments>
<arg>${CPE2['ORG_NAME']}</arg>
<arg>${CPE2['ORG_ID']}</arg>
<arg>${CPE2['NO_OF_VRFS']}</arg>
<arg>${CPE2['NODE']}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:06:35.915" starttime="20190508 15:06:35.902"></status>
</kw>
<kw name="Create Cpe Data" library="CPE2">
<status status="PASS" endtime="20190508 15:06:35.916" starttime="20190508 15:06:35.915"></status>
</kw>
<kw name="Get Data Dict" library="CPE1">
<assign>
<var>${CPE1}</var>
</assign>
<msg timestamp="20190508 15:06:35.927" level="INFO">${CPE1} = {'username': 'admin', 'main_logger': &lt;logging.Logger object at 0x000000000DD36B38&gt;, 'ctlr_dict': {'MUM': ['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'], 'BLR': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR']}, 'WC2_NAME':...</msg>
<status status="PASS" endtime="20190508 15:06:35.927" starttime="20190508 15:06:35.916"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CPE1}</arg>
</arguments>
<msg timestamp="20190508 15:06:35.949" level="INFO">${CPE1} = {'username': 'admin', 'main_logger': &lt;logging.Logger object at 0x000000000DD36B38&gt;, 'ctlr_dict': {'MUM': ['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'], 'BLR': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR']}, 'WC2_NAME':...</msg>
<status status="PASS" endtime="20190508 15:06:35.949" starttime="20190508 15:06:35.927"></status>
</kw>
<kw name="Get Data Dict" library="CPE2">
<assign>
<var>${CPE2}</var>
</assign>
<msg timestamp="20190508 15:06:35.962" level="INFO">${CPE2} = {'username': 'admin', 'main_logger': &lt;logging.Logger object at 0x000000000DD7C978&gt;, 'ctlr_dict': {'MUM': ['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'], 'BLR': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR']}, 'WC2_NAME':...</msg>
<status status="PASS" endtime="20190508 15:06:35.962" starttime="20190508 15:06:35.950"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CPE2}</arg>
</arguments>
<msg timestamp="20190508 15:06:35.986" level="INFO">${CPE2} = {'username': 'admin', 'main_logger': &lt;logging.Logger object at 0x000000000DD7C978&gt;, 'ctlr_dict': {'MUM': ['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'], 'BLR': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR']}, 'WC2_NAME':...</msg>
<status status="PASS" endtime="20190508 15:06:35.986" starttime="20190508 15:06:35.963"></status>
</kw>
<kw name="Log Variables" library="BuiltIn">
<doc>Logs all variables in the current scope with given log level.</doc>
<msg timestamp="20190508 15:06:35.989" level="INFO">${/} = \</msg>
<msg timestamp="20190508 15:06:35.990" level="INFO">${:} = ;</msg>
<msg timestamp="20190508 15:06:35.990" level="INFO">${\n} = 
</msg>
<msg timestamp="20190508 15:06:35.990" level="INFO">${appliance_url} = /vnms/appliance/appliance?offset=0&amp;limit=1000</msg>
<msg timestamp="20190508 15:06:35.990" level="INFO">${bgp_nbr_template} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites\Utils/TEXTFSM/versa_bgp_neighbor_org_template</msg>
<msg timestamp="20190508 15:06:35.990" level="INFO">${cmd1} = show interfaces brief | tab | nomore</msg>
<msg timestamp="20190508 15:06:35.990" level="INFO">${cmd2} = show bgp neighbor brief | nomore</msg>
<msg timestamp="20190508 15:06:35.990" level="INFO">${cmd3} = show route | nomore</msg>
<msg timestamp="20190508 15:06:35.990" level="INFO">${cmd4} = show configuration | display set | nomore</msg>
<msg timestamp="20190508 15:06:35.990" level="INFO">@{controllers_list} = [ NV-WC01-N2-BLR | NV-WC01-N4-MUM | NV-WC01-N5-LON | NV-WC01-UCPE | NV-WC02-N4-MUM | NV-WC02-N5-LON | SAMPLE-CONTROLLER ]</msg>
<msg timestamp="20190508 15:06:36.004" level="INFO">&amp;{CPE1} = { username=admin | main_logger=&lt;logging.Logger object at 0x000000000DD36B38&gt; | ctlr_dict={'MUM': ['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'], 'BLR': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR']} | WC2_NAME=NV-WC02-N2-BLR | MGMT_NW_SBNT=10.91.140.0/22 | gw_list=['NV-GW01-N2-BLR', 'NV-GW02-N2-BLR'] | GW1_NAME=NV-GW01-N2-BLR | WC2_local_ike_id=CPE11-BLR-HYBRID@colt.net | INTF_LAN_SET=Intf-LAN1-Zone Intf-LAN2-Zone Intf-LAN3-Zone Intf-LAN4-Zone Intf-LAN5-Zone  | vxlan_tvi_interface=250 | WC1_NAME=NV-WC01-N2-BLR | ORG_ID=125 | esp_tvi_interface=251 | PS_TEMPLATE_NAME=JAPAN-BLR-PS-HS-LIB | Device_name=CPE11-BLR-HYBRID | vddata=  Device_name Solution_type Site_id Serial_Number MIN_SW_VERSION  \
2         VD1           NaN     NaN           NaN            NaN   

        mgmt_ip username  password     device_type GUIusername  \
2  10.91.116.35    admin  versa123  versa_director   Automated   

           ...          NODE SATGING_SERVER SATGING_WAN SATGING_WAN_DHCP  \
2          ...           NaN            NaN         NaN              NaN   

  ORG_NAME ORG_ID NO_OF_VRFS PST_CREATION DG_CREATION DEV_TEMPALTE_CREATION  
2      NaN    NaN        NaN          NaN         NaN                   NaN  

[1 rows x 38 columns] | SOLUTIONS_list=['SINGLE-CPE-HYBRID', 'SINGLE-CPE-INTERNET-ONLY', 'SINGLE-CPE-MPLS-ONLY'] | START_LAN_IP_SUBNET=192.169.101.0/24 | device_type=branch | PST_CREATION=YES | ptvi_intf_wc2=ptvi251 | ptvi_intf_wc1=ptvi250 | lan_vlan=[600, 601, 602, 603, 604] | WC1_local_ike_key=CPE11-BLR-HYBRID | gw_dict={'MUM': ['NV-GW01-N4-MUM', 'NV-GW02-N4-MUM'], 'BLR': ['NV-GW01-N2-BLR', 'NV-GW02-N2-BLR']} | NO_OF_VRFS=5 | vdcsv_dict={'VD1': {'NODE': nan, 'GUIpassword': 'Auto@123', 'LIB': nan, 'ORG_ID': nan, 'PS_TEMPLATE_NAME': nan, 'Device_name': 'VD1', 'START_LAN_IP_SUBNET': nan, 'device_type': 'versa_director', 'PST_CREATION': nan, 'INT_INTF_IP_ALLOC': nan, 'SATGING_WAN': nan, 'DG_CREATION': nan, 'mgmt_ip': '10.91.116.35', 'MPLS_WAN_INTF_NEXTHOP': nan, 'MPLS_WAN_INTF_IP': nan, 'Site_id': nan, 'MPLS_WAN_INTF': nan, 'START_VLAN': nan, 'MPLS_WAN_NAME': nan, 'Serial_Number': nan, 'SATGING_SERVER': nan, 'username': 'admin', 'NO_OF_VRFS': nan, 'ESP_IP': nan, 'DEV_TEMPALTE_CREATION': nan, 'INT_WAN_INTF': nan, 'INT_WAN_INTF_IP': nan, 'INT_WAN_NAME': nan, 'password': 'versa123', 'SATGING_WAN_DHCP': nan, 'ORG_NAME': nan, 'Solution_type': nan, 'GUIusername': 'Automated', 'VXLAN_IP': nan, 'LAN_INTF': nan, 'INT_WAN_INTF_NEXTHOP': nan, 'DG_TEMPLATE_NAME': nan, 'MIN_SW_VERSION': nan}} | SATGING_WAN=MPLS | DG_CREATION=YES | vlans=[] | INT_WAN_INTF=vni-0/2 | LIB=YES | topofile=Devices.csv | MPLS_WAN_INTF_NEXTHOP=172.16.7.41 | MPLS_WAN_INTF_IP=172.16.7.42/30 | Site_id=1631 | LAN_ST_LAN_SET=L-ST-LAN1-VRF-INT-WAN L-ST-LAN2-VRF-INT-WAN L-ST-LAN3-VRF-INT-WAN L-ST-LAN4-VRF-INT-WAN L-ST-LAN5-VRF-INT-WAN  | WC2_local_ike_key=CPE11-BLR-HYBRID | MPLS_WAN_INTF=vni-0/1 | START_VLAN=600 | LAN_INTF=vni-0/4 | cnc=&lt;netmiko.versa.versa.VersaSSH object at 0x000000000DE7D9B0&gt; | MPLS_WAN_NAME=MPLS-WAN | staging_servers_dict={'MUM': ['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'], 'BLR': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR']} | SATGING_SERVER=NV-WC02-N2-BLR | NODE=BLR | logfile=C:\Softwares_mine\stefano\NV_REPOSITORY\csit/LOGS/2019_05_08_15_05_24_918000/MAIN.log | lan={1: {'second_host': '192.169.101.2', 'vlan': 600, 'netmask': '255.255.255.0', 'first_host': '192.169.101.1', 'nw': CalcIPv4Network(u'192.169.101.0/24')}, 2: {'second_host': '192.169.102.2', 'vlan': 601, 'netmask': '255.255.255.0', 'first_host': '192.169.102.1', 'nw': CalcIPv4Network(u'192.169.102.0/24')}, 3: {'second_host': '192.169.103.2', 'vlan': 602, 'netmask': '255.255.255.0', 'first_host': '192.169.103.1', 'nw': CalcIPv4Network(u'192.169.103.0/24')}, 4: {'second_host': '192.169.104.2', 'vlan': 603, 'netmask': '255.255.255.0', 'first_host': '192.169.104.1', 'nw': CalcIPv4Network(u'192.169.104.0/24')}, 5: {'second_host': '192.169.105.2', 'vlan': 604, 'netmask': '255.255.255.0', 'first_host': '192.169.105.1', 'nw': CalcIPv4Network(u'192.169.105.0/24')}} | LCC_dict={'MUM': '1091', 'LON': '44', 'BLR': '91'} | ESP_IP=20.20.125.11 | DEV_TEMPALTE_CREATION=YES | INT_INTF_IP_ALLOC=STATIC | AUTH_STRING=CPE11-BLR-HYBRID@colt.net | curr_file_dir=C:\Softwares_mine\stefano\NV_REPOSITORY\csit | nc=&lt;netmiko.versa.versa.VersaSSH object at 0x000000000DE7D9B0&gt; | INT_WAN_INTF_IP=172.16.6.42/30 | INT_WAN_NAME=INT-WAN | Serial_Number=CPE11MPLSKSA1811014 | dev_present=true | password=versa123 | SATGING_WAN_DHCP=NO | FW_PROFILE=COMMON-SFW-TEMPLATE | GW2_NAME=NV-GW02-N2-BLR | Solution_type=SINGLE-CPE-HYBRID | ORG_NAME=JAPAN | dev_dict={'ownerOrg': u'JAPAN', 'name': u'CPE11-BLR-HYBRID', 'ipAddress': u'20.20.125.11', 'packageName': u'versa-flexvnf-20180505-164725-5cd1c58-16.1R2S2.2-wsm', 'ping_status': u'REACHABLE', 'controllers': [u'NV-WC01-N2-BLR', u'NV-WC02-N2-BLR'], 'softwareVersion': u'16.1-R2-S2.2 5cd1c58 20180505', 'sync_status': u'IN_SYNC', 'model': u'FWA-2320', 'type': u'branch', 'serialNo': u'CPE11MPLSKSA1811014', 'uuid': u'dac0f197-a8b4-45e5-a3ed-c60d3adc0410'} | vdhead=https://10.91.116.35:9182 | WAN_ST_LAN_SET=W-ST-LAN1-VRF-INT-WAN W-ST-LAN2-VRF-INT-WAN W-ST-LAN3-VRF-INT-WAN W-ST-LAN4-VRF-INT-WAN W-ST-LAN5-VRF-INT-WAN  | mgmt_ip=10.91.240.11 | VNF_IPADDRESS2=10.91.116.68/32 | start_vrf_id=1370 | ndb={'NV-GW01-N2-BLR': {'NODE': 'BLR', 'ORG_NAME': 'JAPAN', 'AUTH_KEY': 'NV-GW01-N2-BLR', 'ESP_IP': '40.125.2.1', 'NNI1_GATEWAY_ADDRESS': '193.125.1.1', 'ORG_ID': '125', 'INTERNET_INTERFACE': 'vni-0/1.454', 'MPLS_INTERFACE': 'vni-0/1.464', 'DEVICE_NAME': 'NV-GW01-N2-BLR', 'VXLAN_IP': '30.125.2.1', 'PAIRED_TVI_SUBNET': '10.125.47.64/30', 'WC_list': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR'], 'LCC': '91', 'DEVICE_TYPE': 'GW', 'GW_NUMBER': 1L, 'LOG_COLLECTOR1_ADDRESS': '10.91.116.71', 'NNI1_SUBNET': '193.125.1.0/30', 'LOG_COLLECTOR2_ADDRESS': '10.91.116.72', 'NNI1_INTERFACE_ADDRESS': '193.125.1.2', 'AUTH_STRING': 'NV-GW01-N2-BLR@JAPAN.com'}, 'NV-WC02-N2-BLR': {'NODE': 'BLR', 'ORG_NAME': 'JAPAN', 'AUTH_KEY': 'NV-WC02-N2-BLR', 'ESP_IP': '10.125.64.24', 'MANAGEMENT_NW_SUBNET': '10.91.140.0/22', 'AUTH_STRING': 'NV-WC02-N2-BLR@JAPAN.com', 'ORG_ID': '125', 'VNF_GWS': ['NV-GW01-N2-BLR', 'NV-GW02-N2-BLR'], 'DEVICE_NAME': 'NV-WC02-N2-BLR', 'VXLAN_IP': '10.125.0.24', 'RR_SERVER': 'NV-WC02-N4-MUM', 'LCC': '91', 'DEVICE_TYPE': 'WC'}, 'NV-WC02-N4-MUM': {'NODE': 'MUM', 'ORG_NAME': 'JAPAN', 'AUTH_KEY': 'NV-WC02-N4-MUM', 'ESP_IP': '10.125.64.6', 'MANAGEMENT_NW_SUBNET': '10.91.140.0/22', 'AUTH_STRING': 'NV-WC02-N4-MUM@JAPAN.com', 'ORG_ID': '125', 'VNF_GWS': ['NV-GW01-N4-MUM', 'NV-GW02-N4-MUM'], 'DEVICE_NAME': 'NV-WC02-N4-MUM', 'VXLAN_IP': '10.125.0.6', 'LCC': '91', 'DEVICE_TYPE': 'WC', 'RR_CLIENTS': ['NV-WC02-N2-BLR', 'NV-WC02-N5-LON']}, 'NV-WC01-N2-BLR': {'NODE': 'BLR', 'ORG_NAME': 'JAPAN', 'AUTH_KEY': 'NV-WC01-N2-BLR', 'ESP_IP': '10.125.64.23', 'MANAGEMENT_NW_SUBNET': '10.91.140.0/22', 'AUTH_STRING': 'NV-WC01-N2-BLR@JAPAN.com', 'ORG_ID': '125', 'VNF_GWS': ['NV-GW01-N2-BLR', 'NV-GW02-N2-BLR'], 'DEVICE_NAME': 'NV-WC01-N2-BLR', 'VXLAN_IP': '10.125.0.23', 'LCC': '91', 'DEVICE_TYPE': 'WC', 'RR_CLIENTS': ['NV-WC01-N4-MUM', 'NV-WC01-N5-LON']}, 'NV-GW02-N2-BLR': {'NODE': 'BLR', 'ORG_NAME': 'JAPAN', 'AUTH_KEY': 'NV-GW02-N2-BLR', 'ESP_IP': '40.125.2.2', 'NNI1_GATEWAY_ADDRESS': '193.125.2.1', 'ORG_ID': '125', 'INTERNET_INTERFACE': 'vni-0/1.455', 'MPLS_INTERFACE': 'vni-0/1.465', 'DEVICE_NAME': 'NV-GW02-N2-BLR', 'VXLAN_IP': '30.125.2.2', 'PAIRED_TVI_SUBNET': '10.125.47.64/30', 'WC_list': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR'], 'LCC': '91', 'DEVICE_TYPE': 'GW', 'GW_NUMBER': 2L, 'LOG_COLLECTOR1_ADDRESS': '10.91.116.71', 'NNI1_SUBNET': '193.125.2.0/30', 'LOG_COLLECTOR2_ADDRESS': '10.91.116.72', 'NNI1_INTERFACE_ADDRESS': '193.125.2.2', 'AUTH_STRING': 'NV-GW02-N2-BLR@JAPAN.com'}} | WC2_ESP_IP=10.125.64.24 | VXLAN_IP=10.10.125.11 | ctlr_list=['NV-WC01-N2-BLR', 'NV-WC02-N4-MUM', 'NV-WC02-N2-BLR'] | LCC=91 | INT_WAN_INTF_NEXTHOP=172.16.6.41 | DG_TEMPLATE_NAME=JAPAN-BLR-PS-HS-LIB-DG | VNF_IPADDRESS1=10.91.116.67/32 | AUTH_KEY=CPE11-BLR-HYBRID | WC1_ESP_IP=10.125.64.23 | WC1_local_ike_id=CPE11-BLR-HYBRID@colt.net | MIN_SW_VERSION=16.1R2-S2.2 | vddata_dict={'username': 'admin', 'GUIpassword': 'Auto@123', 'LIB': nan, 'ORG_ID': nan, 'PS_TEMPLATE_NAME': nan, 'Device_name': 'VD1', 'START_LAN_IP_SUBNET': nan, 'device_type': 'versa_director', 'PST_CREATION': nan, 'SATGING_WAN': nan, 'DG_CREATION': nan, 'INT_WAN_INTF': nan, 'mgmt_ip': '10.91.116.35', 'MPLS_WAN_INTF_NEXTHOP': nan, 'MPLS_WAN_INTF_IP': nan, 'Site_id': nan, 'MPLS_WAN_INTF': nan, 'START_VLAN': nan, 'MPLS_WAN_NAME': nan, 'Serial_Number': nan, 'SATGING_SERVER': nan, 'NODE': nan, 'NO_OF_VRFS': nan, 'ESP_IP': nan, 'DEV_TEMPALTE_CREATION': nan, 'INT_INTF_IP_ALLOC': nan, 'INT_WAN_INTF_IP': nan, 'INT_WAN_NAME': nan, 'password': 'versa123', 'SATGING_WAN_DHCP': nan, 'ORG_NAME': nan, 'Solution_type': nan, 'GUIusername': 'Automated', 'VXLAN_IP': nan, 'LAN_INTF': nan, 'INT_WAN_INTF_NEXTHOP': nan, 'DG_TEMPLATE_NAME': nan, 'MIN_SW_VERSION': nan} }</msg>
<msg timestamp="20190508 15:06:36.005" level="INFO">&amp;{CPE1_dev_info_on_vd} = { ownerOrg=JAPAN | name=CPE11-BLR-HYBRID | ipAddress=20.20.125.11 | packageName=versa-flexvnf-20180505-164725-5cd1c58-16.1R2S2.2-wsm | ping_status=REACHABLE | controllers=[u'NV-WC01-N2-BLR', u'NV-WC02-N2-BLR'] | softwareVersion=16.1-R2-S2.2 5cd1c58 20180505 | sync_status=IN_SYNC | model=FWA-2320 | type=branch | serialNo=CPE11MPLSKSA1811014 | uuid=dac0f197-a8b4-45e5-a3ed-c60d3adc0410 }</msg>
<msg timestamp="20190508 15:06:36.016" level="INFO">&amp;{CPE2} = { username=admin | main_logger=&lt;logging.Logger object at 0x000000000DD7C978&gt; | ctlr_dict={'MUM': ['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'], 'BLR': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR']} | WC2_NAME=NV-WC02-N2-BLR | gw_list=['NV-GW01-N2-BLR', 'NV-GW02-N2-BLR'] | GW1_NAME=NV-GW01-N2-BLR | WC2_local_ike_id=CPE12-BLR-MPLS@colt.net | INTF_LAN_SET=Intf-LAN1-Zone Intf-LAN2-Zone Intf-LAN3-Zone Intf-LAN4-Zone Intf-LAN5-Zone  | vxlan_tvi_interface=250 | WC1_NAME=NV-WC01-N2-BLR | ORG_ID=125 | esp_tvi_interface=251 | PS_TEMPLATE_NAME=JAPAN-BLR-PS-M | Device_name=CPE12-BLR-MPLS | vddata=  Device_name Solution_type Site_id Serial_Number MIN_SW_VERSION  \
2         VD1           NaN     NaN           NaN            NaN   

        mgmt_ip username  password     device_type GUIusername  \
2  10.91.116.35    admin  versa123  versa_director   Automated   

           ...          NODE SATGING_SERVER SATGING_WAN SATGING_WAN_DHCP  \
2          ...           NaN            NaN         NaN              NaN   

  ORG_NAME ORG_ID NO_OF_VRFS PST_CREATION DG_CREATION DEV_TEMPALTE_CREATION  
2      NaN    NaN        NaN          NaN         NaN                   NaN  

[1 rows x 38 columns] | SOLUTIONS_list=['SINGLE-CPE-HYBRID', 'SINGLE-CPE-INTERNET-ONLY', 'SINGLE-CPE-MPLS-ONLY'] | START_LAN_IP_SUBNET=192.169.111.0/24 | device_type=branch | PST_CREATION=YES | ptvi_intf_wc2=ptvi251 | ptvi_intf_wc1=ptvi250 | lan_vlan=[610, 611, 612, 613, 614] | WC2_local_ike_key=CPE12-BLR-MPLS | gw_dict={'MUM': ['NV-GW01-N4-MUM', 'NV-GW02-N4-MUM'], 'BLR': ['NV-GW01-N2-BLR', 'NV-GW02-N2-BLR']} | NO_OF_VRFS=5 | vdcsv_dict={'VD1': {'NODE': nan, 'GUIpassword': 'Auto@123', 'LIB': nan, 'ORG_ID': nan, 'PS_TEMPLATE_NAME': nan, 'Device_name': 'VD1', 'START_LAN_IP_SUBNET': nan, 'device_type': 'versa_director', 'PST_CREATION': nan, 'INT_INTF_IP_ALLOC': nan, 'SATGING_WAN': nan, 'DG_CREATION': nan, 'mgmt_ip': '10.91.116.35', 'MPLS_WAN_INTF_NEXTHOP': nan, 'MPLS_WAN_INTF_IP': nan, 'Site_id': nan, 'MPLS_WAN_INTF': nan, 'START_VLAN': nan, 'MPLS_WAN_NAME': nan, 'Serial_Number': nan, 'SATGING_SERVER': nan, 'username': 'admin', 'NO_OF_VRFS': nan, 'ESP_IP': nan, 'DEV_TEMPALTE_CREATION': nan, 'INT_WAN_INTF': nan, 'INT_WAN_INTF_IP': nan, 'INT_WAN_NAME': nan, 'password': 'versa123', 'SATGING_WAN_DHCP': nan, 'ORG_NAME': nan, 'Solution_type': nan, 'GUIusername': 'Automated', 'VXLAN_IP': nan, 'LAN_INTF': nan, 'INT_WAN_INTF_NEXTHOP': nan, 'DG_TEMPLATE_NAME': nan, 'MIN_SW_VERSION': nan}} | SATGING_WAN=MPLS | DG_CREATION=YES | vlans=[] | INT_WAN_INTF=vni-0/2 | LIB=YES | topofile=Devices.csv | MPLS_WAN_INTF_NEXTHOP=172.16.7.45 | MPLS_WAN_INTF_IP=172.16.7.46/30 | Site_id=1630 | LAN_ST_LAN_SET=L-ST-LAN1-VRF-INT-WAN L-ST-LAN2-VRF-INT-WAN L-ST-LAN3-VRF-INT-WAN L-ST-LAN4-VRF-INT-WAN L-ST-LAN5-VRF-INT-WAN  | MGMT_NW_SBNT=10.91.140.0/22 | MPLS_WAN_INTF=vni-0/1 | START_VLAN=610 | LAN_INTF=vni-0/4 | cnc=&lt;netmiko.versa.versa.VersaSSH object at 0x000000000E0BD908&gt; | MPLS_WAN_NAME=MPLS-WAN | staging_servers_dict={'MUM': ['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'], 'BLR': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR']} | SATGING_SERVER=NV-WC02-N2-BLR | NODE=BLR | logfile=C:\Softwares_mine\stefano\NV_REPOSITORY\csit/LOGS/2019_05_08_15_05_24_918000/MAIN.log | lan={1: {'second_host': '192.169.111.2', 'vlan': 610, 'netmask': '255.255.255.0', 'first_host': '192.169.111.1', 'nw': CalcIPv4Network(u'192.169.111.0/24')}, 2: {'second_host': '192.169.112.2', 'vlan': 611, 'netmask': '255.255.255.0', 'first_host': '192.169.112.1', 'nw': CalcIPv4Network(u'192.169.112.0/24')}, 3: {'second_host': '192.169.113.2', 'vlan': 612, 'netmask': '255.255.255.0', 'first_host': '192.169.113.1', 'nw': CalcIPv4Network(u'192.169.113.0/24')}, 4: {'second_host': '192.169.114.2', 'vlan': 613, 'netmask': '255.255.255.0', 'first_host': '192.169.114.1', 'nw': CalcIPv4Network(u'192.169.114.0/24')}, 5: {'second_host': '192.169.115.2', 'vlan': 614, 'netmask': '255.255.255.0', 'first_host': '192.169.115.1', 'nw': CalcIPv4Network(u'192.169.115.0/24')}} | LCC_dict={'MUM': '1091', 'LON': '44', 'BLR': '91'} | ESP_IP=20.20.125.12 | DEV_TEMPALTE_CREATION=YES | INT_INTF_IP_ALLOC=STATIC | AUTH_STRING=CPE12-BLR-MPLS@colt.net | curr_file_dir=C:\Softwares_mine\stefano\NV_REPOSITORY\csit | nc=&lt;netmiko.versa.versa.VersaSSH object at 0x000000000E0BD908&gt; | INT_WAN_INTF_IP=172.16.6.46/30 | INT_WAN_NAME=INT-WAN | Serial_Number=CPE12INTERNETKSA1812013 | WC1_local_ike_key=CPE12-BLR-MPLS | password=versa123 | SATGING_WAN_DHCP=NO | FW_PROFILE=GENERIC-SFW-TEMPLATE | GW2_NAME=NV-GW02-N2-BLR | Solution_type=SINGLE-CPE-MPLS-ONLY | ORG_NAME=JAPAN | vdhead=https://10.91.116.35:9182 | WAN_ST_LAN_SET=W-ST-LAN1-VRF-INT-WAN W-ST-LAN2-VRF-INT-WAN W-ST-LAN3-VRF-INT-WAN W-ST-LAN4-VRF-INT-WAN W-ST-LAN5-VRF-INT-WAN  | mgmt_ip=10.91.240.12 | VNF_IPADDRESS2=10.91.116.68/32 | start_vrf_id=1370 | ndb={'NV-GW01-N2-BLR': {'NODE': 'BLR', 'ORG_NAME': 'JAPAN', 'AUTH_KEY': 'NV-GW01-N2-BLR', 'ESP_IP': '40.125.2.1', 'NNI1_GATEWAY_ADDRESS': '193.125.1.1', 'ORG_ID': '125', 'INTERNET_INTERFACE': 'vni-0/1.454', 'MPLS_INTERFACE': 'vni-0/1.464', 'DEVICE_NAME': 'NV-GW01-N2-BLR', 'VXLAN_IP': '30.125.2.1', 'PAIRED_TVI_SUBNET': '10.125.47.64/30', 'WC_list': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR'], 'LCC': '91', 'DEVICE_TYPE': 'GW', 'GW_NUMBER': 1L, 'LOG_COLLECTOR1_ADDRESS': '10.91.116.71', 'NNI1_SUBNET': '193.125.1.0/30', 'LOG_COLLECTOR2_ADDRESS': '10.91.116.72', 'NNI1_INTERFACE_ADDRESS': '193.125.1.2', 'AUTH_STRING': 'NV-GW01-N2-BLR@JAPAN.com'}, 'NV-WC02-N2-BLR': {'NODE': 'BLR', 'ORG_NAME': 'JAPAN', 'AUTH_KEY': 'NV-WC02-N2-BLR', 'ESP_IP': '10.125.64.24', 'MANAGEMENT_NW_SUBNET': '10.91.140.0/22', 'AUTH_STRING': 'NV-WC02-N2-BLR@JAPAN.com', 'ORG_ID': '125', 'VNF_GWS': ['NV-GW01-N2-BLR', 'NV-GW02-N2-BLR'], 'DEVICE_NAME': 'NV-WC02-N2-BLR', 'VXLAN_IP': '10.125.0.24', 'RR_SERVER': 'NV-WC02-N4-MUM', 'LCC': '91', 'DEVICE_TYPE': 'WC'}, 'NV-WC02-N4-MUM': {'NODE': 'MUM', 'ORG_NAME': 'JAPAN', 'AUTH_KEY': 'NV-WC02-N4-MUM', 'ESP_IP': '10.125.64.6', 'MANAGEMENT_NW_SUBNET': '10.91.140.0/22', 'AUTH_STRING': 'NV-WC02-N4-MUM@JAPAN.com', 'ORG_ID': '125', 'VNF_GWS': ['NV-GW01-N4-MUM', 'NV-GW02-N4-MUM'], 'DEVICE_NAME': 'NV-WC02-N4-MUM', 'VXLAN_IP': '10.125.0.6', 'LCC': '91', 'DEVICE_TYPE': 'WC', 'RR_CLIENTS': ['NV-WC02-N2-BLR', 'NV-WC02-N5-LON']}, 'NV-WC01-N2-BLR': {'NODE': 'BLR', 'ORG_NAME': 'JAPAN', 'AUTH_KEY': 'NV-WC01-N2-BLR', 'ESP_IP': '10.125.64.23', 'MANAGEMENT_NW_SUBNET': '10.91.140.0/22', 'AUTH_STRING': 'NV-WC01-N2-BLR@JAPAN.com', 'ORG_ID': '125', 'VNF_GWS': ['NV-GW01-N2-BLR', 'NV-GW02-N2-BLR'], 'DEVICE_NAME': 'NV-WC01-N2-BLR', 'VXLAN_IP': '10.125.0.23', 'LCC': '91', 'DEVICE_TYPE': 'WC', 'RR_CLIENTS': ['NV-WC01-N4-MUM', 'NV-WC01-N5-LON']}, 'NV-GW02-N2-BLR': {'NODE': 'BLR', 'ORG_NAME': 'JAPAN', 'AUTH_KEY': 'NV-GW02-N2-BLR', 'ESP_IP': '40.125.2.2', 'NNI1_GATEWAY_ADDRESS': '193.125.2.1', 'ORG_ID': '125', 'INTERNET_INTERFACE': 'vni-0/1.455', 'MPLS_INTERFACE': 'vni-0/1.465', 'DEVICE_NAME': 'NV-GW02-N2-BLR', 'VXLAN_IP': '30.125.2.2', 'PAIRED_TVI_SUBNET': '10.125.47.64/30', 'WC_list': ['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR'], 'LCC': '91', 'DEVICE_TYPE': 'GW', 'GW_NUMBER': 2L, 'LOG_COLLECTOR1_ADDRESS': '10.91.116.71', 'NNI1_SUBNET': '193.125.2.0/30', 'LOG_COLLECTOR2_ADDRESS': '10.91.116.72', 'NNI1_INTERFACE_ADDRESS': '193.125.2.2', 'AUTH_STRING': 'NV-GW02-N2-BLR@JAPAN.com'}} | WC2_ESP_IP=10.125.64.24 | VXLAN_IP=10.10.125.12 | ctlr_list=['NV-WC01-N2-BLR', 'NV-WC02-N4-MUM', 'NV-WC02-N2-BLR'] | LCC=91 | INT_WAN_INTF_NEXTHOP=172.16.6.45 | DG_TEMPLATE_NAME=JAPAN-BLR-PS-M-DG | VNF_IPADDRESS1=10.91.116.67/32 | AUTH_KEY=CPE12-BLR-MPLS | WC1_ESP_IP=10.125.64.23 | WC1_local_ike_id=CPE12-BLR-MPLS@colt.net | MIN_SW_VERSION=16.1R2-S2.2 | vddata_dict={'username': 'admin', 'GUIpassword': 'Auto@123', 'LIB': nan, 'ORG_ID': nan, 'PS_TEMPLATE_NAME': nan, 'Device_name': 'VD1', 'START_LAN_IP_SUBNET': nan, 'device_type': 'versa_director', 'PST_CREATION': nan, 'SATGING_WAN': nan, 'DG_CREATION': nan, 'INT_WAN_INTF': nan, 'mgmt_ip': '10.91.116.35', 'MPLS_WAN_INTF_NEXTHOP': nan, 'MPLS_WAN_INTF_IP': nan, 'Site_id': nan, 'MPLS_WAN_INTF': nan, 'START_VLAN': nan, 'MPLS_WAN_NAME': nan, 'Serial_Number': nan, 'SATGING_SERVER': nan, 'NODE': nan, 'NO_OF_VRFS': nan, 'ESP_IP': nan, 'DEV_TEMPALTE_CREATION': nan, 'INT_INTF_IP_ALLOC': nan, 'INT_WAN_INTF_IP': nan, 'INT_WAN_NAME': nan, 'password': 'versa123', 'SATGING_WAN_DHCP': nan, 'ORG_NAME': nan, 'Solution_type': nan, 'GUIusername': 'Automated', 'VXLAN_IP': nan, 'LAN_INTF': nan, 'INT_WAN_INTF_NEXTHOP': nan, 'DG_TEMPLATE_NAME': nan, 'MIN_SW_VERSION': nan} }</msg>
<msg timestamp="20190508 15:06:36.017" level="INFO">${cpe_list} = </msg>
<msg timestamp="20190508 15:06:36.017" level="INFO">&amp;{ctlr_dict} = { MUM=['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'] | BLR=['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR'] }</msg>
<msg timestamp="20190508 15:06:36.017" level="INFO">@{ctlr_list} = [ NV-WC01-N2-BLR | NV-WC02-N4-MUM | NV-WC02-N2-BLR ]</msg>
<msg timestamp="20190508 15:06:36.017" level="INFO">${DEBUG_FILE} = NONE</msg>
<msg timestamp="20190508 15:06:36.017" level="INFO">${device_grp_url} = /nextgen/deviceGroup</msg>
<msg timestamp="20190508 15:06:36.017" level="INFO">${device_tempalte_body} = {
	"versanms.sdwan-device-workflow": {
		"deviceName": "AUTO-CPE26",
		"siteId": "2396",
		"orgName": "IPC00012",
		"serialNumber": "KSA1811006",
		"deviceGroup": "AUTO-IPC00012-BLR-PS-HS-LIB-DG",
		"locationInfo": {
			"state": "karnataka",
			"country": "india",
			"longitude": "77.594563",
			"latitude": "12.971599",
			"city": "bangalore"
		},
		"postStagingTemplateInfo": {
			"templateName": "AUTO-IPC00012-BLR-PS-HS-LIB",
			"templateData": {
				"device-template-variable": {
					"template": "AUTO-IPC00012-BLR-PS-HS-LIB",
					"variable-binding": {
						"attrs": [{
							"name": "{$v_INT-WAN_IPv4__staticaddress}",
							"value": "172.16.3.98/30",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN6_Unit-5__vlanId}",
							"value": "736",
							"isAutogeneratable": false
						}, {
							"name": "{$v_IPC00012-Control-VR_16_Router_ID__vrRouteId}",
							"value": "20.20.16.26",
							"isAutogeneratable": true,
							"isOverwritten": false
						}, {
							"name": "{$v_IPC00012_NV-WC01-N2-BLR_Local_auth_email_key__IKELKey}",
							"value": "1234",
							"isAutogeneratable": true
						}, {
							"name": "{$v_IPC00012_NV-WC02-N2-BLR_Local_auth_email_key__IKELKey}",
							"value": "1234",
							"isAutogeneratable": true
						}, {
							"name": "{$v_LAN10_IPv4__staticaddress}",
							"value": "192.169.240.1/24",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN8_Unit-7__vlanId}",
							"value": "738",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN2_Unit-1__vlanId}",
							"value": "732",
							"isAutogeneratable": false
						}, {
							"name": "{$v_LAN9_IPv4__staticaddress}",
							"value": "192.169.239.1/24",
							"isAutogeneratable": false
						}, {
							"name": "{$v_LAN5_IPv4__staticaddress}",
							"value": "192.169.235.1/24",
							"isAutogeneratable": false
						}, {
							"name": "{$v_LAN1_IPv4__staticaddress}",
							"value": "192.169.231.1/24",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN4_Unit-3__vlanId}",
							"value": "734",
							"isAutogeneratable": false
						}, {
							"name": "{$v_LAN7_IPv4__staticaddress}",
							"value": "192.169.237.1/24",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN4_Unit-3__unit}",
							"value": "734",
							"isAutogeneratable": false
						}, {
							"name": "{$v_IPC00012_NV-WC02-N2-BLR_Local_auth_email_identifier__IKELIdentifier}",
							"value": "AUTO-CPE26@colt.net",
							"isAutogeneratable": true
						}, {
							"name": "{$v_vni-0-4_LAN10_Unit-9__unit}",
							"value": "740",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN9_Unit-8__unit}",
							"value": "739",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN1_Unit-0__unit}",
							"value": "731",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN3_Unit-2__unit}",
							"value": "733",
							"isAutogeneratable": false
						}, {
							"name": "{$v_Site_Id__siteSiteID}",
							"value": "2396",
							"isAutogeneratable": true
						}, {
							"name": "{$v_vni-0-4_LAN6_Unit-5__unit}",
							"value": "736",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN7_Unit-6__vlanId}",
							"value": "737",
							"isAutogeneratable": false
						}, {
							"name": "{$v_LAN6_IPv4__staticaddress}",
							"value": "192.169.236.1/24",
							"isAutogeneratable": false
						}, {
							"name": "{$v_IPC00012_NV-WC01-N2-BLR_Local_auth_email_identifier__IKELIdentifier}",
							"value": "AUTO-CPE26@colt.net",
							"isAutogeneratable": true
						}, {
							"name": "{$v_vni-0-4_LAN1_Unit-0__vlanId}",
							"value": "731",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN9_Unit-8__vlanId}",
							"value": "739",
							"isAutogeneratable": false
						}, {
							"name": "{$v_LAN2_IPv4__staticaddress}",
							"value": "192.169.232.1/24",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN10_Unit-9__vlanId}",
							"value": "740",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN5_Unit-4__unit}",
							"value": "735",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN2_Unit-1__unit}",
							"value": "732",
							"isAutogeneratable": false
						}, {
							"name": "{$v_LAN4_IPv4__staticaddress}",
							"value": "192.169.234.1/24",
							"isAutogeneratable": false
						}, {
							"name": "{$v_IPC00012_Site_Name__sitesSiteName}",
							"value": "AUTO-CPE26",
							"isAutogeneratable": true
						}, {
							"name": "{$v_vni-0-4_LAN3_Unit-2__vlanId}",
							"value": "733",
							"isAutogeneratable": false
						}, {
							"name": "{$v_latitude__IdLatitude}",
							"value": "12.971599",
							"isAutogeneratable": true
						}, {
							"name": "{$v_identification__IdName}",
							"value": "AUTO-CPE26",
							"isAutogeneratable": true
						}, {
							"name": "{$v_LAN3_IPv4__staticaddress}",
							"value": "192.169.233.1/24",
							"isAutogeneratable": false
						}, {
							"name": "{$v_INT-WAN-Transport-VR_IPv4__vrHopAddress}",
							"value": "172.16.3.97",
							"isAutogeneratable": false
						}, {
							"name": "{$v_vni-0-4_LAN7_Unit-6__unit}",
							"value": "737",
							"isAutogeneratable": false
						}, {
							"name": "{$v_tvi-0-32_-_Unit_0_Static_address__tunnelStaticAddress}",
							"value": "10.10.16.26/32",
							"isAutogeneratable": true,
							"isOverwritten": false
						}, {
							"name": "{$v_Chassis_Id__sitesChassisId}",
							"value": "KSA1811006",
							"isAutogeneratable": true
						}, {
							"name": "{$v_longitude__Idlongitude}",
							"value": "77.594563",
							"isAutogeneratable": true
						}, {
							"name": "{$v_LAN8_IPv4__staticaddress}",
							"value": "192.169.238.1/24",
							"isAutogeneratable": false
						}, {
							"name": "{$v_location__IdLocation}",
							"value": "bangalore,karnataka, india",
							"isAutogeneratable": true
						}, {
							"name": "{$v_vni-0-4_LAN5_Unit-4__vlanId}",
							"value": "735",
							"isAutogeneratable": false
						}, {
							"name": "{$v_IPC00012-Control-VR_16_Local_address__vrRouterAddress}",
							"value": "20.20.16.26",
							"isAutogeneratable": true,
							"isOverwritten": false
						}, {
							"name": "{$v_vni-0-4_LAN8_Unit-7__unit}",
							"value": "738",
							"isAutogeneratable": false
						}, {
							"name": "{$v_MPLS-WAN-Transport-VR_IPv4__vrHopAddress}",
							"value": "172.16.3.93",
							"isAutogeneratable": false
						}, {
							"name": "{$v_MPLS-WAN_IPv4__staticaddress}",
							"value": "172.16.3.94/30",
							"isAutogeneratable": false
						}, {
							"name": "{$v_tvi-0-33_-_Unit_0_Static_address__tunnelStaticAddress}",
							"value": "20.20.16.26/32",
							"isAutogeneratable": true,
							"isOverwritten": false
						}]
					}
				},
				"variableMetadata": [{
					"variable": "{$v_INT-WAN_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_vni-0-4_LAN6_Unit-5__vlanId}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_IPC00012-Control-VR_16_Router_ID__vrRouteId}",
					"group": "Virtual Routers",
					"overlay": true,
					"type": "IPV4"
				}, {
					"variable": "{$v_IPC00012_NV-WC01-N2-BLR_Local_auth_email_key__IKELKey}",
					"group": "IPSEC",
					"overlay": false
				}, {
					"variable": "{$v_IPC00012_NV-WC02-N2-BLR_Local_auth_email_key__IKELKey}",
					"group": "IPSEC",
					"overlay": false
				}, {
					"variable": "{$v_LAN10_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_vni-0-4_LAN8_Unit-7__vlanId}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_vni-0-4_LAN2_Unit-1__vlanId}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_LAN9_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_LAN5_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_LAN1_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_vni-0-4_LAN4_Unit-3__vlanId}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_LAN7_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_vni-0-4_LAN4_Unit-3__unit}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_IPC00012_NV-WC02-N2-BLR_Local_auth_email_identifier__IKELIdentifier}",
					"group": "IPSEC",
					"overlay": false
				}, {
					"variable": "{$v_vni-0-4_LAN10_Unit-9__unit}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_vni-0-4_LAN9_Unit-8__unit}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_vni-0-4_LAN1_Unit-0__unit}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_vni-0-4_LAN3_Unit-2__unit}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_Site_Id__siteSiteID}",
					"group": "SDWAN",
					"overlay": false
				}, {
					"variable": "{$v_vni-0-4_LAN6_Unit-5__unit}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_vni-0-4_LAN7_Unit-6__vlanId}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_LAN6_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_IPC00012_NV-WC01-N2-BLR_Local_auth_email_identifier__IKELIdentifier}",
					"group": "IPSEC",
					"overlay": false
				}, {
					"variable": "{$v_vni-0-4_LAN1_Unit-0__vlanId}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_vni-0-4_LAN9_Unit-8__vlanId}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_LAN2_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_vni-0-4_LAN10_Unit-9__vlanId}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_vni-0-4_LAN5_Unit-4__unit}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_vni-0-4_LAN2_Unit-1__unit}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_LAN4_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_IPC00012_Site_Name__sitesSiteName}",
					"group": "SDWAN",
					"overlay": false
				}, {
					"variable": "{$v_vni-0-4_LAN3_Unit-2__vlanId}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_latitude__IdLatitude}",
					"group": "SDWAN",
					"overlay": false
				}, {
					"variable": "{$v_identification__IdName}",
					"group": "SDWAN",
					"overlay": false
				}, {
					"variable": "{$v_LAN3_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_INT-WAN-Transport-VR_IPv4__vrHopAddress}",
					"group": "Virtual Routers",
					"overlay": false,
					"type": "IPV4_IPV6"
				}, {
					"variable": "{$v_vni-0-4_LAN7_Unit-6__unit}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_tvi-0-32_-_Unit_0_Static_address__tunnelStaticAddress}",
					"group": "Interfaces",
					"overlay": true,
					"type": "IPV4_IPV6_MASK"
				}, {
					"variable": "{$v_Chassis_Id__sitesChassisId}",
					"group": "SDWAN",
					"overlay": false
				}, {
					"variable": "{$v_longitude__Idlongitude}",
					"group": "SDWAN",
					"overlay": false
				}, {
					"variable": "{$v_LAN8_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_location__IdLocation}",
					"group": "SDWAN",
					"overlay": false
				}, {
					"variable": "{$v_vni-0-4_LAN5_Unit-4__vlanId}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_IPC00012-Control-VR_16_Local_address__vrRouterAddress}",
					"group": "Virtual Routers",
					"overlay": true,
					"type": "IPV4"
				}, {
					"variable": "{$v_vni-0-4_LAN8_Unit-7__unit}",
					"group": "Vlan Info",
					"overlay": false,
					"type": "INTEGER"
				}, {
					"variable": "{$v_MPLS-WAN-Transport-VR_IPv4__vrHopAddress}",
					"group": "Virtual Routers",
					"overlay": false,
					"type": "IPV4_IPV6"
				}, {
					"variable": "{$v_MPLS-WAN_IPv4__staticaddress}",
					"group": "Interfaces",
					"overlay": false,
					"type": "IPV4_MASK"
				}, {
					"variable": "{$v_tvi-0-33_-_Unit_0_Static_address__tunnelStaticAddress}",
					"group": "Interfaces",
					"overlay": true,
					"type": "IPV4_IPV6_MASK"
				}]
			}
		}
	}
}</msg>
<msg timestamp="20190508 15:06:36.017" level="INFO">${device_template_url} = /vnms/sdwan/workflow/devices/device</msg>
<msg timestamp="20190508 15:06:36.017" level="INFO">&amp;{dg_dict} = { dg_name= }</msg>
<msg timestamp="20190508 15:06:36.017" level="INFO">${DG_template_body} = {
	"device-group": {
		"name": "AUTO-IPC00012-BLR-PS-HS-LIB-DG",
		"dg:organization": "IPC00012",
		"dg:enable-2factor-auth": false,
		"dg:enable-staging-url": false,
		"dg:poststaging-template": "AUTO-IPC00012-BLR-PS-HS-LIB"
	}
}</msg>
<msg timestamp="20190508 15:06:36.017" level="INFO">${est} = Established</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${EXECDIR} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${False} = False</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${fileDir} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${get_template_url} = /vnms/sdwan/workflow/templates?offset=0&amp;limit=10000</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${getpass} = &lt;module 'getpass' from 'C:\Python27\lib\getpass.pyc'&gt;</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">&amp;{gw_dict} = { MUM=['NV-GW01-N4-MUM', 'NV-GW02-N4-MUM'] | BLR=['NV-GW01-N2-BLR', 'NV-GW02-N2-BLR'] }</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">@{gw_list} = [ NV-GW01-N2-BLR | NV-GW02-N2-BLR ]</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">&amp;{headers} = { Accept=application/vnd.yang.data+json }</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">&amp;{headers2} = { Content-Type=application/vnd.yang.data+json | Accept=application/vnd.yang.data+json }</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">&amp;{headers3} = { Content-Type=application/json | Accept=application/json }</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">&amp;{headers4} = { Content-Type=application/json }</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${interface_template} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites\Utils/TEXTFSM/versa_interface_template</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${j2_templates_path} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites/../libraries/J2_temps</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">&amp;{LCC_dict} = { MUM=1091 | LON=44 | BLR=91 }</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${LOG_FILE} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites\log.html</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${LOG_LEVEL} = INFO</msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${Main_template_modication} = </msg>
<msg timestamp="20190508 15:06:36.018" level="INFO">${MGMT_NW_SBNT} = 10.91.140.0/22</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">&amp;{NODE_DB_form_vd} = { NV-WC02-N2-BLR={'resourceType': 'Baremetal', 'siteId': 23, 'baremetalController': {'controllerInterface': {'unitInfoList': {'ipv4address': '10.63.44.36/27', 'networkName': 'CONTROL', 'ipv6dhcp': 'false', 'ipv4dhcp': 'false', 'vlanId': 3002}, 'interfaceName': 'vni-0/0'}, 'wanInterfaces': [{'unitInfoList': {'ipv4address': '111.93.152.123/28', 'ipv6dhcp': 'false', 'transportDomainList': 'INTERNET-TD', 'vlanId': 0, 'ipv4dhcp': 'false', 'ipv4gateway': '111.93.152.113', 'networkName': 'INT-WAN'}, 'interfaceName': 'vni-0/1'}], 'serverIP': '10.91.116.251'}, 'controllerName': 'NV-WC01-N2-BLR', 'orgName': 'Colt', 'postStagingController': 'true', 'locationInfo': {'latitude': 40.267194, 'country': 'IN', 'longitude': -86.134902}, 'stagingController': 'true'} }</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">&amp;{NODE_DEVICE_DB} = { MUM={'WC1': {'SITE_VXLAN_IP': '10.org_id.0.23', 'LCC': '91', 'HOST_NAME': 'NV-WC01-N4-MUM', 'MANAGEMENT_NW_SUBNET': '10.91.140.0/22', 'WAN_INTF': {'MPLS': '10.63.151.70', 'INTERNET': '111.93.152.123'}, 'SITE_ID': '23', 'SATGING_PROFILES': {'MPLS': 'MPLS-WAN-NV-WC01-N4-MUM-StagingIpsec', 'INTERNET': 'INT-WAN-NV-WC01-N4-MUM-StagingIpsec'}, 'SITE_ESP_IP': '10.org_id.64.23'}, 'WC2': {'SITE_VXLAN_IP': '30.org_id.0.23', 'RR_CLIENTS': ['BLR_WC1', 'LON_WC1'], 'SITE_ID': '23', 'SATGING_PROFILES': {'MPLS': 'MPLS-WAN-NV-WC02-N4-MUM-StagingIpsec', 'INTERNET': 'INT-WAN-NV-WC02-N4-MUM-StagingIpsec'}, 'SITE_ESP_IP': '40.org_id.64.23'}, 'GW1': {}, 'GW2': {}} | LON={'WC1': {'SITE_VXLAN_IP': '10.org_id.0.23', 'LCC': '91', 'HOST_NAME': 'NV-WC01-N5-LON', 'MANAGEMENT_NW_SUBNET': '10.91.140.0/22', 'WAN_INTF': {'MPLS': '10.63.151.70', 'INTERNET': '111.93.152.123'}, 'SITE_ID': '23', 'SATGING_PROFILES': {'MPLS': '', 'INTERNET': 'INT-WAN-NV-WC01-N5-LON-StagingIpsec'}, 'SITE_ESP_IP': '10.org_id.64.23'}, 'WC2': {'HOST_NAME': 'NV-WC02-N5-LON', 'SATGING_PROFILES': {'MPLS': 'MPLS-WAN-NV-WC02-N5-LON-StagingIpsec', 'INTERNET': ''}}, 'GW1': {}, 'GW2': {}} | BLR={'WC1': {'ESP_IP': '10.org_id.64.23', 'WAN_INTF': {'MPLS': '10.63.151.70', 'INTERNET': '111.93.152.123'}, 'SITE_ID': '23', 'SATGING_PROFILES': {'MPLS': '', 'INTERNET': 'STAGING-INT'}, 'VXLAN_IP': '10.org_id.0.23', 'HOST_NAME': 'NV-WC01-N2-BLR', 'RR_CLIENTS': ['MUM_WC1', 'LON_WC1']}, 'WC2': {'ESP_IP': '10.org_id.64.24', 'WAN_INTF': {'MPLS': '10.63.151.90', 'INTERNET': '10.63.130.90'}, 'SITE_ID': '24', 'SATGING_PROFILES': {'MPLS': 'STAGING-MPLS', 'INTERNET': 'STAGING-INT'}, 'VXLAN_IP': '10.org_id.0.24', 'HOST_NAME': 'NV-WC02-N2-BLR'}, 'MANAGEMENT_NW_SUBNET': '10.91.140.0/22', 'GW1': {'ESP_IP': '40.org_id.2.1', 'WAN_INTF': {'MPLS': '10.63.151.78', 'INTERNET': '10.63.130.78'}, 'SITE_ID': '103', 'SATGING_PROFILES': {'MPLS': 'STAGING-MPLS', 'INTERNET': 'STAGING-INT'}, 'VXLAN_IP': '30.org_id.2.1', 'HOST_NAME': 'NV-GW01-N2-BLR'}, 'LCC': '91', 'GW2': {'ESP_IP': '40.org_id.2.2', 'WAN_INTF': {'MPLS': '10.63.151.98', 'INTERNET': '10.63.130.98'}, 'SITE_ID': '124', 'SATGING_PROFILES': {'MPLS': 'STAGING-MPLS', 'INTERNET': 'STAGING-INT'}, 'VXLAN_IP': '30.org_id.2.2', 'HOST_NAME': 'NV-GW02-N2-BLR'}} }</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${None} = None</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${null} = None</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${org_url} = /vnms/sdwan/workflow/orgs/org</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${os} = &lt;module 'os' from 'C:\Python27\lib\os.pyc'&gt;</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${OUTPUT_DIR} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${OUTPUT_FILE} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites\output.xml</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${package_url} = /api/operational/nms/packages/package?select=name;uri</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${pd} = &lt;module 'pandas' from 'C:\Python27\lib\site-packages\pandas\__init__.pyc'&gt;</msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${PREV_TEST_MESSAGE} = </msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${PREV_TEST_NAME} = </msg>
<msg timestamp="20190508 15:06:36.019" level="INFO">${PREV_TEST_STATUS} = </msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">${ps_template_body} = {
	"versanms.sdwan-template-workflow": {
		"templateName": "AUTO-IPC00012-BLR-PS-HS-LIB",
		"templateType": "sdwan-post-staging",
		"controllers": ["NV-WC01-N2-BLR", "NV-WC02-N2-BLR"],
		"providerOrg": {
			"name": "IPC00012",
			"statefulFW": true,
			"nextGenFW": false
		},
		"analyticsCluster": "LogCollectors",
		"deviceFirmfactor": "6",
		"wanInterfaces": [{
			"interfaceName": "vni-0/1",
			"pppoe": false,
			"unitInfo": [{
				"subUnit": 0,
				"vlanId": 0,
				"networkName": "MPLS-WAN",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv6Static": false,
				"ipv6Dhcp": false,
				"allowSSH": false,
				"monitor": {},
				"linkPriority": "",
				"transportDomains": ["MPLS-TD"]
			}]
		}, {
			"interfaceName": "vni-0/2",
			"pppoe": false,
			"unitInfo": [{
				"subUnit": 0,
				"vlanId": 0,
				"networkName": "INT-WAN",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv6Static": false,
				"ipv6Dhcp": false,
				"allowSSH": false,
				"monitor": {},
				"linkPriority": "",
				"transportDomains": ["INTERNET-TD"]
			}]
		}],
		"deviceType": "full-mesh",
		"redundantPair": {
			"enable": false
		},
		"lanInterfaces": [{
			"interfaceName": "vni-0/4",
			"unitInfo": [{
				"subUnit": "{$v_vni-0-4_LAN1_Unit-0__unit}",
				"vlanId": "{$v_vni-0-4_LAN1_Unit-0__vlanId}",
				"networkName": "LAN1",
				"subOrganization": "IPC00012",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ip6Static": false,
				"ipv6Dhcp": false,
				"vrfName": "LAN1-VRF",
				"zoneName": ""
			}, {
				"subUnit": "{$v_vni-0-4_LAN2_Unit-1__unit}",
				"vlanId": "{$v_vni-0-4_LAN2_Unit-1__vlanId}",
				"networkName": "LAN2",
				"subOrganization": "IPC00012",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv4DhcpServer": false,
				"ip6Static": false,
				"ipv6Dhcp": false,
				"vrfName": "LAN2-VRF",
				"zoneName": ""
			}, {
				"subUnit": "{$v_vni-0-4_LAN3_Unit-2__unit}",
				"vlanId": "{$v_vni-0-4_LAN3_Unit-2__vlanId}",
				"networkName": "LAN3",
				"subOrganization": "IPC00012",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv4DhcpServer": false,
				"ip6Static": false,
				"ipv6Dhcp": false,
				"vrfName": "LAN3-VRF",
				"zoneName": ""
			}, {
				"subUnit": "{$v_vni-0-4_LAN4_Unit-3__unit}",
				"vlanId": "{$v_vni-0-4_LAN4_Unit-3__vlanId}",
				"networkName": "LAN4",
				"subOrganization": "IPC00012",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv4DhcpServer": false,
				"ip6Static": false,
				"ipv6Dhcp": false,
				"vrfName": "LAN4-VRF",
				"zoneName": ""
			}, {
				"subUnit": "{$v_vni-0-4_LAN5_Unit-4__unit}",
				"vlanId": "{$v_vni-0-4_LAN5_Unit-4__vlanId}",
				"networkName": "LAN5",
				"subOrganization": "IPC00012",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv4DhcpServer": false,
				"ip6Static": false,
				"ipv6Dhcp": false,
				"vrfName": "LAN5-VRF",
				"zoneName": ""
			}, {
				"subUnit": "{$v_vni-0-4_LAN6_Unit-5__unit}",
				"vlanId": "{$v_vni-0-4_LAN6_Unit-5__vlanId}",
				"networkName": "LAN6",
				"subOrganization": "IPC00012",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv4DhcpServer": false,
				"ip6Static": false,
				"ipv6Dhcp": false,
				"vrfName": "LAN6-VRF",
				"zoneName": ""
			}, {
				"subUnit": "{$v_vni-0-4_LAN7_Unit-6__unit}",
				"vlanId": "{$v_vni-0-4_LAN7_Unit-6__vlanId}",
				"networkName": "LAN7",
				"subOrganization": "IPC00012",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv4DhcpServer": false,
				"ip6Static": false,
				"ipv6Dhcp": false,
				"vrfName": "LAN7-VRF",
				"zoneName": ""
			}, {
				"subUnit": "{$v_vni-0-4_LAN8_Unit-7__unit}",
				"vlanId": "{$v_vni-0-4_LAN8_Unit-7__vlanId}",
				"networkName": "LAN8",
				"subOrganization": "IPC00012",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv4DhcpServer": false,
				"ip6Static": false,
				"ipv6Dhcp": false,
				"vrfName": "LAN8-VRF",
				"zoneName": ""
			}, {
				"subUnit": "{$v_vni-0-4_LAN9_Unit-8__unit}",
				"vlanId": "{$v_vni-0-4_LAN9_Unit-8__vlanId}",
				"networkName": "LAN9",
				"subOrganization": "IPC00012",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv4DhcpServer": false,
				"ip6Static": false,
				"ipv6Dhcp": false,
				"vrfName": "LAN9-VRF",
				"zoneName": ""
			}, {
				"subUnit": "{$v_vni-0-4_LAN10_Unit-9__unit}",
				"vlanId": "{$v_vni-0-4_LAN10_Unit-9__vlanId}",
				"networkName": "LAN10",
				"subOrganization": "IPC00012",
				"ipv4Static": true,
				"ipv4Dhcp": false,
				"ipv4DhcpServer": false,
				"ip6Static": false,
				"ipv6Dhcp": false,
				"vrfName": "LAN10-VRF",
				"zoneName": ""
			}]
		}],
		"solutionTier": "standard-sdwan-plus-ngfw",
		"bandwidth": 1000,
		"customParams": [],
		"minimumImageVersion": "16.1R2-S2.2",
		"isAnalyticsEnabled": true,
		"isPrimary": true,
		"diaConfig": {
			"loadBalance": false
		},
		"splitTunnels": [{
			"vrfName": "LAN1-VRF",
			"wanNetworkName": "INT-WAN",
			"dia": true,
			"gateway": false
		}, {
			"vrfName": "LAN2-VRF",
			"wanNetworkName": "INT-WAN",
			"dia": true,
			"gateway": false
		}, {
			"vrfName": "LAN3-VRF",
			"wanNetworkName": "INT-WAN",
			"dia": true,
			"gateway": false
		}, {
			"vrfName": "LAN4-VRF",
			"wanNetworkName": "INT-WAN",
			"dia": true,
			"gateway": false
		}, {
			"vrfName": "LAN5-VRF",
			"wanNetworkName": "INT-WAN",
			"dia": true,
			"gateway": false
		}, {
			"vrfName": "LAN6-VRF",
			"wanNetworkName": "INT-WAN",
			"dia": true,
			"gateway": false
		}, {
			"vrfName": "LAN7-VRF",
			"wanNetworkName": "INT-WAN",
			"dia": true,
			"gateway": false
		}, {
			"vrfName": "LAN8-VRF",
			"wanNetworkName": "INT-WAN",
			"dia": true,
			"gateway": false
		}, {
			"vrfName": "LAN9-VRF",
			"wanNetworkName": "INT-WAN",
			"dia": true,
			"gateway": false
		}, {
			"vrfName": "LAN10-VRF",
			"wanNetworkName": "INT-WAN",
			"dia": true,
			"gateway": false
		}],
		"inBoundNats": []
	}
}</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">${PST} = Post_staging_template.j2</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">${read_controllers_url} = /vnms/sdwan/workflow/controllers</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">${REPORT_FILE} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites\report.html</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">${route_template} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites\Utils/TEXTFSM/versa_route_template</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">@{routing_instances} = [ LAN1-VRF | LAN2-VRF | LAN3-VRF | LAN4-VRF | LAN5-VRF | LAN6-VRF | LAN7-VRF | LAN8-VRF | LAN9-VRF | LAN10-VRF ]</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">&amp;{RR_Clients} = { NV-WC02-N4-MUM=['NV-WC02-N2-BLR', 'NV-WC02-N5-LON'] | NV-WC01-N2-BLR=['NV-WC01-N4-MUM', 'NV-WC01-N5-LON'] }</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">@{RR_SERVER} = [ NV-WC01-N2-BLR | NV-WC02-N4-MUM ]</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">${sfw_template_assc_url} = /nextgen/template/</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">${show_config_template} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites\Utils/TEXTFSM/versa_show_config_template</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">&amp;{Solution_type} = { hybrid={'local_ckt_pri_2_intfs': 'INT-WAN', 'remote_ckt_pri_1_intf': 'MPLS-WAN MPLS-WAN1 MPLS-WAN2 INT-WAN INT-WAN1 INT-WAN2', 'local_ckt_pri_1_intfs': 'MPLS-WAN INT-WAN', 'remote_ckt_pri_2_intf': 'LTE-WAN'} | dual_mpls={'remote_ckt_pri_1_intf': 'MPLS-WAN MPLS-WAN1 MPLS-WAN2', 'local_ckt_pri_1_intfs': 'MPLS-WAN1 MPLS-WAN2'} | dual-internet={'local_ckt_pri_2_intfs': 'INT-WAN1 INT-WAN2', 'remote_ckt_pri_1_intf': 'INT-WAN INT-WAN1 INT-WAN2', 'local_ckt_pri_1_intfs': 'INT-WAN1 INT-WAN2', 'remote_ckt_pri_2_intf': 'LTE-WAN'} | internet={'local_ckt_pri_2_intfs': 'INT-WAN INT-WAN1 INT-WAN2', 'remote_ckt_pri_1_intf': 'INT-WAN', 'local_ckt_pri_1_intfs': 'INT-WAN', 'remote_ckt_pri_2_intf': 'LTE-WAN'} }</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">@{SOLUTIONS_list} = [ SINGLE-CPE-HYBRID | SINGLE-CPE-INTERNET-ONLY | SINGLE-CPE-MPLS-ONLY ]</msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">${SPACE} =  </msg>
<msg timestamp="20190508 15:06:36.020" level="INFO">&amp;{STAGING_SERVERS} = { NV-WC02-N2-BLR={'INT': {'PROFILE': 'STAGING-INT', 'IP': '10.63.130.90', 'KEY': 'NV-WC02-N2-BLR', 'ORG': 'Colt', 'TYPE': 'email', 'ID': 'NV-WC02-N2-BLR@colt.net'}, 'MPLS': {'PROFILE': 'STAGING-MPLS', 'IP': '10.63.151.90', 'KEY': 'NV-WC02-N2-BLR', 'ORG': 'Colt', 'TYPE': 'email', 'ID': 'NV-WC02-N2-BLR@colt.net'}} | NV-WC02-N4-MUM={'INT': {'PROFILE': 'INT-WAN-NV-WC02-N4-MUM-StagingIpsec', 'IP': '10.83.132.53', 'KEY': 'NV-WC02-N4-MUM', 'ORG': 'Colt', 'TYPE': 'email', 'ID': 'NV-WC02-N4-MUM@colt.net'}, 'MPLS': {'PROFILE': 'MPLS-WAN-NV-WC02-N4-MUM-StagingIpsec', 'IP': '10.83.153.229', 'KEY': 'NV-WC02-N4-MUM', 'ORG': 'Colt', 'TYPE': 'email', 'ID': 'NV-WC02-N4-MUM@colt.net'}} | NV-WC01-N2-BLR={'INT': {'PROFILE': 'STAGING-INT', 'IP': '111.93.152.123', 'KEY': 'NV-WC01-N2-BLR', 'ORG': 'Colt', 'TYPE': 'email', 'ID': 'NV-WC01-N2-BLR@colt.net'}, 'MPLS': {}} | NV-WC01-N4-MUM={'INT': {'PROFILE': 'INT-WAN-NV-WC01-N4-MUM-StagingIpsec', 'IP': '10.83.132.49', 'KEY': 'NV-WC01-N4-MUM', 'ORG': 'Colt', 'TYPE': 'email', 'ID': 'NV-WC01-N4-MUM@colt.net'}, 'MPLS': {'PROFILE': 'MPLS-WAN-NV-WC01-N4-MUM-StagingIpsec', 'IP': '10.83.153.225', 'KEY': 'NV-WC01-N4-MUM', 'ORG': 'Colt', 'TYPE': 'email', 'ID': 'NV-WC01-N4-MUM@colt.net'}} }</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">&amp;{staging_servers_dict} = { MUM=['NV-WC01-N4-MUM', 'NV-WC02-N4-MUM'] | BLR=['NV-WC01-N2-BLR', 'NV-WC02-N2-BLR'] }</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">${SUITE_DOCUMENTATION} = A test suite with tests for SDWAN HYBRID Solution.
Topology:-
____________________________
| VersaDirector |
|___________________________|
|
|
|
_____________|_______________
| WanCtrller1 |
|____________________________|
| |
| |
| |
INTERNET/MPLS
| |
| |___
______|__ ___|___
| | | |
LAN1--+ CPE1 | | CPE2 +--LAN1
|________| |_______|


Testplan Goals:-
1. CHECK IF IP ADDRESS IS SET AND INTERFACE IS UP.</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">&amp;{SUITE_METADATA} = { Version=1.0
More Info For more information about Robot Framework see http://robotframework.org
Author Sathishkumar murugesan
Date 12 Dec 2017
Executed At HOST
Test Framework Robot Framework Python }</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">${SUITE_NAME} = SINGLE CPE HYBRID SOLUTION TEST</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">${SUITE_SOURCE} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites\SINGLE_CPE_HYBRID_SOLUTION_TEST.robot</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">${task_url} = /vnms/tasks/task/</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">${TEMPDIR} = c:\users\smurug~1\appdata\local\temp</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">${template_url} = /vnms/sdwan/workflow/templates/template</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">${Topo_file} = C:\Softwares_mine\stefano\NV_REPOSITORY\csit\suites/../Topology/Devices.csv</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">${True} = True</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">${upgrade_dev_url} = /api/config/nms/actions/packages/upgrade</msg>
<msg timestamp="20190508 15:06:36.021" level="INFO">@{VNF_IPADDRESS} = [ 10.91.116.67/32 | 10.91.116.68/32 ]</msg>
<status status="PASS" endtime="20190508 15:06:36.021" starttime="20190508 15:06:35.987"></status>
</kw>
<kw name="VM Pre Op" library="VM1">
<msg timestamp="20190508 15:06:49.471" level="INFO">&lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x000000000E46B390&gt;
[sudo] password for sathish: 
:~# 
exit
linux: sathish@VM1:~$
sudo bash
sudo bash
root@VM1:~# 
versa123
versa123
versa123: command not found
root@VM1:~# 
exit
exit
exit
sathish@VM1:~$ 
sudo ifconfig ens33 up
sudo ifconfig ens33 up
sathish@VM1:~$ 
sudo vconfig add ens33 600
sudo vconfig add ens33 600
ERROR: trying to add VLAN #600 to IF -:ens33:-  error: File exists
sathish@VM1:~$ 
sudo ifconfig ens33.600 up
sudo ifconfig ens33.600 up
sathish@VM1:~$ 
sudo ifconfig ens33.600 192.169.101.2 netmask 255.255.255.0
sudo ifconfig ens33.600 192.169.101.2 netmask 255.255.255.0
sathish@VM1:~$ 
sudo vconfig add ens33 601
sudo vconfig add ens33 601
ERROR: trying to add VLAN #601 to IF -:ens33:-  error: File exists
sathish@VM1:~$ 
sudo ifconfig ens33.601 up
sudo ifconfig ens33.601 up
sathish@VM1:~$ 
sudo ifconfig ens33.601 192.169.102.2 netmask 255.255.255.0
sudo ifconfig ens33.601 192.169.102.2 netmask 255.255.255.0
sathish@VM1:~$ 
sudo vconfig add ens33 602
sudo vconfig add ens33 602
ERROR: trying to add VLAN #602 to IF -:ens33:-  error: File exists
sathish@VM1:~$ 
sudo ifconfig ens33.602 up
sudo ifconfig ens33.602 up
sathish@VM1:~$ 
sudo ifconfig ens33.602 192.169.103.2 netmask 255.255.255.0
sudo ifconfig ens33.602 192.169.103.2 netmask 255.255.255.0
sathish@VM1:~$ 
sudo vconfig add ens33 603
sudo vconfig add ens33 603
ERROR: trying to add VLAN #603 to IF -:ens33:-  error: File exists
sathish@VM1:~$ 
sudo ifconfig ens33.603 up
sudo ifconfig ens33.603 up
sathish@VM1:~$ 
sudo ifconfig ens33.603 192.169.104.2 netmask 255.255.255.0
sudo ifconfig ens33.603 192.169.104.2 netmask 255.255.255.0
sathish@VM1:~$ 
sudo vconfig add ens33 604
sudo vconfig add ens33 604
ERROR: trying to add VLAN #604 to IF -:ens33:-  error: File exists
sathish@VM1:~$ 
sudo ifconfig ens33.604 up
sudo ifconfig ens33.604 up
sathish@VM1:~$ 
sudo ifconfig ens33.604 192.169.105.2 netmask 255.255.255.0
sudo ifconfig ens33.604 192.169.105.2 netmask 255.255.255.0
sathish@VM1:~$</msg>
<status status="PASS" endtime="20190508 15:06:49.471" starttime="20190508 15:06:36.021"></status>
</kw>
<kw name="VM Pre Op" library="VM2">
<msg timestamp="20190508 15:07:02.994" level="INFO">&lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x000000000E492160&gt;
[sudo] password for sathish: 
12-VM1:~# 
exit
linux: sathish@CPE12-VM1:~$
sudo bash
sudo bash
root@CPE12-VM1:~# 
versa123
versa123
versa123: command not found
root@CPE12-VM1:~# 
exit
exit
exit
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33 up
sudo ifconfig ens33 up
sathish@CPE12-VM1:~$ 
sudo vconfig add ens33 610
sudo vconfig add ens33 610
ERROR: trying to add VLAN #610 to IF -:ens33:-  error: File exists
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33.610 up
sudo ifconfig ens33.610 up
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33.610 192.169.111.2 netmask 255.255.255.0
sudo ifconfig ens33.610 192.169.111.2 netmask 255.255.255.0 
[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C0
sathish@CPE12-VM1:~$ 
sudo vconfig add ens33 611
sudo vconfig add ens33 611
ERROR: trying to add VLAN #611 to IF -:ens33:-  error: File exists
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33.611 up
sudo ifconfig ens33.611 up
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33.611 192.169.112.2 netmask 255.255.255.0
sudo ifconfig ens33.611 192.169.112.2 netmask 255.255.255.0 
[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C0
sathish@CPE12-VM1:~$ 
sudo vconfig add ens33 612
sudo vconfig add ens33 612
ERROR: trying to add VLAN #612 to IF -:ens33:-  error: File exists
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33.612 up
sudo ifconfig ens33.612 up
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33.612 192.169.113.2 netmask 255.255.255.0
sudo ifconfig ens33.612 192.169.113.2 netmask 255.255.255.0 
[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C0
sathish@CPE12-VM1:~$ 
sudo vconfig add ens33 613
sudo vconfig add ens33 613
ERROR: trying to add VLAN #613 to IF -:ens33:-  error: File exists
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33.613 up
sudo ifconfig ens33.613 up
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33.613 192.169.114.2 netmask 255.255.255.0
sudo ifconfig ens33.613 192.169.114.2 netmask 255.255.255.0 
[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C0
sathish@CPE12-VM1:~$ 
sudo vconfig add ens33 614
sudo vconfig add ens33 614
ERROR: trying to add VLAN #614 to IF -:ens33:-  error: File exists
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33.614 up
sudo ifconfig ens33.614 up
sathish@CPE12-VM1:~$ 
sudo ifconfig ens33.614 192.169.115.2 netmask 255.255.255.0
sudo ifconfig ens33.614 192.169.115.2 netmask 255.255.255.0 
[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C0
sathish@CPE12-VM1:~$</msg>
<status status="PASS" endtime="20190508 15:07:02.995" starttime="20190508 15:06:49.471"></status>
</kw>
<kw name="Get Data Dict" library="VM1">
<assign>
<var>${VM1}</var>
</assign>
<msg timestamp="20190508 15:07:03.001" level="INFO">${VM1} = {'username': 'sathish', 'shell_nc': &lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x000000000E46B390&gt;, 'lan': {1: {'second_host': '192.169.101.2', 'vlan': 600, 'netmask': '255.255.255.0', 'first_host': ...</msg>
<status status="PASS" endtime="20190508 15:07:03.002" starttime="20190508 15:07:02.995"></status>
</kw>
<kw name="Get Data Dict" library="VM2">
<assign>
<var>${VM2}</var>
</assign>
<msg timestamp="20190508 15:07:03.011" level="INFO">${VM2} = {'username': 'sathish', 'shell_nc': &lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x000000000E492160&gt;, 'lan': {1: {'second_host': '192.169.111.2', 'vlan': 610, 'netmask': '255.255.255.0', 'first_host': ...</msg>
<status status="PASS" endtime="20190508 15:07:03.012" starttime="20190508 15:07:03.002"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${VM1}</arg>
</arguments>
<msg timestamp="20190508 15:07:03.030" level="INFO">${VM1} = {'username': 'sathish', 'shell_nc': &lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x000000000E46B390&gt;, 'lan': {1: {'second_host': '192.169.101.2', 'vlan': 600, 'netmask': '255.255.255.0', 'first_host': ...</msg>
<status status="PASS" endtime="20190508 15:07:03.030" starttime="20190508 15:07:03.012"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${VM2}</arg>
</arguments>
<msg timestamp="20190508 15:07:03.045" level="INFO">${VM2} = {'username': 'sathish', 'shell_nc': &lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x000000000E492160&gt;, 'lan': {1: {'second_host': '192.169.111.2', 'vlan': 610, 'netmask': '255.255.255.0', 'first_host': ...</msg>
<status status="PASS" endtime="20190508 15:07:03.045" starttime="20190508 15:07:03.030"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 1 | ${VM1['NO_OF_VRFS']} + 1 ]">
<kw type="foritem" name="${i} = 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20190508 15:07:03.047" level="INFO">${gw} = 192.169.101.1</msg>
<status status="PASS" endtime="20190508 15:07:03.047" starttime="20190508 15:07:03.046"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20190508 15:07:03.047" level="INFO">${vlan} = 600</msg>
<status status="PASS" endtime="20190508 15:07:03.047" starttime="20190508 15:07:03.047"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20190508 15:07:03.048" level="INFO">${destination_nw} = 192.169.111.0/24</msg>
<status status="PASS" endtime="20190508 15:07:03.048" starttime="20190508 15:07:03.047"></status>
</kw>
<kw name="Send Commands And Expect" library="VM1">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM1['LAN_INTF']}.${vlan}</arg>
</arguments>
<msg timestamp="20190508 15:07:03.451" level="INFO">sudo ip route add 192.169.111.0/24 via 192.169.101.1 dev ens33.60 
0
RTNETLINK answers: File exists
sathish@VM1:~$ </msg>
<msg timestamp="20190508 15:07:03.451" level="INFO">sudo ip route add 192.169.111.0/24 via 192.169.101.1 dev ens33.600</msg>
<status status="PASS" endtime="20190508 15:07:03.451" starttime="20190508 15:07:03.048"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:03.451" starttime="20190508 15:07:03.045"></status>
</kw>
<kw type="foritem" name="${i} = 2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20190508 15:07:03.452" level="INFO">${gw} = 192.169.102.1</msg>
<status status="PASS" endtime="20190508 15:07:03.452" starttime="20190508 15:07:03.451"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20190508 15:07:03.452" level="INFO">${vlan} = 601</msg>
<status status="PASS" endtime="20190508 15:07:03.452" starttime="20190508 15:07:03.452"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20190508 15:07:03.453" level="INFO">${destination_nw} = 192.169.112.0/24</msg>
<status status="PASS" endtime="20190508 15:07:03.453" starttime="20190508 15:07:03.453"></status>
</kw>
<kw name="Send Commands And Expect" library="VM1">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM1['LAN_INTF']}.${vlan}</arg>
</arguments>
<msg timestamp="20190508 15:07:03.858" level="INFO">sudo ip route add 192.169.112.0/24 via 192.169.102.1 dev ens33.60 
1
RTNETLINK answers: File exists
sathish@VM1:~$ </msg>
<msg timestamp="20190508 15:07:03.858" level="INFO">sudo ip route add 192.169.112.0/24 via 192.169.102.1 dev ens33.601</msg>
<status status="PASS" endtime="20190508 15:07:03.858" starttime="20190508 15:07:03.453"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:03.858" starttime="20190508 15:07:03.451"></status>
</kw>
<kw type="foritem" name="${i} = 3">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20190508 15:07:03.861" level="INFO">${gw} = 192.169.103.1</msg>
<status status="PASS" endtime="20190508 15:07:03.861" starttime="20190508 15:07:03.859"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20190508 15:07:03.862" level="INFO">${vlan} = 602</msg>
<status status="PASS" endtime="20190508 15:07:03.863" starttime="20190508 15:07:03.861"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20190508 15:07:03.864" level="INFO">${destination_nw} = 192.169.113.0/24</msg>
<status status="PASS" endtime="20190508 15:07:03.864" starttime="20190508 15:07:03.863"></status>
</kw>
<kw name="Send Commands And Expect" library="VM1">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM1['LAN_INTF']}.${vlan}</arg>
</arguments>
<msg timestamp="20190508 15:07:04.267" level="INFO">sudo ip route add 192.169.113.0/24 via 192.169.103.1 dev ens33.60 
2
RTNETLINK answers: File exists
sathish@VM1:~$ </msg>
<msg timestamp="20190508 15:07:04.267" level="INFO">sudo ip route add 192.169.113.0/24 via 192.169.103.1 dev ens33.602</msg>
<status status="PASS" endtime="20190508 15:07:04.267" starttime="20190508 15:07:03.864"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:04.267" starttime="20190508 15:07:03.859"></status>
</kw>
<kw type="foritem" name="${i} = 4">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20190508 15:07:04.268" level="INFO">${gw} = 192.169.104.1</msg>
<status status="PASS" endtime="20190508 15:07:04.268" starttime="20190508 15:07:04.267"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20190508 15:07:04.269" level="INFO">${vlan} = 603</msg>
<status status="PASS" endtime="20190508 15:07:04.269" starttime="20190508 15:07:04.268"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20190508 15:07:04.270" level="INFO">${destination_nw} = 192.169.114.0/24</msg>
<status status="PASS" endtime="20190508 15:07:04.270" starttime="20190508 15:07:04.269"></status>
</kw>
<kw name="Send Commands And Expect" library="VM1">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM1['LAN_INTF']}.${vlan}</arg>
</arguments>
<msg timestamp="20190508 15:07:04.679" level="INFO">sudo ip route add 192.169.114.0/24 via 192.169.104.1 dev ens33.60 
3
RTNETLINK answers: File exists
sathish@VM1:~$ </msg>
<msg timestamp="20190508 15:07:04.679" level="INFO">sudo ip route add 192.169.114.0/24 via 192.169.104.1 dev ens33.603</msg>
<status status="PASS" endtime="20190508 15:07:04.679" starttime="20190508 15:07:04.270"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:04.679" starttime="20190508 15:07:04.267"></status>
</kw>
<kw type="foritem" name="${i} = 5">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20190508 15:07:04.679" level="INFO">${gw} = 192.169.105.1</msg>
<status status="PASS" endtime="20190508 15:07:04.679" starttime="20190508 15:07:04.679"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20190508 15:07:04.679" level="INFO">${vlan} = 604</msg>
<status status="PASS" endtime="20190508 15:07:04.679" starttime="20190508 15:07:04.679"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20190508 15:07:04.679" level="INFO">${destination_nw} = 192.169.115.0/24</msg>
<status status="PASS" endtime="20190508 15:07:04.679" starttime="20190508 15:07:04.679"></status>
</kw>
<kw name="Send Commands And Expect" library="VM1">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM1['LAN_INTF']}.${vlan}</arg>
</arguments>
<msg timestamp="20190508 15:07:05.096" level="INFO">sudo ip route add 192.169.115.0/24 via 192.169.105.1 dev ens33.60 
4
RTNETLINK answers: File exists
sathish@VM1:~$ </msg>
<msg timestamp="20190508 15:07:05.096" level="INFO">sudo ip route add 192.169.115.0/24 via 192.169.105.1 dev ens33.604</msg>
<status status="PASS" endtime="20190508 15:07:05.096" starttime="20190508 15:07:04.679"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:05.096" starttime="20190508 15:07:04.679"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:05.096" starttime="20190508 15:07:03.045"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 1 | ${VM2['NO_OF_VRFS']} + 1 ]">
<kw type="foritem" name="${i} = 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20190508 15:07:05.096" level="INFO">${gw} = 192.169.111.1</msg>
<status status="PASS" endtime="20190508 15:07:05.096" starttime="20190508 15:07:05.096"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20190508 15:07:05.096" level="INFO">${vlan} = 610</msg>
<status status="PASS" endtime="20190508 15:07:05.096" starttime="20190508 15:07:05.096"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20190508 15:07:05.096" level="INFO">${destination_nw} = 192.169.101.0/24</msg>
<status status="PASS" endtime="20190508 15:07:05.096" starttime="20190508 15:07:05.096"></status>
</kw>
<kw name="Send Commands And Expect" library="VM2">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM2['LAN_INTF']}.${vlan}</arg>
</arguments>
<msg timestamp="20190508 15:07:05.513" level="INFO">sudo ip route add 192.169.101.0/24 via 192.169.111.1 dev en 
s33.610
RTNETLINK answers: File exists
sathish@CPE12-VM1:~$ </msg>
<msg timestamp="20190508 15:07:05.513" level="INFO">sudo ip route add 192.169.101.0/24 via 192.169.111.1 dev ens33.610</msg>
<status status="PASS" endtime="20190508 15:07:05.513" starttime="20190508 15:07:05.096"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:05.513" starttime="20190508 15:07:05.096"></status>
</kw>
<kw type="foritem" name="${i} = 2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20190508 15:07:05.513" level="INFO">${gw} = 192.169.112.1</msg>
<status status="PASS" endtime="20190508 15:07:05.513" starttime="20190508 15:07:05.513"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20190508 15:07:05.513" level="INFO">${vlan} = 611</msg>
<status status="PASS" endtime="20190508 15:07:05.513" starttime="20190508 15:07:05.513"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20190508 15:07:05.513" level="INFO">${destination_nw} = 192.169.102.0/24</msg>
<status status="PASS" endtime="20190508 15:07:05.513" starttime="20190508 15:07:05.513"></status>
</kw>
<kw name="Send Commands And Expect" library="VM2">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM2['LAN_INTF']}.${vlan}</arg>
</arguments>
<msg timestamp="20190508 15:07:05.929" level="INFO">sudo ip route add 192.169.102.0/24 via 192.169.112.1 dev en 
s33.611
RTNETLINK answers: File exists
sathish@CPE12-VM1:~$ </msg>
<msg timestamp="20190508 15:07:05.929" level="INFO">sudo ip route add 192.169.102.0/24 via 192.169.112.1 dev ens33.611</msg>
<status status="PASS" endtime="20190508 15:07:05.929" starttime="20190508 15:07:05.513"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:05.929" starttime="20190508 15:07:05.513"></status>
</kw>
<kw type="foritem" name="${i} = 3">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20190508 15:07:05.929" level="INFO">${gw} = 192.169.113.1</msg>
<status status="PASS" endtime="20190508 15:07:05.929" starttime="20190508 15:07:05.929"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20190508 15:07:05.929" level="INFO">${vlan} = 612</msg>
<status status="PASS" endtime="20190508 15:07:05.929" starttime="20190508 15:07:05.929"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20190508 15:07:05.929" level="INFO">${destination_nw} = 192.169.103.0/24</msg>
<status status="PASS" endtime="20190508 15:07:05.929" starttime="20190508 15:07:05.929"></status>
</kw>
<kw name="Send Commands And Expect" library="VM2">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM2['LAN_INTF']}.${vlan}</arg>
</arguments>
<msg timestamp="20190508 15:07:06.342" level="INFO">sudo ip route add 192.169.103.0/24 via 192.169.113.1 dev en 
s33.612
RTNETLINK answers: File exists
sathish@CPE12-VM1:~$ </msg>
<msg timestamp="20190508 15:07:06.342" level="INFO">sudo ip route add 192.169.103.0/24 via 192.169.113.1 dev ens33.612</msg>
<status status="PASS" endtime="20190508 15:07:06.342" starttime="20190508 15:07:05.929"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:06.342" starttime="20190508 15:07:05.929"></status>
</kw>
<kw type="foritem" name="${i} = 4">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20190508 15:07:06.342" level="INFO">${gw} = 192.169.114.1</msg>
<status status="PASS" endtime="20190508 15:07:06.342" starttime="20190508 15:07:06.342"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20190508 15:07:06.342" level="INFO">${vlan} = 613</msg>
<status status="PASS" endtime="20190508 15:07:06.342" starttime="20190508 15:07:06.342"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20190508 15:07:06.342" level="INFO">${destination_nw} = 192.169.104.0/24</msg>
<status status="PASS" endtime="20190508 15:07:06.342" starttime="20190508 15:07:06.342"></status>
</kw>
<kw name="Send Commands And Expect" library="VM2">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM2['LAN_INTF']}.${vlan}</arg>
</arguments>
<msg timestamp="20190508 15:07:06.746" level="INFO">sudo ip route add 192.169.104.0/24 via 192.169.114.1 dev en 
s33.613
RTNETLINK answers: File exists
sathish@CPE12-VM1:~$ </msg>
<msg timestamp="20190508 15:07:06.746" level="INFO">sudo ip route add 192.169.104.0/24 via 192.169.114.1 dev ens33.613</msg>
<status status="PASS" endtime="20190508 15:07:06.746" starttime="20190508 15:07:06.342"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:06.746" starttime="20190508 15:07:06.342"></status>
</kw>
<kw type="foritem" name="${i} = 5">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20190508 15:07:06.746" level="INFO">${gw} = 192.169.115.1</msg>
<status status="PASS" endtime="20190508 15:07:06.746" starttime="20190508 15:07:06.746"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20190508 15:07:06.746" level="INFO">${vlan} = 614</msg>
<status status="PASS" endtime="20190508 15:07:06.746" starttime="20190508 15:07:06.746"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20190508 15:07:06.746" level="INFO">${destination_nw} = 192.169.105.0/24</msg>
<status status="PASS" endtime="20190508 15:07:06.746" starttime="20190508 15:07:06.746"></status>
</kw>
<kw name="Send Commands And Expect" library="VM2">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM2['LAN_INTF']}.${vlan}</arg>
</arguments>
<msg timestamp="20190508 15:07:07.148" level="INFO">sudo ip route add 192.169.105.0/24 via 192.169.115.1 dev en 
s33.614
RTNETLINK answers: File exists
sathish@CPE12-VM1:~$ </msg>
<msg timestamp="20190508 15:07:07.148" level="INFO">sudo ip route add 192.169.105.0/24 via 192.169.115.1 dev ens33.614</msg>
<status status="PASS" endtime="20190508 15:07:07.149" starttime="20190508 15:07:06.746"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:07.149" starttime="20190508 15:07:06.746"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:07.149" starttime="20190508 15:07:05.096"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:07.150" starttime="20190508 15:05:25.035"></status>
</kw>
<test id="s1-t1" name="Testcase: CHECK WAN INTERFACES STATUS">
<kw name="Get Interface Status" library="CPE1">
<arguments>
<arg>intf_name=${CPE1['ptvi_intf_wc1']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:08.165" level="INFO">${result} = show interfaces brief | tab | match ptvi250
ptvi250      n/a                up    up     2       JAPAN-Control-VR       10.125.64.23/32   
[ok][2019-05-08 09:36:57]
admin@CPE11-BLR-HYBRID-cli&gt; </msg>
<status status="PASS" endtime="20190508 15:07:08.165" starttime="20190508 15:07:07.152"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=up</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:08.169" starttime="20190508 15:07:08.168"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:08.170" starttime="20190508 15:07:08.169"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:08.170" starttime="20190508 15:07:08.170"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:08.170" starttime="20190508 15:07:08.170"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:08.170" starttime="20190508 15:07:08.166"></status>
</kw>
<kw name="Get Interface Status" library="CPE1">
<arguments>
<arg>intf_name=${CPE1['ptvi_intf_wc2']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:09.187" level="INFO">${result} = show interfaces brief | tab | match ptvi251
ptvi251      n/a                up    up     2       JAPAN-Control-VR       10.125.64.24/32   
[ok][2019-05-08 09:36:58]
admin@CPE11-BLR-HYBRID-cli&gt; </msg>
<status status="PASS" endtime="20190508 15:07:09.187" starttime="20190508 15:07:08.170"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=up</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:09.187" starttime="20190508 15:07:09.187"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:09.187" starttime="20190508 15:07:09.187"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:09.187" starttime="20190508 15:07:09.187"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:09.187" starttime="20190508 15:07:09.187"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:09.187" starttime="20190508 15:07:09.187"></status>
</kw>
<kw name="Get Interface Status" library="CPE2">
<arguments>
<arg>intf_name=${CPE2['ptvi_intf_wc1']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:10.034" level="INFO">${result} = show interfaces brief | tab | match ptvi250
ptvi250      n/a                up    up     2       JAPAN-Control-VR       10.125.64.23/32   
[ok][2019-05-08 09:36:54]
admin@CPE12-BLR-MPLS-cli&gt; </msg>
<status status="PASS" endtime="20190508 15:07:10.034" starttime="20190508 15:07:09.187"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=up</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:10.034" starttime="20190508 15:07:10.034"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:10.034" starttime="20190508 15:07:10.034"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:10.034" starttime="20190508 15:07:10.034"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:10.034" starttime="20190508 15:07:10.034"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:10.034" starttime="20190508 15:07:10.034"></status>
</kw>
<kw name="Get Interface Status" library="CPE2">
<arguments>
<arg>intf_name=${CPE2['ptvi_intf_wc2']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:10.855" level="INFO">${result} = show interfaces brief | tab | match ptvi251
ptvi251      n/a                up    up     2       JAPAN-Control-VR       10.125.64.24/32   
[ok][2019-05-08 09:36:55]
admin@CPE12-BLR-MPLS-cli&gt; </msg>
<status status="PASS" endtime="20190508 15:07:10.855" starttime="20190508 15:07:10.034"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=up</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:10.855" starttime="20190508 15:07:10.855"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:10.855" starttime="20190508 15:07:10.855"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:10.855" starttime="20190508 15:07:10.855"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:10.855" starttime="20190508 15:07:10.855"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:10.855" starttime="20190508 15:07:10.855"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:10.855" critical="yes" starttime="20190508 15:07:07.150"></status>
</test>
<test id="s1-t2" name="Testcase: CHECK BGP NEIGHBOR STATUS">
<kw name="Get Bgp Nbr Status" library="CPE1">
<arguments>
<arg>nbr_ip=${CPE1['WC1_ESP_IP']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:12.272" level="INFO">${result} = show bgp neighbor org JAPAN brief JAPAN-Control-VR |  match 10.125.64.23
10.125.64.23    1w2d03h    Established     111           9      44272        179
[ok][2019-05-08 09:37:02]
admin@CPE11-BLR-HYB...</msg>
<status status="PASS" endtime="20190508 15:07:12.272" starttime="20190508 15:07:10.855"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${est}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:12.274" starttime="20190508 15:07:12.273"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:12.274" starttime="20190508 15:07:12.274"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:12.275" starttime="20190508 15:07:12.275"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:12.275" starttime="20190508 15:07:12.274"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:12.275" starttime="20190508 15:07:12.272"></status>
</kw>
<kw name="Get Bgp Nbr Status" library="CPE1">
<arguments>
<arg>nbr_ip=${CPE1['WC2_ESP_IP']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:13.678" level="INFO">${result} = show bgp neighbor org JAPAN brief JAPAN-Control-VR |  match 10.125.64.24
10.125.64.24    6d00h46m   Established      98           9      37860        179
[ok][2019-05-08 09:37:03]
admin@CPE11-BLR-HYB...</msg>
<status status="PASS" endtime="20190508 15:07:13.678" starttime="20190508 15:07:12.275"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${est}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:13.680" starttime="20190508 15:07:13.680"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:13.681" starttime="20190508 15:07:13.681"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:13.683" starttime="20190508 15:07:13.682"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:13.683" starttime="20190508 15:07:13.681"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:13.683" starttime="20190508 15:07:13.679"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:13.683" critical="yes" starttime="20190508 15:07:10.855"></status>
</test>
<test id="s1-t3" name="Testcase: CHECK LAN ROUTE">
<kw name="Check Lan Route" library="CPE1">
<arguments>
<arg>lan=1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:15.090" level="INFO">${result} = show route routing-instance LAN1-VRF | nomore

Routes for Routing instance : LAN1-VRF  AFI: ipv4

Codes: E1 - OSPF external type 1, E2 - OSPF external type 2
IA - inter area, iA - intra area,
L1 - IS-...</msg>
<status status="PASS" endtime="20190508 15:07:15.091" starttime="20190508 15:07:13.685"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${CPE2['lan'][1]['nw']}</arg>
</arguments>
<assign>
<var>${dest_route}</var>
</assign>
<msg timestamp="20190508 15:07:15.092" level="INFO">${dest_route} = 192.169.111.0/24</msg>
<status status="PASS" endtime="20190508 15:07:15.093" starttime="20190508 15:07:15.091"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${dest_route}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:15.096" starttime="20190508 15:07:15.095"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:15.097" starttime="20190508 15:07:15.096"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:15.101" starttime="20190508 15:07:15.099"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:15.101" starttime="20190508 15:07:15.098"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:15.101" starttime="20190508 15:07:15.093"></status>
</kw>
<kw name="Check Lan Route" library="CPE2">
<arguments>
<arg>lan=1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:16.509" level="INFO">${result} = show route routing-instance LAN1-VRF | nomore

Routes for Routing instance : LAN1-VRF  AFI: ipv4

Codes: E1 - OSPF external type 1, E2 - OSPF external type 2
IA - inter area, iA - intra area,
L1 - IS-...</msg>
<status status="PASS" endtime="20190508 15:07:16.510" starttime="20190508 15:07:15.102"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${CPE1['lan'][1]['nw']}</arg>
</arguments>
<assign>
<var>${dest_route}</var>
</assign>
<msg timestamp="20190508 15:07:16.512" level="INFO">${dest_route} = 192.169.101.0/24</msg>
<status status="PASS" endtime="20190508 15:07:16.512" starttime="20190508 15:07:16.510"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${dest_route}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:16.515" starttime="20190508 15:07:16.514"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:16.516" starttime="20190508 15:07:16.515"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:16.520" starttime="20190508 15:07:16.518"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:16.520" starttime="20190508 15:07:16.517"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:16.521" starttime="20190508 15:07:16.512"></status>
</kw>
<tags>
<tag>LAN</tag>
</tags>
<status status="PASS" endtime="20190508 15:07:16.522" critical="yes" starttime="20190508 15:07:13.684"></status>
</test>
<test id="s1-t4" name="Testcase: Ping Test VM1 To VM2(1 LAN)">
<kw name="Ping Test VM1 to VM2(1 LAN)">
<tags>
<tag>HYBRID</tag>
</tags>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][1]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:07:16.528" level="INFO">${destip} = 192.169.111.2</msg>
<status status="PASS" endtime="20190508 15:07:16.528" starttime="20190508 15:07:16.525"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:21.140" level="INFO">sudo ping 192.169.111.2 -c 5
sudo ping 192.169.111.2 -c 5
PING 192.169.111.2 (192.169.111.2) 56(84) bytes of data.
64 bytes from 192.169.111.2: icmp_seq=1 ttl=62 time=4.07 ms
64 bytes from 192.169.111.2: icmp_seq=2 ttl=62 time=2.25 ms
64 bytes from 192.169.111.2: icmp_seq=3 ttl=62 time=2.00 ms
64 bytes from 192.169.111.2: icmp_seq=4 ttl=62 time=2.51 ms
64 bytes from 192.169.111.2: icmp_seq=5 ttl=62 time=2.32 ms

--- 192.169.111.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4005ms
rtt min/avg/max/mdev = 2.001/2.631/4.070/0.739 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:07:21.140" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:07:21.141" starttime="20190508 15:07:16.528"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:21.142" starttime="20190508 15:07:21.141"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:21.142" starttime="20190508 15:07:21.142"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:21.143" starttime="20190508 15:07:21.143"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:21.143" starttime="20190508 15:07:21.142"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:21.143" starttime="20190508 15:07:21.141"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:21.143" starttime="20190508 15:07:16.524"></status>
</kw>
<tags>
<tag>PING</tag>
</tags>
<status status="PASS" endtime="20190508 15:07:21.143" critical="yes" starttime="20190508 15:07:16.523"></status>
</test>
<test id="s1-t5" name="Testcase: Ping Test VM2 To VM1(1 LAN)">
<kw name="Ping Test VM2 to VM1(1 LAN)">
<tags>
<tag>HYBRID</tag>
</tags>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][1]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:07:21.148" level="INFO">${destip} = 192.169.101.2</msg>
<status status="PASS" endtime="20190508 15:07:21.148" starttime="20190508 15:07:21.146"></status>
</kw>
<kw name="Shell Ping" library="VM2">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:25.763" level="INFO">sudo ping 192.169.101.2 -c 5
sudo ping 192.169.101.2 -c 5
PING 192.169.101.2 (192.169.101.2) 56(84) bytes of data.
64 bytes from 192.169.101.2: icmp_seq=1 ttl=62 time=2.68 ms
64 bytes from 192.169.101.2: icmp_seq=2 ttl=62 time=1.99 ms
64 bytes from 192.169.101.2: icmp_seq=3 ttl=62 time=2.10 ms
64 bytes from 192.169.101.2: icmp_seq=4 ttl=62 time=2.27 ms
64 bytes from 192.169.101.2: icmp_seq=5 ttl=62 time=1.89 ms

--- 192.169.101.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4006ms
rtt min/avg/max/mdev = 1.892/2.188/2.685/0.283 ms
sathish@CPE12-VM1:~$</msg>
<msg timestamp="20190508 15:07:25.763" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:07:25.763" starttime="20190508 15:07:21.149"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:25.765" starttime="20190508 15:07:25.764"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:25.765" starttime="20190508 15:07:25.765"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:25.766" starttime="20190508 15:07:25.766"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:25.766" starttime="20190508 15:07:25.765"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:25.766" starttime="20190508 15:07:25.764"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:25.766" starttime="20190508 15:07:21.145"></status>
</kw>
<tags>
<tag>PING</tag>
</tags>
<status status="PASS" endtime="20190508 15:07:25.766" critical="yes" starttime="20190508 15:07:21.144"></status>
</test>
<test id="s1-t6" name="Testcase: Ping Test VM1 To VM2(10 LANS)">
<kw name="Ping Test VM1 to VM2(10 LANS)">
<tags>
<tag>HYBRID</tag>
</tags>
<kw type="for" name="${vlan} IN RANGE [ 1 | ${VM1['NO_OF_VRFS']} + 1 ]">
<kw type="foritem" name="${vlan} = 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:07:25.768" level="INFO">${destip} = 192.169.111.2</msg>
<status status="PASS" endtime="20190508 15:07:25.768" starttime="20190508 15:07:25.768"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${destip}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:25.769" starttime="20190508 15:07:25.769"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:30.383" level="INFO">sudo ping 192.169.111.2 -c 5
sudo ping 192.169.111.2 -c 5
PING 192.169.111.2 (192.169.111.2) 56(84) bytes of data.
64 bytes from 192.169.111.2: icmp_seq=1 ttl=62 time=3.11 ms
64 bytes from 192.169.111.2: icmp_seq=2 ttl=62 time=2.60 ms
64 bytes from 192.169.111.2: icmp_seq=3 ttl=62 time=2.08 ms
64 bytes from 192.169.111.2: icmp_seq=4 ttl=62 time=2.40 ms
64 bytes from 192.169.111.2: icmp_seq=5 ttl=62 time=2.14 ms

--- 192.169.111.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4005ms
rtt min/avg/max/mdev = 2.085/2.472/3.119/0.376 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:07:30.384" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:07:30.384" starttime="20190508 15:07:25.769"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:30.386" starttime="20190508 15:07:30.385"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:30.386" starttime="20190508 15:07:30.386"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:30.388" starttime="20190508 15:07:30.388"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:30.388" starttime="20190508 15:07:30.387"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:30.389" starttime="20190508 15:07:30.384"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:30.389" starttime="20190508 15:07:25.768"></status>
</kw>
<kw type="foritem" name="${vlan} = 2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:07:30.390" level="INFO">${destip} = 192.169.112.2</msg>
<status status="PASS" endtime="20190508 15:07:30.390" starttime="20190508 15:07:30.390"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${destip}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:30.391" starttime="20190508 15:07:30.391"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:35.015" level="INFO">sudo ping 192.169.112.2 -c 5
sudo ping 192.169.112.2 -c 5
PING 192.169.112.2 (192.169.112.2) 56(84) bytes of data.
64 bytes from 192.169.112.2: icmp_seq=1 ttl=62 time=3.86 ms
64 bytes from 192.169.112.2: icmp_seq=2 ttl=62 time=2.09 ms
64 bytes from 192.169.112.2: icmp_seq=3 ttl=62 time=1.97 ms
64 bytes from 192.169.112.2: icmp_seq=4 ttl=62 time=1.97 ms
64 bytes from 192.169.112.2: icmp_seq=5 ttl=62 time=2.01 ms

--- 192.169.112.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4004ms
rtt min/avg/max/mdev = 1.975/2.384/3.865/0.744 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:07:35.016" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:07:35.016" starttime="20190508 15:07:30.391"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:35.019" starttime="20190508 15:07:35.018"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:35.021" starttime="20190508 15:07:35.020"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:35.023" starttime="20190508 15:07:35.022"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:35.023" starttime="20190508 15:07:35.021"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:35.024" starttime="20190508 15:07:35.016"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:35.024" starttime="20190508 15:07:30.389"></status>
</kw>
<kw type="foritem" name="${vlan} = 3">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:07:35.026" level="INFO">${destip} = 192.169.113.2</msg>
<status status="PASS" endtime="20190508 15:07:35.026" starttime="20190508 15:07:35.025"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${destip}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:35.028" starttime="20190508 15:07:35.027"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:39.648" level="INFO">sudo ping 192.169.113.2 -c 5
sudo ping 192.169.113.2 -c 5
PING 192.169.113.2 (192.169.113.2) 56(84) bytes of data.
64 bytes from 192.169.113.2: icmp_seq=1 ttl=62 time=5.49 ms
64 bytes from 192.169.113.2: icmp_seq=2 ttl=62 time=2.02 ms
64 bytes from 192.169.113.2: icmp_seq=3 ttl=62 time=1.97 ms
64 bytes from 192.169.113.2: icmp_seq=4 ttl=62 time=1.94 ms
64 bytes from 192.169.113.2: icmp_seq=5 ttl=62 time=1.90 ms

--- 192.169.113.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4005ms
rtt min/avg/max/mdev = 1.900/2.667/5.492/1.413 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:07:39.648" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:07:39.648" starttime="20190508 15:07:35.029"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:39.651" starttime="20190508 15:07:39.650"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:39.652" starttime="20190508 15:07:39.651"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:39.655" starttime="20190508 15:07:39.654"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:39.655" starttime="20190508 15:07:39.653"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:39.656" starttime="20190508 15:07:39.649"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:39.656" starttime="20190508 15:07:35.024"></status>
</kw>
<kw type="foritem" name="${vlan} = 4">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:07:39.659" level="INFO">${destip} = 192.169.114.2</msg>
<status status="PASS" endtime="20190508 15:07:39.659" starttime="20190508 15:07:39.657"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${destip}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:39.661" starttime="20190508 15:07:39.659"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:44.288" level="INFO">sudo ping 192.169.114.2 -c 5
sudo ping 192.169.114.2 -c 5
PING 192.169.114.2 (192.169.114.2) 56(84) bytes of data.
64 bytes from 192.169.114.2: icmp_seq=1 ttl=62 time=3.50 ms
64 bytes from 192.169.114.2: icmp_seq=2 ttl=62 time=1.77 ms
64 bytes from 192.169.114.2: icmp_seq=3 ttl=62 time=1.99 ms
64 bytes from 192.169.114.2: icmp_seq=4 ttl=62 time=2.01 ms
64 bytes from 192.169.114.2: icmp_seq=5 ttl=62 time=2.02 ms

--- 192.169.114.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4005ms
rtt min/avg/max/mdev = 1.778/2.262/3.500/0.625 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:07:44.289" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:07:44.289" starttime="20190508 15:07:39.661"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:44.291" starttime="20190508 15:07:44.290"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:44.292" starttime="20190508 15:07:44.292"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:44.294" starttime="20190508 15:07:44.293"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:44.294" starttime="20190508 15:07:44.293"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:44.294" starttime="20190508 15:07:44.289"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:44.294" starttime="20190508 15:07:39.656"></status>
</kw>
<kw type="foritem" name="${vlan} = 5">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:07:44.295" level="INFO">${destip} = 192.169.115.2</msg>
<status status="PASS" endtime="20190508 15:07:44.295" starttime="20190508 15:07:44.294"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${destip}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:44.296" starttime="20190508 15:07:44.295"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:48.904" level="INFO">sudo ping 192.169.115.2 -c 5
sudo ping 192.169.115.2 -c 5
PING 192.169.115.2 (192.169.115.2) 56(84) bytes of data.
64 bytes from 192.169.115.2: icmp_seq=1 ttl=62 time=3.63 ms
64 bytes from 192.169.115.2: icmp_seq=2 ttl=62 time=2.26 ms
64 bytes from 192.169.115.2: icmp_seq=3 ttl=62 time=2.22 ms
64 bytes from 192.169.115.2: icmp_seq=4 ttl=62 time=2.23 ms
64 bytes from 192.169.115.2: icmp_seq=5 ttl=62 time=1.89 ms

--- 192.169.115.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4006ms
rtt min/avg/max/mdev = 1.898/2.450/3.635/0.609 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:07:48.904" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:07:48.904" starttime="20190508 15:07:44.296"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:48.906" starttime="20190508 15:07:48.905"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:48.906" starttime="20190508 15:07:48.906"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:48.908" starttime="20190508 15:07:48.907"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:48.908" starttime="20190508 15:07:48.906"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:48.908" starttime="20190508 15:07:48.905"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:48.908" starttime="20190508 15:07:44.294"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:48.908" starttime="20190508 15:07:25.767"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:48.908" starttime="20190508 15:07:25.767"></status>
</kw>
<tags>
<tag>PING</tag>
</tags>
<status status="PASS" endtime="20190508 15:07:48.908" critical="yes" starttime="20190508 15:07:25.767"></status>
</test>
<test id="s1-t7" name="Testcase: Ping Test VM2 To VM1(10 LANS)">
<kw name="Ping Test VM2 to VM1(10 LANS)">
<tags>
<tag>HYBRID</tag>
</tags>
<kw type="for" name="${vlan} IN RANGE [ 1 | ${VM2['NO_OF_VRFS']} + 1 ]">
<kw type="foritem" name="${vlan} = 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:07:48.911" level="INFO">${destip} = 192.169.101.2</msg>
<status status="PASS" endtime="20190508 15:07:48.911" starttime="20190508 15:07:48.910"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${destip}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:48.912" starttime="20190508 15:07:48.912"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:53.411" level="INFO">sudo ping 192.169.101.2 -c 5
sudo ping 192.169.101.2 -c 5
PING 192.169.101.2 (192.169.101.2) 56(84) bytes of data.
64 bytes from 192.169.101.2: icmp_seq=1 ttl=64 time=0.056 ms
64 bytes from 192.169.101.2: icmp_seq=2 ttl=64 time=0.039 ms
64 bytes from 192.169.101.2: icmp_seq=3 ttl=64 time=0.050 ms
64 bytes from 192.169.101.2: icmp_seq=4 ttl=64 time=0.046 ms
64 bytes from 192.169.101.2: icmp_seq=5 ttl=64 time=0.041 ms

--- 192.169.101.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 3997ms
rtt min/avg/max/mdev = 0.039/0.046/0.056/0.008 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:07:53.411" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:07:53.411" starttime="20190508 15:07:48.912"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:53.412" starttime="20190508 15:07:53.412"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:53.413" starttime="20190508 15:07:53.412"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:53.414" starttime="20190508 15:07:53.413"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:53.414" starttime="20190508 15:07:53.413"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:53.414" starttime="20190508 15:07:53.411"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:53.414" starttime="20190508 15:07:48.910"></status>
</kw>
<kw type="foritem" name="${vlan} = 2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:07:53.415" level="INFO">${destip} = 192.169.102.2</msg>
<status status="PASS" endtime="20190508 15:07:53.415" starttime="20190508 15:07:53.414"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${destip}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:53.415" starttime="20190508 15:07:53.415"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:07:57.914" level="INFO">sudo ping 192.169.102.2 -c 5
sudo ping 192.169.102.2 -c 5
PING 192.169.102.2 (192.169.102.2) 56(84) bytes of data.
64 bytes from 192.169.102.2: icmp_seq=1 ttl=64 time=0.054 ms
64 bytes from 192.169.102.2: icmp_seq=2 ttl=64 time=0.041 ms
64 bytes from 192.169.102.2: icmp_seq=3 ttl=64 time=0.045 ms
64 bytes from 192.169.102.2: icmp_seq=4 ttl=64 time=0.041 ms
64 bytes from 192.169.102.2: icmp_seq=5 ttl=64 time=0.046 ms

--- 192.169.102.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 3999ms
rtt min/avg/max/mdev = 0.041/0.045/0.054/0.007 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:07:57.915" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:07:57.915" starttime="20190508 15:07:53.416"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:57.917" starttime="20190508 15:07:57.917"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:57.917" starttime="20190508 15:07:57.917"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:57.917" starttime="20190508 15:07:57.917"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:57.917" starttime="20190508 15:07:57.917"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:57.917" starttime="20190508 15:07:57.915"></status>
</kw>
<status status="PASS" endtime="20190508 15:07:57.917" starttime="20190508 15:07:53.414"></status>
</kw>
<kw type="foritem" name="${vlan} = 3">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:07:57.917" level="INFO">${destip} = 192.169.103.2</msg>
<status status="PASS" endtime="20190508 15:07:57.917" starttime="20190508 15:07:57.917"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${destip}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:07:57.917" starttime="20190508 15:07:57.917"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:08:02.421" level="INFO">sudo ping 192.169.103.2 -c 5
sudo ping 192.169.103.2 -c 5
PING 192.169.103.2 (192.169.103.2) 56(84) bytes of data.
64 bytes from 192.169.103.2: icmp_seq=1 ttl=64 time=0.056 ms
64 bytes from 192.169.103.2: icmp_seq=2 ttl=64 time=0.134 ms
64 bytes from 192.169.103.2: icmp_seq=3 ttl=64 time=0.076 ms
64 bytes from 192.169.103.2: icmp_seq=4 ttl=64 time=0.056 ms
64 bytes from 192.169.103.2: icmp_seq=5 ttl=64 time=0.058 ms

--- 192.169.103.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4000ms
rtt min/avg/max/mdev = 0.056/0.076/0.134/0.029 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:08:02.422" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:08:02.422" starttime="20190508 15:07:57.917"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:02.424" starttime="20190508 15:08:02.423"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:02.424" starttime="20190508 15:08:02.424"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:02.424" starttime="20190508 15:08:02.424"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:02.424" starttime="20190508 15:08:02.424"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:02.424" starttime="20190508 15:08:02.422"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:02.424" starttime="20190508 15:07:57.917"></status>
</kw>
<kw type="foritem" name="${vlan} = 4">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:08:02.424" level="INFO">${destip} = 192.169.104.2</msg>
<status status="PASS" endtime="20190508 15:08:02.424" starttime="20190508 15:08:02.424"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${destip}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:02.424" starttime="20190508 15:08:02.424"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:08:07.049" level="INFO">sudo ping 192.169.104.2 -c 5
sudo ping 192.169.104.2 -c 5
PING 192.169.104.2 (192.169.104.2) 56(84) bytes of data.
64 bytes from 192.169.104.2: icmp_seq=1 ttl=64 time=0.080 ms
64 bytes from 192.169.104.2: icmp_seq=2 ttl=64 time=0.077 ms
64 bytes from 192.169.104.2: icmp_seq=3 ttl=64 time=0.059 ms
64 bytes from 192.169.104.2: icmp_seq=4 ttl=64 time=0.075 ms
64 bytes from 192.169.104.2: icmp_seq=5 ttl=64 time=0.039 ms

--- 192.169.104.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 3999ms
rtt min/avg/max/mdev = 0.039/0.066/0.080/0.015 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:08:07.050" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:08:07.050" starttime="20190508 15:08:02.424"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:07.051" starttime="20190508 15:08:07.051"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:07.052" starttime="20190508 15:08:07.052"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:07.052" starttime="20190508 15:08:07.052"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:07.052" starttime="20190508 15:08:07.052"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:07.052" starttime="20190508 15:08:07.050"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:07.052" starttime="20190508 15:08:02.424"></status>
</kw>
<kw type="foritem" name="${vlan} = 5">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:08:07.052" level="INFO">${destip} = 192.169.105.2</msg>
<status status="PASS" endtime="20190508 15:08:07.052" starttime="20190508 15:08:07.052"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${destip}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:07.052" starttime="20190508 15:08:07.052"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:08:11.563" level="INFO">sudo ping 192.169.105.2 -c 5
sudo ping 192.169.105.2 -c 5
PING 192.169.105.2 (192.169.105.2) 56(84) bytes of data.
64 bytes from 192.169.105.2: icmp_seq=1 ttl=64 time=0.109 ms
64 bytes from 192.169.105.2: icmp_seq=2 ttl=64 time=0.040 ms
64 bytes from 192.169.105.2: icmp_seq=3 ttl=64 time=0.045 ms
64 bytes from 192.169.105.2: icmp_seq=4 ttl=64 time=0.040 ms
64 bytes from 192.169.105.2: icmp_seq=5 ttl=64 time=0.056 ms

--- 192.169.105.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4000ms
rtt min/avg/max/mdev = 0.040/0.058/0.109/0.026 ms
sathish@VM1:~$</msg>
<msg timestamp="20190508 15:08:11.563" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20190508 15:08:11.563" starttime="20190508 15:08:07.052"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:11.563" starttime="20190508 15:08:11.563"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:11.563" starttime="20190508 15:08:11.563"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:11.563" starttime="20190508 15:08:11.563"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:11.563" starttime="20190508 15:08:11.563"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:11.563" starttime="20190508 15:08:11.563"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:11.563" starttime="20190508 15:08:07.052"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:11.563" starttime="20190508 15:07:48.910"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:11.563" starttime="20190508 15:07:48.909"></status>
</kw>
<tags>
<tag>PING</tag>
</tags>
<status status="PASS" endtime="20190508 15:08:11.563" critical="yes" starttime="20190508 15:07:48.909"></status>
</test>
<test id="s1-t8" name="Testcase: Iperf3 Test VM1 To VM2">
<kw name="Iperf3 test VM1 to VM2">
<tags>
<tag>HYBRID</tag>
</tags>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][1]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20190508 15:08:11.563" level="INFO">${destip} = 192.169.111.2</msg>
<status status="PASS" endtime="20190508 15:08:11.563" starttime="20190508 15:08:11.563"></status>
</kw>
<kw name="Send Commands And Expect" library="VM2">
<arguments>
<arg>pkill iperf3 &amp;</arg>
</arguments>
<msg timestamp="20190508 15:08:11.979" level="INFO">pkill iperf3 &amp;
[1] 32557
sathish@CPE12-VM1:~$ </msg>
<msg timestamp="20190508 15:08:11.980" level="INFO">pkill iperf3 &amp;</msg>
<status status="PASS" endtime="20190508 15:08:11.980" starttime="20190508 15:08:11.563"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20190508 15:08:21.983" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20190508 15:08:21.983" starttime="20190508 15:08:11.981"></status>
</kw>
<kw name="Send Commands And Expect" library="VM2">
<arguments>
<arg>iperf3 -s &amp;</arg>
</arguments>
<msg timestamp="20190508 15:08:22.385" level="INFO">iperf3 -s &amp;
[2] 32559
[1]   Done                    pkill iperf3
sathish@CPE12-VM1:~$ -----------------------------------------------------------
Server listening on 5201
-----------------------------------------------------------
</msg>
<msg timestamp="20190508 15:08:22.385" level="INFO">iperf3 -s &amp;</msg>
<status status="PASS" endtime="20190508 15:08:22.385" starttime="20190508 15:08:21.984"></status>
</kw>
<kw name="Send Commands And Expect" library="VM1">
<arguments>
<arg>iperf3 -c ${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20190508 15:08:32.831" level="INFO">iperf3 -c 192.169.111.2
Connecting to host 192.169.111.2, port 5201
[  4] local 192.169.101.2 port 43850 connected to 192.169.111.2 port 5201
[ ID] Interval           Transfer     Bandwidth       Retr  Cwnd
[  4]   0.00-1.00   sec  27.8 MBytes   233 Mbits/sec    0   1.28 MBytes       
[  4]   1.00-2.00   sec  26.2 MBytes   220 Mbits/sec    0   2.59 MBytes       
[  4]   2.00-3.00   sec  27.5 MBytes   231 Mbits/sec    1   3.15 MBytes       
[  4]   3.00-4.00   sec  26.2 MBytes   220 Mbits/sec    0   3.15 MBytes       
[  4]   4.00-5.00   sec  27.5 MBytes   231 Mbits/sec    0   3.15 MBytes       
[  4]   5.00-6.00   sec  27.5 MBytes   231 Mbits/sec    0   3.15 MBytes       
[  4]   6.00-7.00   sec  26.2 MBytes   220 Mbits/sec    0   3.15 MBytes       
[  4]   7.00-8.00   sec  26.2 MBytes   220 Mbits/sec    0   3.15 MBytes       
[  4]   8.00-9.00   sec  27.5 MBytes   231 Mbits/sec    0   3.15 MBytes       
[  4]   9.00-10.00  sec  27.5 MBytes   231 Mbits/sec    0   3.15 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth       Retr
[  4]   0.00-10.00  sec   270 MBytes   227 Mbits/sec    1             sender
[  4]   0.00-10.00  sec   268 MBytes   225 Mbits/sec                  receiver

iperf Done.
sathish@VM1:~$ </msg>
<msg timestamp="20190508 15:08:32.831" level="INFO">iperf3 -c 192.169.111.2</msg>
<msg timestamp="20190508 15:08:32.831" level="INFO">${result} = iperf3 -c 192.169.111.2
Connecting to host 192.169.111.2, port 5201
[  4] local 192.169.101.2 port 43850 connected to 192.169.111.2 port 5201
[ ID] Interval           Transfer     Bandwidth       Retr...</msg>
<status status="PASS" endtime="20190508 15:08:32.831" starttime="20190508 15:08:22.385"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>iperf Done.</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:32.832" starttime="20190508 15:08:32.832"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:32.832" starttime="20190508 15:08:11.563"></status>
</kw>
<tags>
<tag>IPERF</tag>
</tags>
<status status="PASS" endtime="20190508 15:08:32.832" critical="yes" starttime="20190508 15:08:11.563"></status>
</test>
<kw type="teardown" name="CLEANUP">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"sasasa"</arg>
</arguments>
<status status="PASS" endtime="20190508 15:08:32.835" starttime="20190508 15:08:32.834"></status>
</kw>
<status status="PASS" endtime="20190508 15:08:32.835" starttime="20190508 15:08:32.834"></status>
</kw>
<doc>A test suite with tests for SDWAN HYBRID Solution.
Topology:-
____________________________
| VersaDirector |
|___________________________|
|
|
|
_____________|_______________
| WanCtrller1 |
|____________________________|
| |
| |
| |
INTERNET/MPLS
| |
| |___
______|__ ___|___
| | | |
LAN1--+ CPE1 | | CPE2 +--LAN1
|________| |_______|


Testplan Goals:-
1. CHECK IF IP ADDRESS IS SET AND INTERFACE IS UP.</doc>
<metadata>
<item name="Version">1.0
More Info For more information about Robot Framework see http://robotframework.org
Author Sathishkumar murugesan
Date 12 Dec 2017
Executed At HOST
Test Framework Robot Framework Python</item>
</metadata>
<status status="PASS" endtime="20190508 15:08:32.835" starttime="20190508 15:05:13.851"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="8">Critical Tests</stat>
<stat fail="0" pass="8">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">IPERF</stat>
<stat fail="0" pass="1">LAN</stat>
<stat fail="0" pass="4">PING</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="SINGLE CPE HYBRID SOLUTION TEST" pass="8">SINGLE CPE HYBRID SOLUTION TEST</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
