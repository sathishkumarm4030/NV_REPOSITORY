<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20200422 16:24:18.156" generator="Robot 3.1.2 (Python 2.7.13 on win32)">
<suite source="C:\Softwares_mine\stefano\NV_REPOSITORY\csit\ROBOT_TESTSUITES\SINGLE_CPE_MPLS_ONLY_SOLUTION_TEST.robot" id="s1" name="SINGLE CPE MPLS ONLY SOLUTION TEST">
<kw type="setup" name="STARTUP">
<doc>Make connecection to Versa devices</doc>
<kw name="Login" library="VD1">
<status status="PASS" endtime="20200422 16:25:13.649" starttime="20200422 16:25:03.502"></status>
</kw>
<kw name="Get Data Dict" library="VD1">
<assign>
<var>${VD1}</var>
</assign>
<msg timestamp="20200422 16:25:13.650" level="INFO">${VD1} = {'ctlr_dict': {'MYS': ['NV-WC01-N7-MYS', 'NV-WC02-N7-MYS'], 'LON': ['NV-WC01-N5-LON', 'NV-WC02-N5-LON'], 'HKG': ['NV-WC01-N1-HKG', 'NV-WC02-N1-HKG'], 'SIN': ['NV-WC01-N6-SIN', 'NV-WC02-N6-SIN']}, 'GUI...</msg>
<status status="PASS" endtime="20200422 16:25:13.650" starttime="20200422 16:25:13.649"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${VM1}</arg>
</arguments>
<msg timestamp="20200422 16:25:13.652" level="INFO">${VM1} = CPE26_LAN_HOST1</msg>
<status status="PASS" endtime="20200422 16:25:13.652" starttime="20200422 16:25:13.651"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${VM2}</arg>
</arguments>
<msg timestamp="20200422 16:25:13.654" level="INFO">${VM2} = CPE11_LAN_HOST1</msg>
<status status="PASS" endtime="20200422 16:25:13.654" starttime="20200422 16:25:13.653"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${VM3}</arg>
</arguments>
<msg timestamp="20200422 16:25:13.657" level="INFO">${VM3} = CPE27_LAN_HOST1</msg>
<status status="PASS" endtime="20200422 16:25:13.657" starttime="20200422 16:25:13.655"></status>
</kw>
<kw name="Cross Login" library="CPE1">
<msg timestamp="20200422 16:25:43.132" level="INFO">ssh admin@20.20.90.26
admin@20.20.90.26's password: 

             .---.,
            (      ``.
       _     \        )    __      ________ _____   _____
      (  `.   \      /     \ \    / /  ____|  __ \ / ____|  /\
       \    `. )    /       \ \  / /| |__  | |__) | (___   /  \
        \     |    /         \ \/ / |  __| |  _  / \___ \ / /\ \
         \    |   /           \  /  | |____| | \ \ ____) / ____ \
          \   |  /             \/   |______|_|  \_\_____/_/    \_\
           \  | /
            \_|/                     ___ _    _____  ___   ___  _ ___
                                    | __| |  | __\ \/ | \ / / \| | __|
                                    | _|| |__| _| &gt;  &lt; \ V /| .` | _|
                                    |_| |____|___/_/\_\ \_/ |_|\_|_|


Versa FlexVNF software
Release     :	16.1R2 (S9)
Release date:	20190628
Package ID  :	80561de	

Last login: Tue Apr 21 15:13:36 2020 from 10.92.116.67
[admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190: ~] $ 
doing redispatch
set idle-timeout 0
[ok][2020-04-22 10:57:11]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt;</msg>
<status status="PASS" endtime="20200422 16:25:43.132" starttime="20200422 16:25:13.658"></status>
</kw>
<kw name="Cross Login" library="CPE2">
<msg timestamp="20200422 16:26:13.097" level="INFO">ssh admin@20.20.90.11
admin@20.20.90.11's password: 

             .---.,
            (      ``.
       _     \        )    __      ________ _____   _____
      (  `.   \      /     \ \    / /  ____|  __ \ / ____|  /\
       \    `. )    /       \ \  / /| |__  | |__) | (___   /  \
        \     |    /         \ \/ / |  __| |  _  / \___ \ / /\ \
         \    |   /           \  /  | |____| | \ \ ____) / ____ \
          \   |  /             \/   |______|_|  \_\_____/_/    \_\
           \  | /
            \_|/                     ___ _    _____  ___   ___  _ ___
                                    | __| |  | __\ \/ | \ / / \| | __|
                                    | _|| |__| _| &gt;  &lt; \ V /| .` | _|
                                    |_| |____|___/_/\_\ \_/ |_|\_|_|


Versa FlexVNF software
Release     :	16.1R2 (S9)
Release date:	20190628
Package ID  :	80561de	

Last login: Tue Apr 21 15:06:57 2020 from 10.92.116.67
admin@CPE11-HKG-HYBRD-IPC00190:~$ 
doing redispatch
set idle-timeout 0
[ok][2020-04-22 10:51:31]
admin@CPE11-HKG-HYBRD-IPC00190-cli&gt;</msg>
<status status="PASS" endtime="20200422 16:26:13.097" starttime="20200422 16:25:43.133"></status>
</kw>
<kw name="Cross Login" library="CPE3">
<msg timestamp="20200422 16:26:42.405" level="INFO">ssh admin@20.20.90.27
admin@20.20.90.27's password: 

             .---.,
            (      ``.
       _     \        )    __      ________ _____   _____
      (  `.   \      /     \ \    / /  ____|  __ \ / ____|  /\
       \    `. )    /       \ \  / /| |__  | |__) | (___   /  \
        \     |    /         \ \/ / |  __| |  _  / \___ \ / /\ \
         \    |   /           \  /  | |____| | \ \ ____) / ____ \
          \   |  /             \/   |______|_|  \_\_____/_/    \_\
           \  | /
            \_|/                     ___ _    _____  ___   ___  _ ___
                                    | __| |  | __\ \/ | \ / / \| | __|
                                    | _|| |__| _| &gt;  &lt; \ V /| .` | _|
                                    |_| |____|___/_/\_\ \_/ |_|\_|_|


Versa FlexVNF software
Release     :	16.1R2 (S9)
Release date:	20190628
Package ID  :	80561de	

Last login: Tue Apr 21 15:12:30 2020 from 10.92.116.67
[admin@CPE27-SIN-SINGLE-CPE-INTONLY-IPC00190: ~] # 
doing redispatch
set idle-timeout 0
[ok][2020-04-22 10:58:03]
admin@CPE27-SIN-SINGLE-CPE-INTONLY-IPC00190-cli&gt;</msg>
<status status="PASS" endtime="20200422 16:26:42.405" starttime="20200422 16:26:13.098"></status>
</kw>
<kw name="Connect And Reserve Ports" library="spirent1">
<msg timestamp="20200422 16:26:59.042" level="INFO">reserved ports 10/1 : port1 : port_handle[0]

 reserved ports 10/2 : port2 : port_handle[1]
***** run sth.interface_config successfully
***** run sth.interface_config successfully</msg>
<status status="PASS" endtime="20200422 16:26:59.042" starttime="20200422 16:26:42.406"></status>
</kw>
<kw name="Get Device Info" library="CPE1">
<assign>
<var>${CPE1_dev_info_on_vd}</var>
</assign>
<msg timestamp="20200422 16:27:01.008" level="INFO">${CPE1_dev_info_on_vd} = {'ownerOrg': u'IPC00190', 'name': u'CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190', 'ipAddress': u'20.20.90.26', 'packageName': u'versa-flexvnf-20190628-153900-80561de-16.1R2S9', 'ping_status': u'REACHABLE',...</msg>
<status status="PASS" endtime="20200422 16:27:01.008" starttime="20200422 16:26:59.042"></status>
</kw>
<kw name="Get Data Dict" library="CPE1">
<assign>
<var>${CPE1}</var>
</assign>
<msg timestamp="20200422 16:27:01.032" level="INFO">${CPE1} = {'username': 'admin', 'main_logger': &lt;logging.Logger object at 0x00000000105358D0&gt;, 'ctlr_dict': {'MYS': ['NV-WC01-N7-MYS', 'NV-WC02-N7-MYS'], 'LON': ['NV-WC01-N5-LON', 'NV-WC02-N5-LON'], 'HKG': ['NV-...</msg>
<status status="PASS" endtime="20200422 16:27:01.032" starttime="20200422 16:27:01.009"></status>
</kw>
<kw name="Get Data Dict" library="CPE2">
<assign>
<var>${CPE2}</var>
</assign>
<msg timestamp="20200422 16:27:01.045" level="INFO">${CPE2} = {'username': 'admin', 'main_logger': &lt;logging.Logger object at 0x0000000010843A58&gt;, 'ctlr_dict': {'MYS': ['NV-WC01-N7-MYS', 'NV-WC02-N7-MYS'], 'LON': ['NV-WC01-N5-LON', 'NV-WC02-N5-LON'], 'HKG': ['NV-...</msg>
<status status="PASS" endtime="20200422 16:27:01.045" starttime="20200422 16:27:01.032"></status>
</kw>
<kw name="Get Data Dict" library="CPE3">
<assign>
<var>${CPE3}</var>
</assign>
<msg timestamp="20200422 16:27:01.058" level="INFO">${CPE3} = {'username': 'admin', 'main_logger': &lt;logging.Logger object at 0x0000000010726DA0&gt;, 'ctlr_dict': {'MYS': ['NV-WC01-N7-MYS', 'NV-WC02-N7-MYS'], 'LON': ['NV-WC01-N5-LON', 'NV-WC02-N5-LON'], 'HKG': ['NV-...</msg>
<status status="PASS" endtime="20200422 16:27:01.059" starttime="20200422 16:27:01.045"></status>
</kw>
<kw name="Create Controller List" library="CPE1">
<arguments>
<arg>${CPE1['ORG_NAME']}</arg>
<arg>${CPE1['ORG_ID']}</arg>
<arg>${CPE1['NO_OF_VRFS']}</arg>
<arg>${CPE1['NODE']}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:27:01.095" starttime="20200422 16:27:01.059"></status>
</kw>
<kw name="Create Gateway List" library="CPE1">
<arguments>
<arg>${CPE1['ORG_NAME']}</arg>
<arg>${CPE1['ORG_ID']}</arg>
<arg>${CPE1['NO_OF_VRFS']}</arg>
<arg>${CPE1['NODE']}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:27:01.121" starttime="20200422 16:27:01.096"></status>
</kw>
<kw name="Create Cpe Data" library="CPE1">
<status status="PASS" endtime="20200422 16:27:01.122" starttime="20200422 16:27:01.122"></status>
</kw>
<kw name="Create Controller List" library="CPE2">
<arguments>
<arg>${CPE2['ORG_NAME']}</arg>
<arg>${CPE2['ORG_ID']}</arg>
<arg>${CPE2['NO_OF_VRFS']}</arg>
<arg>${CPE2['NODE']}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:27:01.141" starttime="20200422 16:27:01.123"></status>
</kw>
<kw name="Create Gateway List" library="CPE2">
<arguments>
<arg>${CPE2['ORG_NAME']}</arg>
<arg>${CPE2['ORG_ID']}</arg>
<arg>${CPE2['NO_OF_VRFS']}</arg>
<arg>${CPE2['NODE']}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:27:01.156" starttime="20200422 16:27:01.141"></status>
</kw>
<kw name="Create Cpe Data" library="CPE2">
<status status="PASS" endtime="20200422 16:27:01.157" starttime="20200422 16:27:01.156"></status>
</kw>
<kw name="Create Controller List" library="CPE3">
<arguments>
<arg>${CPE3['ORG_NAME']}</arg>
<arg>${CPE3['ORG_ID']}</arg>
<arg>${CPE3['NO_OF_VRFS']}</arg>
<arg>${CPE3['NODE']}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:27:01.179" starttime="20200422 16:27:01.157"></status>
</kw>
<kw name="Create Gateway List" library="CPE3">
<arguments>
<arg>${CPE3['ORG_NAME']}</arg>
<arg>${CPE3['ORG_ID']}</arg>
<arg>${CPE3['NO_OF_VRFS']}</arg>
<arg>${CPE3['NODE']}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:27:01.207" starttime="20200422 16:27:01.180"></status>
</kw>
<kw name="Create Cpe Data" library="CPE3">
<status status="PASS" endtime="20200422 16:27:01.208" starttime="20200422 16:27:01.208"></status>
</kw>
<kw name="Get Data Dict" library="CPE1">
<assign>
<var>${CPE1}</var>
</assign>
<msg timestamp="20200422 16:27:01.222" level="INFO">${CPE1} = {'gw_list': ['NV-GW01-N1-HKG', 'NV-GW02-N1-HKG', 'NV-GW01-N6-SIN', 'NV-GW02-N6-SIN'], 'dev_dict': {'ownerOrg': u'IPC00190', 'name': u'CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190', 'ipAddress': u'20.20.90.2...</msg>
<status status="PASS" endtime="20200422 16:27:01.222" starttime="20200422 16:27:01.209"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CPE1}</arg>
</arguments>
<msg timestamp="20200422 16:27:01.254" level="INFO">${CPE1} = {'gw_list': ['NV-GW01-N1-HKG', 'NV-GW02-N1-HKG', 'NV-GW01-N6-SIN', 'NV-GW02-N6-SIN'], 'dev_dict': {'ownerOrg': u'IPC00190', 'name': u'CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190', 'ipAddress': u'20.20.90.2...</msg>
<status status="PASS" endtime="20200422 16:27:01.254" starttime="20200422 16:27:01.223"></status>
</kw>
<kw name="Get Data Dict" library="CPE2">
<assign>
<var>${CPE2}</var>
</assign>
<msg timestamp="20200422 16:27:01.268" level="INFO">${CPE2} = {'gw_list': ['NV-GW01-N1-HKG', 'NV-GW02-N1-HKG', 'NV-GW01-N6-SIN', 'NV-GW02-N6-SIN'], 'START_LAN_IP_SUBNET': '192.169.101.0/24', 'PST_CREATION': 'YES', 'WAN2_INTF_NEXTHOP': '172.16.6.41', 'lan_vlan': ...</msg>
<status status="PASS" endtime="20200422 16:27:01.268" starttime="20200422 16:27:01.254"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CPE2}</arg>
</arguments>
<msg timestamp="20200422 16:27:01.294" level="INFO">${CPE2} = {'gw_list': ['NV-GW01-N1-HKG', 'NV-GW02-N1-HKG', 'NV-GW01-N6-SIN', 'NV-GW02-N6-SIN'], 'START_LAN_IP_SUBNET': '192.169.101.0/24', 'PST_CREATION': 'YES', 'WAN2_INTF_NEXTHOP': '172.16.6.41', 'lan_vlan': ...</msg>
<status status="PASS" endtime="20200422 16:27:01.294" starttime="20200422 16:27:01.268"></status>
</kw>
<kw name="Get Data Dict" library="CPE3">
<assign>
<var>${CPE3}</var>
</assign>
<msg timestamp="20200422 16:27:01.308" level="INFO">${CPE3} = {'gw_list': ['NV-GW01-N1-HKG', 'NV-GW02-N1-HKG', 'NV-GW01-N6-SIN', 'NV-GW02-N6-SIN'], 'START_LAN_IP_SUBNET': '192.170.11.0/24', 'PST_CREATION': 'YES', 'lan_vlan': [760], 'WC2_local_ike_key': 'CPE27-SI...</msg>
<status status="PASS" endtime="20200422 16:27:01.308" starttime="20200422 16:27:01.294"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CPE3}</arg>
</arguments>
<msg timestamp="20200422 16:27:01.334" level="INFO">${CPE3} = {'gw_list': ['NV-GW01-N1-HKG', 'NV-GW02-N1-HKG', 'NV-GW01-N6-SIN', 'NV-GW02-N6-SIN'], 'START_LAN_IP_SUBNET': '192.170.11.0/24', 'PST_CREATION': 'YES', 'lan_vlan': [760], 'WC2_local_ike_key': 'CPE27-SI...</msg>
<status status="PASS" endtime="20200422 16:27:01.335" starttime="20200422 16:27:01.308"></status>
</kw>
<kw name="VM Pre Op" library="VM1">
<msg timestamp="20200422 16:27:10.218" level="INFO">&lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x0000000010D98A90&gt;
[sudo] password for colt123: 
untu:~# 
exit
linux: colt123@ubuntu:~$</msg>
<status status="PASS" endtime="20200422 16:27:10.218" starttime="20200422 16:27:01.335"></status>
</kw>
<kw name="VM Pre Op" library="VM2">
<msg timestamp="20200422 16:27:19.242" level="INFO">&lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x0000000010D9CC88&gt;
[sudo] password for sathish: 
1:~# 
exit
linux: sathish@VM1:~$</msg>
<status status="PASS" endtime="20200422 16:27:19.243" starttime="20200422 16:27:10.218"></status>
</kw>
<kw name="VM Pre Op" library="VM3">
<msg timestamp="20200422 16:27:28.074" level="INFO">&lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x0000000010D8A0B8&gt;
[sudo] password for colt123: 
untu:~# 
exit
linux: colt123@ubuntu:~$</msg>
<status status="PASS" endtime="20200422 16:27:28.075" starttime="20200422 16:27:19.244"></status>
</kw>
<kw name="Get Data Dict" library="VM1">
<assign>
<var>${VM1}</var>
</assign>
<msg timestamp="20200422 16:27:28.127" level="INFO">${VM1} = {'username': 'colt123', 'shell_nc': &lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x0000000010D98A90&gt;, 'lan': {1: {'second_host': '192.170.1.2', 'vlan': 750, 'netmask': '255.255.255.0', 'first_host': '1...</msg>
<status status="PASS" endtime="20200422 16:27:28.127" starttime="20200422 16:27:28.076"></status>
</kw>
<kw name="Get Data Dict" library="VM2">
<assign>
<var>${VM2}</var>
</assign>
<msg timestamp="20200422 16:27:28.135" level="INFO">${VM2} = {'username': 'sathish', 'shell_nc': &lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x0000000010D9CC88&gt;, 'lan': {1: {'second_host': '192.169.101.2', 'vlan': 600, 'netmask': '255.255.255.0', 'first_host': ...</msg>
<status status="PASS" endtime="20200422 16:27:28.135" starttime="20200422 16:27:28.127"></status>
</kw>
<kw name="Get Data Dict" library="VM3">
<assign>
<var>${VM3}</var>
</assign>
<msg timestamp="20200422 16:27:28.142" level="INFO">${VM3} = {'username': 'colt123', 'shell_nc': &lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x0000000010D8A0B8&gt;, 'lan': {1: {'second_host': '192.170.11.2', 'vlan': 760, 'netmask': '255.255.255.0', 'first_host': '...</msg>
<status status="PASS" endtime="20200422 16:27:28.142" starttime="20200422 16:27:28.135"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${VM1}</arg>
</arguments>
<msg timestamp="20200422 16:27:28.156" level="INFO">${VM1} = {'username': 'colt123', 'shell_nc': &lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x0000000010D98A90&gt;, 'lan': {1: {'second_host': '192.170.1.2', 'vlan': 750, 'netmask': '255.255.255.0', 'first_host': '1...</msg>
<status status="PASS" endtime="20200422 16:27:28.156" starttime="20200422 16:27:28.143"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${VM2}</arg>
</arguments>
<msg timestamp="20200422 16:27:28.171" level="INFO">${VM2} = {'username': 'sathish', 'shell_nc': &lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x0000000010D9CC88&gt;, 'lan': {1: {'second_host': '192.169.101.2', 'vlan': 600, 'netmask': '255.255.255.0', 'first_host': ...</msg>
<status status="PASS" endtime="20200422 16:27:28.171" starttime="20200422 16:27:28.157"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${VM3}</arg>
</arguments>
<msg timestamp="20200422 16:27:28.185" level="INFO">${VM3} = {'username': 'colt123', 'shell_nc': &lt;netmiko.linux.linux_ssh.LinuxSSH object at 0x0000000010D8A0B8&gt;, 'lan': {1: {'second_host': '192.170.11.2', 'vlan': 760, 'netmask': '255.255.255.0', 'first_host': '...</msg>
<status status="PASS" endtime="20200422 16:27:28.185" starttime="20200422 16:27:28.171"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 1 | ${VM1['NO_OF_VRFS']} + 1 ]">
<kw type="foritem" name="${i} = 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20200422 16:27:28.186" level="INFO">${gw} = 192.170.1.1</msg>
<status status="PASS" endtime="20200422 16:27:28.186" starttime="20200422 16:27:28.185"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20200422 16:27:28.186" level="INFO">${vlan} = 750</msg>
<status status="PASS" endtime="20200422 16:27:28.186" starttime="20200422 16:27:28.186"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw1}</var>
</assign>
<msg timestamp="20200422 16:27:28.187" level="INFO">${destination_nw1} = 192.169.101.0/24</msg>
<status status="PASS" endtime="20200422 16:27:28.187" starttime="20200422 16:27:28.187"></status>
</kw>
<kw name="Send Commands And Expect" library="VM1">
<arguments>
<arg>sudo ip route add ${destination_nw1} via ${gw} dev ${VM1['LAN_INTF']}.${vlan}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:27:28.588" starttime="20200422 16:27:28.187"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM3['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw2}</var>
</assign>
<msg timestamp="20200422 16:27:28.591" level="INFO">${destination_nw2} = 192.170.11.0/24</msg>
<status status="PASS" endtime="20200422 16:27:28.591" starttime="20200422 16:27:28.589"></status>
</kw>
<kw name="Send Commands And Expect" library="VM1">
<arguments>
<arg>sudo ip route add ${destination_nw2} via ${gw} dev ${VM1['LAN_INTF']}.${vlan}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:27:28.994" starttime="20200422 16:27:28.591"></status>
</kw>
<status status="PASS" endtime="20200422 16:27:28.994" starttime="20200422 16:27:28.185"></status>
</kw>
<status status="PASS" endtime="20200422 16:27:28.994" starttime="20200422 16:27:28.185"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 1 | ${VM2['NO_OF_VRFS']} + 1 ]">
<kw type="foritem" name="${i} = 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20200422 16:27:28.999" level="INFO">${gw} = 192.169.101.1</msg>
<status status="PASS" endtime="20200422 16:27:28.999" starttime="20200422 16:27:28.997"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20200422 16:27:29.001" level="INFO">${vlan} = 600</msg>
<status status="PASS" endtime="20200422 16:27:29.001" starttime="20200422 16:27:29.000"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20200422 16:27:29.003" level="INFO">${destination_nw} = 192.170.1.0/24</msg>
<status status="PASS" endtime="20200422 16:27:29.003" starttime="20200422 16:27:29.002"></status>
</kw>
<kw name="Send Commands And Expect" library="VM2">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM2['LAN_INTF']}.${vlan}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:27:29.406" starttime="20200422 16:27:29.004"></status>
</kw>
<status status="PASS" endtime="20200422 16:27:29.406" starttime="20200422 16:27:28.997"></status>
</kw>
<status status="PASS" endtime="20200422 16:27:29.406" starttime="20200422 16:27:28.995"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 1 | ${VM3['NO_OF_VRFS']} + 1 ]">
<kw type="foritem" name="${i} = 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM3['lan'][${i}]['first_host']}</arg>
</arguments>
<assign>
<var>${gw}</var>
</assign>
<msg timestamp="20200422 16:27:29.410" level="INFO">${gw} = 192.170.11.1</msg>
<status status="PASS" endtime="20200422 16:27:29.410" starttime="20200422 16:27:29.408"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM3['lan'][${i}]['vlan']}</arg>
</arguments>
<assign>
<var>${vlan}</var>
</assign>
<msg timestamp="20200422 16:27:29.412" level="INFO">${vlan} = 760</msg>
<status status="PASS" endtime="20200422 16:27:29.412" starttime="20200422 16:27:29.410"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${i}]['nw']}</arg>
</arguments>
<assign>
<var>${destination_nw}</var>
</assign>
<msg timestamp="20200422 16:27:29.415" level="INFO">${destination_nw} = 192.170.1.0/24</msg>
<status status="PASS" endtime="20200422 16:27:29.415" starttime="20200422 16:27:29.413"></status>
</kw>
<kw name="Send Commands And Expect" library="VM3">
<arguments>
<arg>sudo ip route add ${destination_nw} via ${gw} dev ${VM3['LAN_INTF']}.${vlan}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:27:29.819" starttime="20200422 16:27:29.415"></status>
</kw>
<status status="PASS" endtime="20200422 16:27:29.820" starttime="20200422 16:27:29.408"></status>
</kw>
<status status="PASS" endtime="20200422 16:27:29.820" starttime="20200422 16:27:29.407"></status>
</kw>
<kw name="SPIRENT_STARTUP">
<kw name="Create Device" library="spirent1">
<arguments>
<arg>port=0</arg>
<arg>vlanid=${CPE1['lan'][1]['vlan']}</arg>
<arg>intf_ip_addr=${CPE1['lan'][1]['third_host']}</arg>
<arg>gateway_ip_addr=${CPE1['lan'][1]['first_host']}</arg>
</arguments>
<assign>
<var>${device1}</var>
</assign>
<msg timestamp="20200422 16:27:31.060" level="INFO">***** run sth.emulation_device_config successfully</msg>
<msg timestamp="20200422 16:27:31.060" level="INFO">${device1} = {'status': '1', 'handle': 'host1', 'intf_ip_addr': '192.170.1.1', 'vlanid': 750, 'gateway_ip_addr': '192.170.1.1', 'port': 'port1'}</msg>
<status status="PASS" endtime="20200422 16:27:31.060" starttime="20200422 16:27:29.821"></status>
</kw>
<kw name="Create Device" library="spirent1">
<arguments>
<arg>port=1</arg>
<arg>vlanid=${CPE2['lan'][1]['vlan']}</arg>
<arg>intf_ip_addr=${CPE2['lan'][1]['third_host']}</arg>
<arg>gateway_ip_addr=${CPE2['lan'][1]['first_host']}</arg>
</arguments>
<assign>
<var>${device2}</var>
</assign>
<msg timestamp="20200422 16:27:31.458" level="INFO">***** run sth.emulation_device_config successfully</msg>
<msg timestamp="20200422 16:27:31.458" level="INFO">${device2} = {'status': '1', 'handle': 'host2', 'intf_ip_addr': '192.169.101.1', 'vlanid': 600, 'gateway_ip_addr': '192.169.101.1', 'port': 'port2'}</msg>
<status status="PASS" endtime="20200422 16:27:31.458" starttime="20200422 16:27:31.060"></status>
</kw>
<kw name="Create Tcp Stream Block" library="spirent1">
<arguments>
<arg>${device1}</arg>
<arg>${device2}</arg>
<arg>src_port=2000</arg>
<arg>rate_mbps=2</arg>
</arguments>
<assign>
<var>${stream1}</var>
</assign>
<msg timestamp="20200422 16:27:35.784" level="INFO">***** run sth.traffic_config successfully</msg>
<msg timestamp="20200422 16:27:35.785" level="INFO">${stream1} = {'status': '1', 'stream_id': 'streamblock1'}</msg>
<status status="PASS" endtime="20200422 16:27:35.785" starttime="20200422 16:27:31.458"></status>
</kw>
<kw name="Create Tcp Stream Block" library="spirent1">
<arguments>
<arg>${device1}</arg>
<arg>${device2}</arg>
<arg>src_port=2001</arg>
<arg>rate_mbps=2</arg>
</arguments>
<assign>
<var>${stream2}</var>
</assign>
<msg timestamp="20200422 16:27:38.569" level="INFO">***** run sth.traffic_config successfully</msg>
<msg timestamp="20200422 16:27:38.569" level="INFO">${stream2} = {'status': '1', 'stream_id': 'streamblock2'}</msg>
<status status="PASS" endtime="20200422 16:27:38.569" starttime="20200422 16:27:35.785"></status>
</kw>
<kw name="Create Udp Stream Block" library="spirent1">
<arguments>
<arg>${device1}</arg>
<arg>${device2}</arg>
<arg>src_port=2002</arg>
<arg>rate_mbps=2</arg>
</arguments>
<assign>
<var>${stream3}</var>
</assign>
<msg timestamp="20200422 16:27:41.473" level="INFO">***** run sth.traffic_config successfully</msg>
<msg timestamp="20200422 16:27:41.473" level="INFO">${stream3} = {'status': '1', 'stream_id': 'streamblock3'}</msg>
<status status="PASS" endtime="20200422 16:27:41.473" starttime="20200422 16:27:38.569"></status>
</kw>
<kw name="Create Tcp Stream Block" library="spirent1">
<arguments>
<arg>${device1}</arg>
<arg>${device2}</arg>
<arg>src_port=3001</arg>
<arg>rate_mbps=1</arg>
<arg>ip_dscp=46</arg>
</arguments>
<assign>
<var>${premium_tcp_stream1}</var>
</assign>
<msg timestamp="20200422 16:27:44.322" level="INFO">***** run sth.traffic_config successfully</msg>
<msg timestamp="20200422 16:27:44.322" level="INFO">${premium_tcp_stream1} = {'status': '1', 'stream_id': 'streamblock4'}</msg>
<status status="PASS" endtime="20200422 16:27:44.322" starttime="20200422 16:27:41.474"></status>
</kw>
<kw name="Create Tcp Stream Block" library="spirent1">
<arguments>
<arg>${device1}</arg>
<arg>${device2}</arg>
<arg>src_port=3002</arg>
<arg>rate_mbps=1</arg>
<arg>ip_dscp=26</arg>
</arguments>
<assign>
<var>${business1_tcp_stream1}</var>
</assign>
<msg timestamp="20200422 16:27:47.206" level="INFO">***** run sth.traffic_config successfully</msg>
<msg timestamp="20200422 16:27:47.206" level="INFO">${business1_tcp_stream1} = {'status': '1', 'stream_id': 'streamblock5'}</msg>
<status status="PASS" endtime="20200422 16:27:47.206" starttime="20200422 16:27:44.322"></status>
</kw>
<kw name="Create Tcp Stream Block" library="spirent1">
<arguments>
<arg>${device1}</arg>
<arg>${device2}</arg>
<arg>src_port=3003</arg>
<arg>rate_mbps=1</arg>
<arg>ip_dscp=18</arg>
</arguments>
<assign>
<var>${business2_tcp_stream1}</var>
</assign>
<msg timestamp="20200422 16:27:50.593" level="INFO">***** run sth.traffic_config successfully</msg>
<msg timestamp="20200422 16:27:50.593" level="INFO">${business2_tcp_stream1} = {'status': '1', 'stream_id': 'streamblock6'}</msg>
<status status="PASS" endtime="20200422 16:27:50.593" starttime="20200422 16:27:47.206"></status>
</kw>
<kw name="Create Tcp Stream Block" library="spirent1">
<arguments>
<arg>${device1}</arg>
<arg>${device2}</arg>
<arg>src_port=3004</arg>
<arg>rate_mbps=1</arg>
<arg>ip_dscp=10</arg>
</arguments>
<assign>
<var>${business3_tcp_stream1}</var>
</assign>
<msg timestamp="20200422 16:27:53.549" level="INFO">***** run sth.traffic_config successfully</msg>
<msg timestamp="20200422 16:27:53.549" level="INFO">${business3_tcp_stream1} = {'status': '1', 'stream_id': 'streamblock7'}</msg>
<status status="PASS" endtime="20200422 16:27:53.549" starttime="20200422 16:27:50.594"></status>
</kw>
<kw name="Create Tcp Stream Block" library="spirent1">
<arguments>
<arg>${device1}</arg>
<arg>${device2}</arg>
<arg>src_port=5000</arg>
<arg>rate_mbps=1</arg>
</arguments>
<assign>
<var>${internet_default_tcp_stream1}</var>
</assign>
<msg timestamp="20200422 16:27:56.367" level="INFO">***** run sth.traffic_config successfully</msg>
<msg timestamp="20200422 16:27:56.368" level="INFO">${internet_default_tcp_stream1} = {'status': '1', 'stream_id': 'streamblock8'}</msg>
<status status="PASS" endtime="20200422 16:27:56.368" starttime="20200422 16:27:53.550"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${device1}</arg>
</arguments>
<msg timestamp="20200422 16:27:56.368" level="INFO">${device1} = {'status': '1', 'handle': 'host1', 'intf_ip_addr': '192.170.1.1', 'vlanid': 750, 'gateway_ip_addr': '192.170.1.1', 'port': 'port1'}</msg>
<status status="PASS" endtime="20200422 16:27:56.368" starttime="20200422 16:27:56.368"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${device2}</arg>
</arguments>
<msg timestamp="20200422 16:27:56.369" level="INFO">${device2} = {'status': '1', 'handle': 'host2', 'intf_ip_addr': '192.169.101.1', 'vlanid': 600, 'gateway_ip_addr': '192.169.101.1', 'port': 'port2'}</msg>
<status status="PASS" endtime="20200422 16:27:56.369" starttime="20200422 16:27:56.368"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${stream1}</arg>
</arguments>
<msg timestamp="20200422 16:27:56.369" level="INFO">${stream1} = {'status': '1', 'stream_id': 'streamblock1'}</msg>
<status status="PASS" endtime="20200422 16:27:56.369" starttime="20200422 16:27:56.369"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${stream2}</arg>
</arguments>
<msg timestamp="20200422 16:27:56.370" level="INFO">${stream2} = {'status': '1', 'stream_id': 'streamblock2'}</msg>
<status status="PASS" endtime="20200422 16:27:56.370" starttime="20200422 16:27:56.369"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${stream3}</arg>
</arguments>
<msg timestamp="20200422 16:27:56.371" level="INFO">${stream3} = {'status': '1', 'stream_id': 'streamblock3'}</msg>
<status status="PASS" endtime="20200422 16:27:56.371" starttime="20200422 16:27:56.370"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${premium_tcp_stream1}</arg>
</arguments>
<msg timestamp="20200422 16:27:56.371" level="INFO">${premium_tcp_stream1} = {'status': '1', 'stream_id': 'streamblock4'}</msg>
<status status="PASS" endtime="20200422 16:27:56.371" starttime="20200422 16:27:56.371"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${business1_tcp_stream1}</arg>
</arguments>
<msg timestamp="20200422 16:27:56.372" level="INFO">${business1_tcp_stream1} = {'status': '1', 'stream_id': 'streamblock5'}</msg>
<status status="PASS" endtime="20200422 16:27:56.372" starttime="20200422 16:27:56.371"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${business2_tcp_stream1}</arg>
</arguments>
<msg timestamp="20200422 16:27:56.372" level="INFO">${business2_tcp_stream1} = {'status': '1', 'stream_id': 'streamblock6'}</msg>
<status status="PASS" endtime="20200422 16:27:56.372" starttime="20200422 16:27:56.372"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${business3_tcp_stream1}</arg>
</arguments>
<msg timestamp="20200422 16:27:56.373" level="INFO">${business3_tcp_stream1} = {'status': '1', 'stream_id': 'streamblock7'}</msg>
<status status="PASS" endtime="20200422 16:27:56.373" starttime="20200422 16:27:56.372"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${internet_default_tcp_stream1}</arg>
</arguments>
<msg timestamp="20200422 16:27:56.373" level="INFO">${internet_default_tcp_stream1} = {'status': '1', 'stream_id': 'streamblock8'}</msg>
<status status="PASS" endtime="20200422 16:27:56.373" starttime="20200422 16:27:56.373"></status>
</kw>
<status status="PASS" endtime="20200422 16:27:56.373" starttime="20200422 16:27:29.820"></status>
</kw>
<kw name="Create Address Object" library="CPE1">
<arguments>
<arg>${ipaddobj_1}</arg>
<arg>ipv4-prefix</arg>
<arg>${CPE1['lan'][1]['third_host']}/32</arg>
</arguments>
<msg timestamp="20200422 16:27:56.374" level="INFO">
CREATE IPaddress Object
</msg>
<msg timestamp="20200422 16:27:58.410" level="INFO">
PASS</msg>
<msg timestamp="20200422 16:27:58.411" level="INFO">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ADDRESS OBJECT CREATION PASSED. &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</msg>
<msg timestamp="20200422 16:27:58.412" level="INFO">{
	"address": {
		"name": "src_ip_add_obj11",
		"ipv4-prefix": "192.170.1.3/32"
	}
}</msg>
<status status="PASS" endtime="20200422 16:27:58.412" starttime="20200422 16:27:56.374"></status>
</kw>
<kw name="Create Address Object" library="CPE1">
<arguments>
<arg>${ipaddobj_2}</arg>
<arg>ipv4-prefix</arg>
<arg>${CPE2['lan'][1]['third_host']}/32</arg>
</arguments>
<msg timestamp="20200422 16:27:58.414" level="INFO">
CREATE IPaddress Object
</msg>
<msg timestamp="20200422 16:27:59.567" level="INFO">
PASS</msg>
<msg timestamp="20200422 16:27:59.567" level="INFO">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ADDRESS OBJECT CREATION PASSED. &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</msg>
<msg timestamp="20200422 16:27:59.568" level="INFO">{
	"address": {
		"name": "dst_ip_add_obj11",
		"ipv4-prefix": "192.169.101.3/32"
	}
}</msg>
<status status="PASS" endtime="20200422 16:27:59.568" starttime="20200422 16:27:58.413"></status>
</kw>
<kw name="Create Service Object" library="CPE1">
<arguments>
<arg>${serviceobj_1}</arg>
<arg>${TCP}</arg>
<arg>source_port=2000</arg>
</arguments>
<msg timestamp="20200422 16:27:59.571" level="INFO">
CREATE Service Object
</msg>
<msg timestamp="20200422 16:28:00.722" level="INFO">
PASS</msg>
<msg timestamp="20200422 16:28:00.722" level="INFO">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Service OBJECT CREATION PASSED. &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</msg>
<msg timestamp="20200422 16:28:00.722" level="INFO">{
	"service": {
		"name": "src_port_2000",
		"protocol": "TCP",
		"source-port": "2000"
	}
}</msg>
<status status="PASS" endtime="20200422 16:28:00.722" starttime="20200422 16:27:59.569"></status>
</kw>
<kw name="Config Devices Qos" library="VD1">
<arguments>
<arg>${CPE1['Device_name']}</arg>
<arg>${CPE1['ORG_NAME']}</arg>
<arg>${CPE1['WAN1_INTF']}</arg>
</arguments>
<msg timestamp="20200422 16:28:00.723" level="INFO">

STEP :CONFIG QOS
</msg>
<msg timestamp="20200422 16:28:00.763" level="INFO">set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service rw-rules dscp rw-1 forwarding-class fc_nc loss-priority low code-point af41
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service rw-rules dscp rw-1 forwarding-class fc_ef loss-priority low code-point ef
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service rw-rules dscp rw-1 forwarding-class fc_be loss-priority high code-point be
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service rw-rules dscp rw-1 forwarding-class fc13 loss-priority high code-point af31
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service rw-rules dscp rw-1 forwarding-class fc14 loss-priority high code-point af21
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service rw-rules dscp rw-1 forwarding-class fc15 loss-priority high code-point af11

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc_nc traffic-class tc0
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc_nc queue 0
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc_ef traffic-class tc1
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc_ef queue 0
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc13 traffic-class tc3
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc13 queue 0
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc14 traffic-class tc3
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc14 queue 1
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc15 traffic-class tc3
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc15 queue 2
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc_be traffic-class tc3
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service forwarding-class-map fc_be queue 3

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service interfaces vni-0/1 scheduler-map IPC00190
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service interfaces tunnel dscp-rewrite-rule rw-1

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service scheduler-maps IPC00190 traffic-class tc0 scheduler sc_nc
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service scheduler-maps IPC00190 traffic-class tc1 scheduler sc_ef
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service scheduler-maps IPC00190 traffic-class tc3 scheduler sc_be
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service drop-profiles wred-high-drop maximum 128 minimum 64
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service drop-profiles wred-low-drop maximum 128 minimum 96
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service drop-profiles tail-drop maximum 65 minimum 64
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service schedulers sc_be drop-profile-map loss-priority low drop-profile wred-low-drop
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service schedulers sc_be drop-profile-map loss-priority high drop-profile wred-high-drop
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service schedulers sc_be queue 0 weight 6
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service schedulers sc_be queue 1 weight 4
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service schedulers sc_be queue 2 weight 4
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service schedulers sc_be queue 3 weight 3
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service schedulers sc_ef
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service schedulers sc_nc drop-profile-map loss-priority low drop-profile tail-drop

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium set action allow
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium set qos-profile Premium
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match source zone zone-list [ Intf-LAN1-Zone ]
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match destination zone zone-list [ ptvi ]
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match dscp [ 46 ]

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 set action allow
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 set qos-profile Business1
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 match source zone zone-list [ Intf-LAN1-Zone ]
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 match dscp [ 26 ]

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 set action allow
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 set qos-profile Business2
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 match source zone zone-list [ Intf-LAN1-Zone ]
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 match dscp [ 18 ]

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 set action allow
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 set qos-profile Business3
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 match source zone zone-list [ Intf-LAN1-Zone ]
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 match dscp [ 10 ]

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default set action allow
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default set qos-profile Internet-Default
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default match source zone zone-list [ Intf-LAN1-Zone ]


set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service app-qos-policies Default-Policy
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business1 forwarding-class fc13
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business1 loss-priority high
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business1 dscp-rw-enable yes
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business1 dot1p-rw-enable no
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business2 forwarding-class fc14
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business2 loss-priority high
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business2 dscp-rw-enable yes
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business2 dot1p-rw-enable no
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business3 forwarding-class fc15
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business3 loss-priority high
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business3 dscp-rw-enable yes
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Business3 dot1p-rw-enable no
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Internet-Default forwarding-class fc_be
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Internet-Default loss-priority high
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Internet-Default dscp-rw-enable no
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Internet-Default dot1p-rw-enable no
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Premium forwarding-class fc_ef
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Premium loss-priority low
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Premium dscp-rw-enable yes
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Premium dot1p-rw-enable no
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Routing-Management forwarding-class fc_nc
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Routing-Management loss-priority low
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Routing-Management dscp-rw-enable yes
set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-profiles Routing-Management dot1p-rw-enable no

#move rule to first
move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default  first
move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 first
move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 first
move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 first
move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium first
</msg>
<status status="PASS" endtime="20200422 16:29:10.391" starttime="20200422 16:28:00.722"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:10.392" starttime="20200422 16:25:03.501"></status>
</kw>
<test id="s1-t1" name="NV_SINGLE_CPE_MPLS_ONLY_SANITY_01">
<kw name="CHECK MPLS WAN INTERFACE UP in CPE1">
<kw name="Get Interface Status" library="CPE1">
<arguments>
<arg>intf_name=${CPE1['WAN1_INTF']}${unit_o} | match MPLS</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:10.996" level="INFO">${result} = show interfaces brief | tab |  match vni-0/1.0 | match MPLS
vni-0/1.0    00:0b:ab:f5:89:9c  up    up     2       MPLS-WAN-Transport-VR  172.16.7.102/30  
[ok][2020-04-22 11:00:39]
admin@CPE26-HKG-SIN...</msg>
<status status="PASS" endtime="20200422 16:29:10.997" starttime="20200422 16:29:10.394"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
<arg>up not presnt 2 times</arg>
</arguments>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
<arg>up not presnt 2 times</arg>
</arguments>
<msg timestamp="20200422 16:29:11.000" level="INFO">Item found from the first item 2 times</msg>
<status status="PASS" endtime="20200422 16:29:11.000" starttime="20200422 16:29:10.998"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:11.000" starttime="20200422 16:29:10.997"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:11.001" starttime="20200422 16:29:10.393"></status>
</kw>
<kw name="CHECK MPLS WAN INTERFACE UP in CPE2">
<kw name="Get Interface Status" library="CPE2">
<arguments>
<arg>intf_name=${CPE2['WAN1_INTF']}${unit_o} | match MPLS</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:12.208" level="INFO">${result} = show interfaces brief | tab | match vni-0/1.0 | match MPLS
vni-0/1.0    00:0b:ab:f1:9a:5a  up    up     2       MPLS-WAN-Transport-VR  172.16.7.42/30    
[ok][2020-04-22 10:54:31]
admin@CPE11-HKG-HYBR...</msg>
<status status="PASS" endtime="20200422 16:29:12.208" starttime="20200422 16:29:11.004"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200422 16:29:12.211" level="INFO">Item found from the first item 2 times</msg>
<status status="PASS" endtime="20200422 16:29:12.212" starttime="20200422 16:29:12.210"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:12.212" starttime="20200422 16:29:12.209"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:12.212" starttime="20200422 16:29:11.002"></status>
</kw>
<kw name="CHECK INTERNET WAN INTERFACE UP in CPE2">
<kw name="Get Interface Status" library="CPE2">
<arguments>
<arg>intf_name=${CPE2['WAN2_INTF']}${unit_o} | match INT</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:13.418" level="INFO">${result} = show interfaces brief | tab | match vni-0/2.0 | match INT
vni-0/2.0    00:0b:ab:f1:9a:5b  up    up     2       INT-WAN-Transport-VR   172.16.6.42/30    
[ok][2020-04-22 10:54:32]
admin@CPE11-HKG-HYBRD...</msg>
<status status="PASS" endtime="20200422 16:29:13.419" starttime="20200422 16:29:12.215"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200422 16:29:13.423" level="INFO">Item found from the first item 2 times</msg>
<status status="PASS" endtime="20200422 16:29:13.424" starttime="20200422 16:29:13.422"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:13.424" starttime="20200422 16:29:13.421"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:13.424" starttime="20200422 16:29:12.214"></status>
</kw>
<kw name="CHECK INTERNET WAN INTERFACE UP in CPE3">
<kw name="Get Interface Status" library="CPE3">
<arguments>
<arg>intf_name=${CPE3['WAN1_INTF']}${unit_o} | match INT</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:14.029" level="INFO">${result} = show interfaces brief | tab | match vni-0/2.0 | match INT
vni-0/2.0    00:0b:ab:f5:89:75  up    up     2       INT-WAN-Transport-VR  172.16.6.106/30  
[ok][2020-04-22 11:00:35]
admin@CPE27-SIN-SINGLE-...</msg>
<status status="PASS" endtime="20200422 16:29:14.029" starttime="20200422 16:29:13.427"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200422 16:29:14.032" level="INFO">Item found from the first item 2 times</msg>
<status status="PASS" endtime="20200422 16:29:14.033" starttime="20200422 16:29:14.031"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:14.033" starttime="20200422 16:29:14.030"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:14.033" starttime="20200422 16:29:13.426"></status>
</kw>
<kw name="CHECK WC1 PTVI INTERFACE STATUS in CPE1">
<kw name="Get Interface Status" library="CPE1">
<arguments>
<arg>intf_name=${CPE1['ptvi_intf_wc1']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:14.642" level="INFO">${result} = show interfaces brief | tab |  match ptvi180
ptvi180      n/a                up    up     2       IPC00190-Control-VR    10.90.64.1/32    
[ok][2020-04-22 11:00:43]
admin@CPE26-HKG-SINGLE-CPE-MPLSONL...</msg>
<status status="PASS" endtime="20200422 16:29:14.642" starttime="20200422 16:29:14.038"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200422 16:29:14.645" level="INFO">Item found from the first item 2 times</msg>
<status status="PASS" endtime="20200422 16:29:14.646" starttime="20200422 16:29:14.644"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:14.646" starttime="20200422 16:29:14.643"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:14.646" starttime="20200422 16:29:14.035"></status>
</kw>
<kw name="CHECK WC1 PTVI INTERFACE STATUS in CPE2">
<kw name="Get Interface Status" library="CPE2">
<arguments>
<arg>intf_name=${CPE2['ptvi_intf_wc1']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:15.654" level="INFO">${result} = show interfaces brief | tab | match ptvi180
ptvi180      n/a                up    up     2       IPC00190-Control-VR    10.90.64.1/32     
[ok][2020-04-22 10:54:34]
admin@CPE11-HKG-HYBRD-IPC00190-cli&gt;...</msg>
<status status="PASS" endtime="20200422 16:29:15.654" starttime="20200422 16:29:14.649"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200422 16:29:15.657" level="INFO">Item found from the first item 2 times</msg>
<status status="PASS" endtime="20200422 16:29:15.658" starttime="20200422 16:29:15.656"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:15.658" starttime="20200422 16:29:15.655"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:15.659" starttime="20200422 16:29:14.648"></status>
</kw>
<kw name="CHECK WC1 PTVI INTERFACE STATUS in CPE3">
<kw name="Get Interface Status" library="CPE3">
<arguments>
<arg>intf_name=${CPE3['ptvi_intf_wc1']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:16.264" level="INFO">${result} = show interfaces brief | tab | match ptvi180
ptvi180      n/a                up    up     2       IPC00190-Control-VR   10.90.64.15/32   
[ok][2020-04-22 11:00:37]
admin@CPE27-SIN-SINGLE-CPE-INTONLY-IP...</msg>
<status status="PASS" endtime="20200422 16:29:16.264" starttime="20200422 16:29:15.661"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200422 16:29:16.267" level="INFO">Item found from the first item 2 times</msg>
<status status="PASS" endtime="20200422 16:29:16.268" starttime="20200422 16:29:16.266"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:16.268" starttime="20200422 16:29:16.265"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:16.268" starttime="20200422 16:29:15.660"></status>
</kw>
<kw name="CHECK WC2 PTVI INTERFACE STATUS in CPE1">
<kw name="Get Interface Status" library="CPE1">
<arguments>
<arg>intf_name=${CPE1['ptvi_intf_wc2']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:16.874" level="INFO">${result} = show interfaces brief | tab |  match ptvi181
ptvi181      n/a                up    up     2       IPC00190-Control-VR    10.90.64.11/32   
[ok][2020-04-22 11:00:45]
admin@CPE26-HKG-SINGLE-CPE-MPLSONL...</msg>
<status status="PASS" endtime="20200422 16:29:16.874" starttime="20200422 16:29:16.272"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200422 16:29:16.876" level="INFO">Item found from the first item 2 times</msg>
<status status="PASS" endtime="20200422 16:29:16.876" starttime="20200422 16:29:16.875"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:16.877" starttime="20200422 16:29:16.875"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:16.877" starttime="20200422 16:29:16.270"></status>
</kw>
<kw name="CHECK WC2 PTVI INTERFACE STATUS in CPE2">
<kw name="Get Interface Status" library="CPE2">
<arguments>
<arg>intf_name=${CPE2['ptvi_intf_wc2']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:17.882" level="INFO">${result} = show interfaces brief | tab | match ptvi181
ptvi181      n/a                up    up     2       IPC00190-Control-VR    10.90.64.11/32    
[ok][2020-04-22 10:54:36]
admin@CPE11-HKG-HYBRD-IPC00190-cli&gt;...</msg>
<status status="PASS" endtime="20200422 16:29:17.882" starttime="20200422 16:29:16.878"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200422 16:29:17.885" level="INFO">Item found from the first item 2 times</msg>
<status status="PASS" endtime="20200422 16:29:17.886" starttime="20200422 16:29:17.884"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:17.887" starttime="20200422 16:29:17.883"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:17.887" starttime="20200422 16:29:16.877"></status>
</kw>
<kw name="CHECK WC2 PTVI INTERFACE STATUS in CPE3">
<kw name="Get Interface Status" library="CPE3">
<arguments>
<arg>intf_name=${CPE3['ptvi_intf_wc2']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:18.495" level="INFO">${result} = show interfaces brief | tab | match ptvi181
ptvi181      n/a                up    up     2       IPC00190-Control-VR   10.90.64.17/32   
[ok][2020-04-22 11:00:39]
admin@CPE27-SIN-SINGLE-CPE-INTONLY-IP...</msg>
<status status="PASS" endtime="20200422 16:29:18.496" starttime="20200422 16:29:17.892"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${up}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200422 16:29:18.498" level="INFO">Item found from the first item 2 times</msg>
<status status="PASS" endtime="20200422 16:29:18.499" starttime="20200422 16:29:18.497"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:18.499" starttime="20200422 16:29:18.496"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:18.499" starttime="20200422 16:29:17.891"></status>
</kw>
<kw name="CHECK WC1 BGP NEIGHBOR STATUS in CPE1 &amp; CPE2 and CPE3">
<kw name="Get Bgp Nbr Status" library="CPE1">
<arguments>
<arg>nbr_ip=${CPE1['WC1_ESP_IP']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:19.306" level="INFO">${result} = show bgp neighbor org IPC00190  brief IPC00190-Control-VR | match 10.90.64.1
10.90.64.1      1w2d19h    Established     146           5      37803        179
10.90.64.11     1w2d19h    Established   ...</msg>
<status status="PASS" endtime="20200422 16:29:19.307" starttime="20200422 16:29:18.502"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${est}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:19.310" level="INFO">show bgp neighbor org IPC00190  brief IPC00190-Control-VR | match 10.90.64.1
10.90.64.1      1w2d19h    Established     146           5      37803        179
10.90.64.11     1w2d19h    Established     145           5      43416        179
[ok][2020-04-22 11:00:47]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:29:19.310" starttime="20200422 16:29:19.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:19.312" level="INFO">Established</msg>
<status status="PASS" endtime="20200422 16:29:19.312" starttime="20200422 16:29:19.311"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:19.315" starttime="20200422 16:29:19.313"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:19.315" starttime="20200422 16:29:19.312"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:19.315" starttime="20200422 16:29:19.307"></status>
</kw>
<kw name="Get Bgp Nbr Status" library="CPE2">
<arguments>
<arg>nbr_ip=${CPE2['WC1_ESP_IP']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:20.521" level="INFO">${result} = show bgp neighbor org IPC00190 brief IPC00190-Control-VR | match 10.90.64.1
10.90.64.1      1w2d19h    Established     146           5      35094        179
10.90.64.11     1w2d19h    Established     ...</msg>
<status status="PASS" endtime="20200422 16:29:20.522" starttime="20200422 16:29:19.316"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${est}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:20.525" level="INFO">show bgp neighbor org IPC00190 brief IPC00190-Control-VR | match 10.90.64.1
10.90.64.1      1w2d19h    Established     146           5      35094        179
10.90.64.11     1w2d19h    Established     145           5      45929        179
[ok][2020-04-22 10:54:39]
admin@CPE11-HKG-HYBRD-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:29:20.525" starttime="20200422 16:29:20.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:20.526" level="INFO">Established</msg>
<status status="PASS" endtime="20200422 16:29:20.527" starttime="20200422 16:29:20.526"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:20.529" starttime="20200422 16:29:20.528"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:20.529" starttime="20200422 16:29:20.527"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:20.530" starttime="20200422 16:29:20.522"></status>
</kw>
<kw name="Get Bgp Nbr Status" library="CPE3">
<arguments>
<arg>nbr_ip=${CPE3['WC1_ESP_IP']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:21.332" level="INFO">${result} = show bgp neighbor org IPC00190  brief IPC00190-Control-VR | match 10.90.64.15
10.90.64.15     1w2d19h    Established     132           5      42770        179
[ok][2020-04-22 11:00:42]
admin@CPE27-SI...</msg>
<status status="PASS" endtime="20200422 16:29:21.333" starttime="20200422 16:29:20.530"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${est}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:21.338" level="INFO">show bgp neighbor org IPC00190  brief IPC00190-Control-VR | match 10.90.64.15
10.90.64.15     1w2d19h    Established     132           5      42770        179
[ok][2020-04-22 11:00:42]
admin@CPE27-SIN-SINGLE-CPE-INTONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:29:21.338" starttime="20200422 16:29:21.335"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:21.339" level="INFO">Established</msg>
<status status="PASS" endtime="20200422 16:29:21.340" starttime="20200422 16:29:21.339"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:21.343" starttime="20200422 16:29:21.341"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:21.343" starttime="20200422 16:29:21.340"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:21.344" starttime="20200422 16:29:21.333"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:21.344" starttime="20200422 16:29:18.501"></status>
</kw>
<kw name="CHECK WC2 BGP NEIGHBOR STATUS in CPE1 &amp; CPE2 and CPE3">
<kw name="Get Bgp Nbr Status" library="CPE1">
<arguments>
<arg>nbr_ip=${CPE1['WC2_ESP_IP']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:22.153" level="INFO">${result} = show bgp neighbor org IPC00190  brief IPC00190-Control-VR | match 10.90.64.11
10.90.64.11     1w2d19h    Established     145           5      43416        179
[ok][2020-04-22 11:00:50]
admin@CPE26-HK...</msg>
<status status="PASS" endtime="20200422 16:29:22.154" starttime="20200422 16:29:21.347"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${est}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:22.157" level="INFO">show bgp neighbor org IPC00190  brief IPC00190-Control-VR | match 10.90.64.11
10.90.64.11     1w2d19h    Established     145           5      43416        179
[ok][2020-04-22 11:00:50]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:29:22.157" starttime="20200422 16:29:22.156"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:22.158" level="INFO">Established</msg>
<status status="PASS" endtime="20200422 16:29:22.158" starttime="20200422 16:29:22.157"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:22.161" starttime="20200422 16:29:22.160"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:22.161" starttime="20200422 16:29:22.159"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:22.162" starttime="20200422 16:29:22.154"></status>
</kw>
<kw name="Get Bgp Nbr Status" library="CPE2">
<arguments>
<arg>nbr_ip=${CPE2['WC2_ESP_IP']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:23.366" level="INFO">${result} = show bgp neighbor org IPC00190 brief IPC00190-Control-VR | match 10.90.64.11
10.90.64.11     1w2d19h    Established     145           5      45929        179
[ok][2020-04-22 10:54:42]
admin@CPE11-HKG-...</msg>
<status status="PASS" endtime="20200422 16:29:23.366" starttime="20200422 16:29:22.162"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${est}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:23.371" level="INFO">show bgp neighbor org IPC00190 brief IPC00190-Control-VR | match 10.90.64.11
10.90.64.11     1w2d19h    Established     145           5      45929        179
[ok][2020-04-22 10:54:42]
admin@CPE11-HKG-HYBRD-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:29:23.371" starttime="20200422 16:29:23.369"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:23.373" level="INFO">Established</msg>
<status status="PASS" endtime="20200422 16:29:23.373" starttime="20200422 16:29:23.372"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:23.376" starttime="20200422 16:29:23.375"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:23.376" starttime="20200422 16:29:23.374"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:23.376" starttime="20200422 16:29:23.367"></status>
</kw>
<kw name="Get Bgp Nbr Status" library="CPE3">
<arguments>
<arg>nbr_ip=${CPE3['WC2_ESP_IP']}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:24.181" level="INFO">${result} = show bgp neighbor org IPC00190  brief IPC00190-Control-VR | match 10.90.64.17
10.90.64.17     1w2d19h    Established     181           5      39633        179
[ok][2020-04-22 11:00:45]
admin@CPE27-SI...</msg>
<status status="PASS" endtime="20200422 16:29:24.181" starttime="20200422 16:29:23.377"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${est}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:24.183" level="INFO">show bgp neighbor org IPC00190  brief IPC00190-Control-VR | match 10.90.64.17
10.90.64.17     1w2d19h    Established     181           5      39633        179
[ok][2020-04-22 11:00:45]
admin@CPE27-SIN-SINGLE-CPE-INTONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:29:24.184" starttime="20200422 16:29:24.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:24.187" level="INFO">Established</msg>
<status status="PASS" endtime="20200422 16:29:24.187" starttime="20200422 16:29:24.185"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:24.190" starttime="20200422 16:29:24.189"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:24.190" starttime="20200422 16:29:24.188"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:24.190" starttime="20200422 16:29:24.181"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:24.191" starttime="20200422 16:29:21.346"></status>
</kw>
<kw name="CHECK CPE2 LAN ROUTE Present in CPE1">
<kw name="Check Lan Route" library="CPE1">
<arguments>
<arg>lan=1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:26.223" level="INFO">${result} = routing_instance     Prot     Type     DestAddresswithMask     Nexthop     Interfacename
LAN1-VRF BGP N/A +1.2.3.4/32 40.90.1.1 Indirect
LAN1-VRF BGP N/A 1.2.3.4/32 40.90.1.2 Indirect
LAN1-VRF BGP N/A...</msg>
<status status="PASS" endtime="20200422 16:29:26.223" starttime="20200422 16:29:24.193"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>\\+${CPE2['lan'][1]['nw']}\\s+${CPE2['ESP_IP']}</arg>
</arguments>
<assign>
<var>${active_dest_route}</var>
</assign>
<msg timestamp="20200422 16:29:26.224" level="INFO">${active_dest_route} = \+192.169.101.0/24\s+20.20.90.11</msg>
<status status="PASS" endtime="20200422 16:29:26.224" starttime="20200422 16:29:26.223"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${active_dest_route}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:26.226" level="INFO">routing_instance     Prot     Type     DestAddresswithMask     Nexthop     Interfacename
LAN1-VRF BGP N/A +1.2.3.4/32 40.90.1.1 Indirect
LAN1-VRF BGP N/A 1.2.3.4/32 40.90.1.2 Indirect
LAN1-VRF BGP N/A +10.9.0.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 10.9.0.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +10.20.30.0/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 10.20.30.0/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +10.90.47.64/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 10.90.47.64/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +111.93.152.112/28 40.90.1.1 Indirect
LAN1-VRF BGP N/A 111.93.152.112/28 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.169.101.0/24 20.20.90.11 Indirect
LAN1-VRF BGP N/A 192.169.101.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.101.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.169.111.0/24 20.20.90.12 Indirect
LAN1-VRF BGP N/A 192.169.111.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.111.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.169.241.0/24 20.20.90.25 Indirect
LAN1-VRF BGP N/A 192.169.241.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.241.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A 192.170.1.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.170.1.0/24 40.90.1.2 Indirect
LAN1-VRF conn N/A +192.170.1.0/24 0.0.0.0 vni-0/4.750
LAN1-VRF local N/A +192.170.1.1/32 0.0.0.0 directly connected
LAN1-VRF BGP N/A +192.170.11.0/24 40.90.6.1 Indirect
LAN1-VRF BGP N/A 192.170.11.0/24 40.90.6.2 Indirect
LAN1-VRF BGP N/A +192.170.101.0/24 20.20.90.45 Indirect
LAN1-VRF BGP N/A 192.170.101.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.170.101.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +193.90.1.0/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 193.90.1.0/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +193.90.2.0/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 193.90.2.0/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +217.110.230.96/27 40.90.1.1 Indirect
LAN1-VRF BGP N/A 217.110.230.96/27 40.90.1.2 Indirect
</msg>
<status status="PASS" endtime="20200422 16:29:26.227" starttime="20200422 16:29:26.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:26.227" level="INFO">\+192.169.101.0/24\s+20.20.90.11</msg>
<status status="PASS" endtime="20200422 16:29:26.228" starttime="20200422 16:29:26.227"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:26.229" starttime="20200422 16:29:26.228"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:26.229" starttime="20200422 16:29:26.228"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:26.229" starttime="20200422 16:29:26.224"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:26.230" starttime="20200422 16:29:24.192"></status>
</kw>
<kw name="CHECK CPE3 LAN ROUTE Present in CPE1">
<kw name="Check Lan Route" library="CPE1">
<arguments>
<arg>lan=1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:28.241" level="INFO">${result} = routing_instance     Prot     Type     DestAddresswithMask     Nexthop     Interfacename
LAN1-VRF BGP N/A +1.2.3.4/32 40.90.1.1 Indirect
LAN1-VRF BGP N/A 1.2.3.4/32 40.90.1.2 Indirect
LAN1-VRF BGP N/A...</msg>
<status status="PASS" endtime="20200422 16:29:28.241" starttime="20200422 16:29:26.231"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>\\+${CPE3['lan'][1]['nw']}\\s+${CPE3['GW1_ESP_IP']}</arg>
</arguments>
<assign>
<var>${active_dest_route}</var>
</assign>
<msg timestamp="20200422 16:29:28.245" level="INFO">${active_dest_route} = \+192.170.11.0/24\s+40.90.6.1</msg>
<status status="PASS" endtime="20200422 16:29:28.245" starttime="20200422 16:29:28.242"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${active_dest_route}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:28.249" level="INFO">routing_instance     Prot     Type     DestAddresswithMask     Nexthop     Interfacename
LAN1-VRF BGP N/A +1.2.3.4/32 40.90.1.1 Indirect
LAN1-VRF BGP N/A 1.2.3.4/32 40.90.1.2 Indirect
LAN1-VRF BGP N/A +10.9.0.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 10.9.0.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +10.20.30.0/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 10.20.30.0/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +10.90.47.64/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 10.90.47.64/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +111.93.152.112/28 40.90.1.1 Indirect
LAN1-VRF BGP N/A 111.93.152.112/28 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.169.101.0/24 20.20.90.11 Indirect
LAN1-VRF BGP N/A 192.169.101.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.101.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.169.111.0/24 20.20.90.12 Indirect
LAN1-VRF BGP N/A 192.169.111.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.111.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.169.241.0/24 20.20.90.25 Indirect
LAN1-VRF BGP N/A 192.169.241.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.241.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A 192.170.1.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.170.1.0/24 40.90.1.2 Indirect
LAN1-VRF conn N/A +192.170.1.0/24 0.0.0.0 vni-0/4.750
LAN1-VRF local N/A +192.170.1.1/32 0.0.0.0 directly connected
LAN1-VRF BGP N/A +192.170.11.0/24 40.90.6.1 Indirect
LAN1-VRF BGP N/A 192.170.11.0/24 40.90.6.2 Indirect
LAN1-VRF BGP N/A +192.170.101.0/24 20.20.90.45 Indirect
LAN1-VRF BGP N/A 192.170.101.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.170.101.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +193.90.1.0/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 193.90.1.0/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +193.90.2.0/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 193.90.2.0/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +217.110.230.96/27 40.90.1.1 Indirect
LAN1-VRF BGP N/A 217.110.230.96/27 40.90.1.2 Indirect
</msg>
<status status="PASS" endtime="20200422 16:29:28.250" starttime="20200422 16:29:28.248"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:28.253" level="INFO">\+192.170.11.0/24\s+40.90.6.1</msg>
<status status="PASS" endtime="20200422 16:29:28.253" starttime="20200422 16:29:28.251"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:28.259" starttime="20200422 16:29:28.256"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:28.259" starttime="20200422 16:29:28.254"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:28.260" starttime="20200422 16:29:28.246"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:28.260" starttime="20200422 16:29:26.230"></status>
</kw>
<kw name="CHECK CPE1 LAN ROUTE Present in CPE2">
<kw name="Check Lan Route" library="CPE2">
<arguments>
<arg>lan=1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:31.274" level="INFO">${result} = routing_instance     Prot     Type     DestAddresswithMask     Nexthop     Interfacename
LAN1-VRF BGP N/A +0.0.0.0/0 169.254.0.2 tvi-0/603.0
LAN1-VRF BGP N/A +1.2.3.4/32 40.90.1.1 Indirect
LAN1-VRF BG...</msg>
<status status="PASS" endtime="20200422 16:29:31.274" starttime="20200422 16:29:28.262"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>\\+${CPE1['lan'][1]['nw']}\\s+${CPE1['ESP_IP']}</arg>
</arguments>
<assign>
<var>${active_dest_route}</var>
</assign>
<msg timestamp="20200422 16:29:31.277" level="INFO">${active_dest_route} = \+192.170.1.0/24\s+20.20.90.26</msg>
<status status="PASS" endtime="20200422 16:29:31.277" starttime="20200422 16:29:31.274"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${active_dest_route}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:31.280" level="INFO">routing_instance     Prot     Type     DestAddresswithMask     Nexthop     Interfacename
LAN1-VRF BGP N/A +0.0.0.0/0 169.254.0.2 tvi-0/603.0
LAN1-VRF BGP N/A +1.2.3.4/32 40.90.1.1 Indirect
LAN1-VRF BGP N/A 1.2.3.4/32 40.90.1.2 Indirect
LAN1-VRF BGP N/A +10.9.0.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 10.9.0.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +10.20.30.0/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 10.20.30.0/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +10.90.47.64/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 10.90.47.64/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +111.93.152.112/28 40.90.1.1 Indirect
LAN1-VRF BGP N/A 111.93.152.112/28 40.90.1.2 Indirect
LAN1-VRF conn N/A +169.254.0.2/31 0.0.0.0 tvi-0/603.0
LAN1-VRF local N/A +169.254.0.3/32 0.0.0.0 directly connected
LAN1-VRF BGP N/A 192.169.101.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.101.0/24 40.90.1.2 Indirect
LAN1-VRF conn N/A +192.169.101.0/24 0.0.0.0 vni-0/4.600
LAN1-VRF local N/A +192.169.101.1/32 0.0.0.0 directly connected
LAN1-VRF BGP N/A +192.169.111.0/24 20.20.90.12 Indirect
LAN1-VRF BGP N/A 192.169.111.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.111.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.169.241.0/24 20.20.90.25 Indirect
LAN1-VRF BGP N/A 192.169.241.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.241.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.170.1.0/24 20.20.90.26 Indirect
LAN1-VRF BGP N/A 192.170.1.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.170.1.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.170.11.0/24 20.20.90.27 Indirect
LAN1-VRF BGP N/A 192.170.11.0/24 40.90.6.1 Indirect
LAN1-VRF BGP N/A 192.170.11.0/24 40.90.6.2 Indirect
LAN1-VRF BGP N/A +192.170.101.0/24 20.20.90.45 Indirect
LAN1-VRF BGP N/A 192.170.101.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.170.101.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +193.90.1.0/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 193.90.1.0/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +193.90.2.0/30 40.90.1.1 Indirect
LAN1-VRF BGP N/A 193.90.2.0/30 40.90.1.2 Indirect
LAN1-VRF BGP N/A +217.110.230.96/27 40.90.1.1 Indirect
LAN1-VRF BGP N/A 217.110.230.96/27 40.90.1.2 Indirect
</msg>
<status status="PASS" endtime="20200422 16:29:31.280" starttime="20200422 16:29:31.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:31.281" level="INFO">\+192.170.1.0/24\s+20.20.90.26</msg>
<status status="PASS" endtime="20200422 16:29:31.282" starttime="20200422 16:29:31.281"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:31.286" starttime="20200422 16:29:31.283"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:31.286" starttime="20200422 16:29:31.282"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:31.287" starttime="20200422 16:29:31.277"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:31.287" starttime="20200422 16:29:28.261"></status>
</kw>
<kw name="CHECK CPE1 LAN ROUTE Present in CPE3">
<kw name="Check Lan Route" library="CPE3">
<arguments>
<arg>lan=1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:33.093" level="INFO">${result} = routing_instance     Prot     Type     DestAddresswithMask     Nexthop     Interfacename
LAN1-VRF BGP N/A +0.0.0.0/0 169.254.0.2 tvi-0/603.0
LAN1-VRF BGP N/A +10.90.47.64/30 40.90.6.1 Indirect
LAN1-VR...</msg>
<status status="PASS" endtime="20200422 16:29:33.093" starttime="20200422 16:29:31.290"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>\\+${CPE1['lan'][1]['nw']}\\s+${CPE1['GW1_ESP_IP']}</arg>
</arguments>
<assign>
<var>${active_dest_route}</var>
</assign>
<msg timestamp="20200422 16:29:33.094" level="INFO">${active_dest_route} = \+192.170.1.0/24\s+40.90.1.1</msg>
<status status="PASS" endtime="20200422 16:29:33.094" starttime="20200422 16:29:33.093"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=${active_dest_route}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:33.095" level="INFO">routing_instance     Prot     Type     DestAddresswithMask     Nexthop     Interfacename
LAN1-VRF BGP N/A +0.0.0.0/0 169.254.0.2 tvi-0/603.0
LAN1-VRF BGP N/A +10.90.47.64/30 40.90.6.1 Indirect
LAN1-VRF BGP N/A 10.90.47.64/30 40.90.6.2 Indirect
LAN1-VRF conn N/A +169.254.0.2/31 0.0.0.0 tvi-0/603.0
LAN1-VRF local N/A +169.254.0.3/32 0.0.0.0 directly connected
LAN1-VRF BGP N/A +192.169.101.0/24 20.20.90.11 Indirect
LAN1-VRF BGP N/A 192.169.101.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.101.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.169.111.0/24 20.20.90.12 Indirect
LAN1-VRF BGP N/A 192.169.111.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.111.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.169.241.0/24 20.20.90.25 Indirect
LAN1-VRF BGP N/A 192.169.241.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.169.241.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +192.170.1.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.170.1.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A 192.170.11.0/24 40.90.6.1 Indirect
LAN1-VRF BGP N/A 192.170.11.0/24 40.90.6.2 Indirect
LAN1-VRF conn N/A +192.170.11.0/24 0.0.0.0 vni-0/4.760
LAN1-VRF local N/A +192.170.11.1/32 0.0.0.0 directly connected
LAN1-VRF BGP N/A +192.170.101.0/24 20.20.90.45 Indirect
LAN1-VRF BGP N/A 192.170.101.0/24 40.90.1.1 Indirect
LAN1-VRF BGP N/A 192.170.101.0/24 40.90.1.2 Indirect
LAN1-VRF BGP N/A +193.90.9.0/30 40.90.6.1 Indirect
LAN1-VRF BGP N/A +193.90.10.0/30 40.90.6.2 Indirect
</msg>
<status status="PASS" endtime="20200422 16:29:33.095" starttime="20200422 16:29:33.094"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:33.095" level="INFO">\+192.170.1.0/24\s+40.90.1.1</msg>
<status status="PASS" endtime="20200422 16:29:33.095" starttime="20200422 16:29:33.095"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:33.096" starttime="20200422 16:29:33.096"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:33.096" starttime="20200422 16:29:33.096"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:33.097" starttime="20200422 16:29:33.094"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:33.097" starttime="20200422 16:29:31.289"></status>
</kw>
<doc>SANITY CHECKS on vCPE</doc>
<tags>
<tag>SANITY1</tag>
</tags>
<status status="PASS" endtime="20200422 16:29:33.097" critical="yes" starttime="20200422 16:29:10.392"></status>
</test>
<test id="s1-t2" name="NV_SINGLE_CPE_MPLS_ONLY_SANITY_02">
<kw name="Ping Test VM1 to VM2(1 LAN)">
<tags>
<tag>HYBRID</tag>
</tags>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][1]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20200422 16:29:33.103" level="INFO">${destip} = 192.169.101.2</msg>
<status status="PASS" endtime="20200422 16:29:33.103" starttime="20200422 16:29:33.102"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:37.718" level="INFO">sudo ping 192.169.101.2 -c 5
sudo ping 192.169.101.2 -c 5
PING 192.169.101.2 (192.169.101.2) 56(84) bytes of data.
64 bytes from 192.169.101.2: icmp_seq=1 ttl=62 time=3.29 ms
64 bytes from 192.169.101.2: icmp_seq=2 ttl=62 time=1.62 ms
64 bytes from 192.169.101.2: icmp_seq=3 ttl=62 time=1.67 ms
64 bytes from 192.169.101.2: icmp_seq=4 ttl=62 time=1.67 ms
64 bytes from 192.169.101.2: icmp_seq=5 ttl=62 time=1.64 ms

--- 192.169.101.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4007ms
rtt min/avg/max/mdev = 1.628/1.981/3.293/0.656 ms
colt123@ubuntu:~$</msg>
<msg timestamp="20200422 16:29:37.719" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20200422 16:29:37.719" starttime="20200422 16:29:33.103"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:37.722" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:29:37.722" starttime="20200422 16:29:37.721"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:37.724" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:29:37.724" starttime="20200422 16:29:37.723"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:37.727" starttime="20200422 16:29:37.726"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:37.728" starttime="20200422 16:29:37.725"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:37.728" starttime="20200422 16:29:37.719"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:37.728" starttime="20200422 16:29:33.102"></status>
</kw>
<kw name="Ping Test VM2 to VM1(1 LAN)">
<tags>
<tag>HYBRID</tag>
</tags>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][1]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20200422 16:29:37.733" level="INFO">${destip} = 192.170.1.2</msg>
<status status="PASS" endtime="20200422 16:29:37.733" starttime="20200422 16:29:37.731"></status>
</kw>
<kw name="Shell Ping" library="VM2">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:42.346" level="INFO">sudo ping 192.170.1.2 -c 5
sudo ping 192.170.1.2 -c 5
PING 192.170.1.2 (192.170.1.2) 56(84) bytes of data.
64 bytes from 192.170.1.2: icmp_seq=1 ttl=62 time=2.07 ms
64 bytes from 192.170.1.2: icmp_seq=2 ttl=62 time=1.65 ms
64 bytes from 192.170.1.2: icmp_seq=3 ttl=62 time=1.79 ms
64 bytes from 192.170.1.2: icmp_seq=4 ttl=62 time=1.87 ms
64 bytes from 192.170.1.2: icmp_seq=5 ttl=62 time=1.72 ms

--- 192.170.1.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4007ms
rtt min/avg/max/mdev = 1.653/1.826/2.077/0.148 ms
sathish@VM1:~$</msg>
<msg timestamp="20200422 16:29:42.347" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20200422 16:29:42.347" starttime="20200422 16:29:37.733"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:42.350" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:29:42.351" starttime="20200422 16:29:42.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:42.353" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:29:42.353" starttime="20200422 16:29:42.352"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:42.356" starttime="20200422 16:29:42.355"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:42.356" starttime="20200422 16:29:42.354"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:42.356" starttime="20200422 16:29:42.347"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:42.357" starttime="20200422 16:29:37.730"></status>
</kw>
<kw name="Ping Test VM1 to VM3(1 LAN)">
<tags>
<tag>HYBRID</tag>
</tags>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM3['lan'][1]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20200422 16:29:42.361" level="INFO">${destip} = 192.170.11.2</msg>
<status status="PASS" endtime="20200422 16:29:42.361" starttime="20200422 16:29:42.359"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:46.973" level="INFO">sudo ping 192.170.11.2 -c 5
sudo ping 192.170.11.2 -c 5
PING 192.170.11.2 (192.170.11.2) 56(84) bytes of data.
64 bytes from 192.170.11.2: icmp_seq=1 ttl=61 time=2.56 ms
64 bytes from 192.170.11.2: icmp_seq=2 ttl=61 time=1.51 ms
64 bytes from 192.170.11.2: icmp_seq=3 ttl=61 time=1.56 ms
64 bytes from 192.170.11.2: icmp_seq=4 ttl=61 time=1.67 ms
64 bytes from 192.170.11.2: icmp_seq=5 ttl=61 time=1.59 ms

--- 192.170.11.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4006ms
rtt min/avg/max/mdev = 1.518/1.784/2.563/0.395 ms
colt123@ubuntu:~$</msg>
<msg timestamp="20200422 16:29:46.974" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20200422 16:29:46.974" starttime="20200422 16:29:42.361"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:46.977" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:29:46.977" starttime="20200422 16:29:46.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:46.978" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:29:46.979" starttime="20200422 16:29:46.978"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:46.981" starttime="20200422 16:29:46.980"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:46.981" starttime="20200422 16:29:46.979"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:46.982" starttime="20200422 16:29:46.974"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:46.983" starttime="20200422 16:29:42.358"></status>
</kw>
<kw name="Ping Test VM3 to VM1(1 LAN)">
<tags>
<tag>HYBRID</tag>
</tags>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][1]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20200422 16:29:46.988" level="INFO">${destip} = 192.170.1.2</msg>
<status status="PASS" endtime="20200422 16:29:46.988" starttime="20200422 16:29:46.986"></status>
</kw>
<kw name="Shell Ping" library="VM3">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:51.602" level="INFO">sudo ping 192.170.1.2 -c 5
sudo ping 192.170.1.2 -c 5
PING 192.170.1.2 (192.170.1.2) 56(84) bytes of data.
64 bytes from 192.170.1.2: icmp_seq=1 ttl=61 time=4.93 ms
64 bytes from 192.170.1.2: icmp_seq=2 ttl=61 time=2.36 ms
64 bytes from 192.170.1.2: icmp_seq=3 ttl=61 time=2.04 ms
64 bytes from 192.170.1.2: icmp_seq=4 ttl=61 time=1.90 ms
64 bytes from 192.170.1.2: icmp_seq=5 ttl=61 time=2.55 ms

--- 192.170.1.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4005ms
rtt min/avg/max/mdev = 1.904/2.759/4.935/1.113 ms
colt123@ubuntu:~$</msg>
<msg timestamp="20200422 16:29:51.603" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20200422 16:29:51.603" starttime="20200422 16:29:46.989"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:51.606" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:29:51.606" starttime="20200422 16:29:51.605"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:51.607" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:29:51.608" starttime="20200422 16:29:51.607"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:51.610" starttime="20200422 16:29:51.609"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:51.610" starttime="20200422 16:29:51.608"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:51.611" starttime="20200422 16:29:51.603"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:51.611" starttime="20200422 16:29:46.984"></status>
</kw>
<doc>Ping test CPE1 LAN1 VM to CPE2 LAN1 VM</doc>
<tags>
<tag>PING</tag>
<tag>SANITY1</tag>
</tags>
<status status="PASS" endtime="20200422 16:29:51.613" critical="yes" starttime="20200422 16:29:33.100"></status>
</test>
<test id="s1-t3" name="NV_SINGLE_CPE_MPLS_ONLY_SANITY_03">
<kw name="Ping Test VM1 to VM2(ALL LANS)">
<tags>
<tag>HYBRID</tag>
</tags>
<kw type="for" name="${vlan} IN RANGE [ 1 | ${VM1['NO_OF_VRFS']} + 1 ]">
<kw type="foritem" name="${vlan} = 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20200422 16:29:51.625" level="INFO">${destip} = 192.169.101.2</msg>
<status status="PASS" endtime="20200422 16:29:51.625" starttime="20200422 16:29:51.624"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:29:56.240" level="INFO">sudo ping 192.169.101.2 -c 5
sudo ping 192.169.101.2 -c 5
PING 192.169.101.2 (192.169.101.2) 56(84) bytes of data.
64 bytes from 192.169.101.2: icmp_seq=1 ttl=62 time=2.27 ms
64 bytes from 192.169.101.2: icmp_seq=2 ttl=62 time=1.81 ms
64 bytes from 192.169.101.2: icmp_seq=3 ttl=62 time=1.71 ms
64 bytes from 192.169.101.2: icmp_seq=4 ttl=62 time=1.71 ms
64 bytes from 192.169.101.2: icmp_seq=5 ttl=62 time=1.79 ms

--- 192.169.101.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4006ms
rtt min/avg/max/mdev = 1.712/1.862/2.275/0.214 ms
colt123@ubuntu:~$</msg>
<msg timestamp="20200422 16:29:56.241" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20200422 16:29:56.242" starttime="20200422 16:29:51.626"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:29:56.247" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:29:56.247" starttime="20200422 16:29:56.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:29:56.250" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:29:56.251" starttime="20200422 16:29:56.249"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:29:56.254" starttime="20200422 16:29:56.253"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:56.255" starttime="20200422 16:29:56.251"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:56.255" starttime="20200422 16:29:56.242"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:56.255" starttime="20200422 16:29:51.623"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:56.255" starttime="20200422 16:29:51.622"></status>
</kw>
<status status="PASS" endtime="20200422 16:29:56.256" starttime="20200422 16:29:51.621"></status>
</kw>
<kw name="Ping Test VM2 to VM1(ALL LANS)">
<tags>
<tag>HYBRID</tag>
</tags>
<kw type="for" name="${vlan} IN RANGE [ 1 | ${VM2['NO_OF_VRFS']} + 1 ]">
<kw type="foritem" name="${vlan} = 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM1['lan'][${vlan}]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20200422 16:29:56.260" level="INFO">${destip} = 192.170.1.2</msg>
<status status="PASS" endtime="20200422 16:29:56.260" starttime="20200422 16:29:56.259"></status>
</kw>
<kw name="Shell Ping" library="VM1">
<arguments>
<arg>${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:30:00.873" level="INFO">sudo ping 192.170.1.2 -c 5
sudo ping 192.170.1.2 -c 5
PING 192.170.1.2 (192.170.1.2) 56(84) bytes of data.
64 bytes from 192.170.1.2: icmp_seq=1 ttl=64 time=0.091 ms
64 bytes from 192.170.1.2: icmp_seq=2 ttl=64 time=0.047 ms
64 bytes from 192.170.1.2: icmp_seq=3 ttl=64 time=0.037 ms
64 bytes from 192.170.1.2: icmp_seq=4 ttl=64 time=0.064 ms
64 bytes from 192.170.1.2: icmp_seq=5 ttl=64 time=0.048 ms

--- 192.170.1.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 3997ms
rtt min/avg/max/mdev = 0.037/0.057/0.091/0.020 ms
colt123@ubuntu:~$</msg>
<msg timestamp="20200422 16:30:00.874" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20200422 16:30:00.874" starttime="20200422 16:29:56.260"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:30:00.877" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:30:00.877" starttime="20200422 16:30:00.876"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:30:00.879" level="INFO">True</msg>
<status status="PASS" endtime="20200422 16:30:00.879" starttime="20200422 16:30:00.878"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:00.883" starttime="20200422 16:30:00.880"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:00.883" starttime="20200422 16:30:00.879"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:00.884" starttime="20200422 16:30:00.874"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:00.884" starttime="20200422 16:29:56.259"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:00.884" starttime="20200422 16:29:56.258"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:00.884" starttime="20200422 16:29:56.257"></status>
</kw>
<doc>Ping test CPE1 ALL LAN VM to CPE2 ALL LAN VM</doc>
<tags>
<tag>PING</tag>
<tag>SANITY1</tag>
</tags>
<status status="PASS" endtime="20200422 16:30:00.886" critical="yes" starttime="20200422 16:29:51.619"></status>
</test>
<test id="s1-t4" name="NV_SINGLE_CPE_MPLS_ONLY_SANITY_04">
<kw name="Iperf3 test VM1 to VM2">
<tags>
<tag>HYBRID</tag>
</tags>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM2['lan'][1]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20200422 16:30:00.898" level="INFO">${destip} = 192.169.101.2</msg>
<status status="PASS" endtime="20200422 16:30:00.899" starttime="20200422 16:30:00.896"></status>
</kw>
<kw name="Send Commands And Expect" library="VM2">
<arguments>
<arg>pkill iperf3 &amp;</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:01.303" starttime="20200422 16:30:00.900"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20200422 16:30:11.304" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20200422 16:30:11.304" starttime="20200422 16:30:01.303"></status>
</kw>
<kw name="Send Commands And Expect" library="VM2">
<arguments>
<arg>iperf3 -s &amp;</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:11.707" starttime="20200422 16:30:11.304"></status>
</kw>
<kw name="Send Commands And Expect" library="VM1">
<arguments>
<arg>iperf3 -c ${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:30:22.138" level="INFO">${result} = iperf3 -c 192.169.101.2
Connecting to host 192.169.101.2, port 5201
[  4] local 192.170.1.2 port 51290 connected to 192.169.101.2 port 5201
[ ID] Interval           Transfer     Bandwidth       Retr  ...</msg>
<status status="PASS" endtime="20200422 16:30:22.138" starttime="20200422 16:30:11.709"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>iperf Done.</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:22.139" starttime="20200422 16:30:22.139"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:22.140" starttime="20200422 16:30:00.895"></status>
</kw>
<kw name="Iperf3 test VM1 to VM3">
<tags>
<tag>HYBRID</tag>
</tags>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VM3['lan'][1]['second_host']}</arg>
</arguments>
<assign>
<var>${destip}</var>
</assign>
<msg timestamp="20200422 16:30:22.144" level="INFO">${destip} = 192.170.11.2</msg>
<status status="PASS" endtime="20200422 16:30:22.144" starttime="20200422 16:30:22.142"></status>
</kw>
<kw name="Send Commands And Expect" library="VM3">
<arguments>
<arg>pkill iperf3 &amp;</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:22.545" starttime="20200422 16:30:22.144"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20200422 16:30:32.549" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20200422 16:30:32.549" starttime="20200422 16:30:22.546"></status>
</kw>
<kw name="Send Commands And Expect" library="VM3">
<arguments>
<arg>iperf3 -s &amp;</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:32.952" starttime="20200422 16:30:32.550"></status>
</kw>
<kw name="Send Commands And Expect" library="VM1">
<arguments>
<arg>iperf3 -c ${destip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:30:43.598" level="INFO">${result} = iperf3 -c 192.170.11.2
Connecting to host 192.170.11.2, port 5201
[  4] local 192.170.1.2 port 38902 connected to 192.170.11.2 port 5201
[ ID] Interval           Transfer     Bandwidth       Retr  Cwn...</msg>
<status status="PASS" endtime="20200422 16:30:43.598" starttime="20200422 16:30:32.953"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>iperf Done.</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:43.599" starttime="20200422 16:30:43.598"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:43.599" starttime="20200422 16:30:22.141"></status>
</kw>
<doc>Iperf test VM1 to VM2</doc>
<tags>
<tag>IPERF</tag>
<tag>SANITY1</tag>
</tags>
<status status="PASS" endtime="20200422 16:30:43.599" critical="yes" starttime="20200422 16:30:00.893"></status>
</test>
<test id="s1-t5" name="NV_SINGLE_CPE_MPLS_ONLY_QOS_01">
<kw name="REQ CLR SESSION ALL">
<kw name="Req Clr Sess All" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:30:44.005" level="INFO">${result} = request clear sessions all
[ok][2020-04-22 11:02:12]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:30:44.005" starttime="20200422 16:30:43.602"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:44.009" starttime="20200422 16:30:44.006"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:44.009" starttime="20200422 16:30:43.601"></status>
</kw>
<kw name="SHOW SESSION SDWAN DETAIL">
<kw name="Show Session Sdwan Detail" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:30:44.822" level="INFO">show orgs org IPC00190 sessions sdwan detail | nomore</msg>
<msg timestamp="20200422 16:30:44.822" level="INFO">${result} = show orgs org IPC00190 sessions sdwan detail | nomore
% No entries found.
[ok][2020-04-22 11:02:13]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:30:44.822" starttime="20200422 16:30:44.018"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:44.823" starttime="20200422 16:30:44.822"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:44.823" starttime="20200422 16:30:44.013"></status>
</kw>
<kw name="SHOW INTERFACE PORT STATISTICS BRIEF">
<kw name="Show Intf Port Stats Br" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:30:45.427" level="INFO">show interfaces port statistics brief | tab | nomore</msg>
<msg timestamp="20200422 16:30:45.427" level="INFO">${result} = show interfaces port statistics brief | tab | nomore
                     IF                                                                                                                      
     ...</msg>
<status status="PASS" endtime="20200422 16:30:45.427" starttime="20200422 16:30:44.824"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:45.429" starttime="20200422 16:30:45.428"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:45.430" starttime="20200422 16:30:44.823"></status>
</kw>
<kw name="SHOW COMMIT CHANGES 0">
<kw name="Show Commit Changes 0" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:30:47.638" level="INFO">show commit changes 0 | nomore</msg>
<msg timestamp="20200422 16:30:47.639" level="INFO">${result} = show commit changes 0 | nomore 
#
# Created by: admin
# Date: 2020-04-22 10:59:29
# Client: netconf
#
 orgs {
     org-services IPC00190 {
         objects {
             services {
+                ...</msg>
<status status="PASS" endtime="20200422 16:30:47.639" starttime="20200422 16:30:45.431"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:30:47.642" starttime="20200422 16:30:47.640"></status>
</kw>
<status status="PASS" endtime="20200422 16:30:47.642" starttime="20200422 16:30:45.431"></status>
</kw>
<kw name="Req Clr Stats Cos Qos Plcy All" library="CPE1">
<status status="PASS" endtime="20200422 16:30:48.248" starttime="20200422 16:30:47.644"></status>
</kw>
<kw name="Show Config Cos Qos Policy Rules" library="CPE1">
<msg timestamp="20200422 16:30:49.253" level="INFO">show configuration orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | display set  | nomore
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match destination zone zone-list [ ptvi ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match dscp [ 46 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium set qos-profile Premium
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 match dscp [ 26 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 set qos-profile Business1
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 match dscp [ 18 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 set qos-profile Business2
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 match dscp [ 10 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 set qos-profile Business3
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default set qos-profile Internet-Default
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN match source zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN match services predefined-services-list [ ESP ICMP ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN match services services-list [ IPSEC IPSecAH ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT match destination zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT match services predefined-services-list [ ESP ICMP ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT match services services-list [ IPSEC IPSIPSecAH ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_IN match source zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_IN match ether-type ARP
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_IN set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_OUT match destination zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_OUT match ether-type ARP
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_OUT set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_IN match source zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_IN set action deny
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_OUT match destination zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_OUT set action deny
[ok][2020-04-22 11:02:17]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt;</msg>
<status status="PASS" endtime="20200422 16:30:49.253" starttime="20200422 16:30:48.249"></status>
</kw>
<kw name="Show Cos Qos Policy Rules" library="CPE1">
<msg timestamp="20200422 16:30:50.058" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore</msg>
<status status="PASS" endtime="20200422 16:30:50.058" starttime="20200422 16:30:49.254"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20200422 16:31:00.061" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20200422 16:31:00.062" starttime="20200422 16:30:50.059"></status>
</kw>
<kw name="Start Stream Traffic" library="spirent1">
<arguments>
<arg>${premium_tcp_stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:31:02.861" level="INFO">streamblock4
***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:31:02.861" starttime="20200422 16:31:00.063"></status>
</kw>
<kw name="Start Stream Traffic" library="spirent1">
<arguments>
<arg>${business1_tcp_stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:31:03.526" level="INFO">streamblock5
***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:31:03.526" starttime="20200422 16:31:02.862"></status>
</kw>
<kw name="Start Stream Traffic" library="spirent1">
<arguments>
<arg>${business2_tcp_stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:31:04.245" level="INFO">streamblock6
***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:31:04.245" starttime="20200422 16:31:03.527"></status>
</kw>
<kw name="Start Stream Traffic" library="spirent1">
<arguments>
<arg>${business3_tcp_stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:31:04.888" level="INFO">streamblock7
***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:31:04.888" starttime="20200422 16:31:04.246"></status>
</kw>
<kw name="Start Stream Traffic" library="spirent1">
<arguments>
<arg>${internet_default_tcp_stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:31:05.595" level="INFO">streamblock8
***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:31:05.595" starttime="20200422 16:31:04.889"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20200422 16:31:15.596" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20200422 16:31:15.596" starttime="20200422 16:31:05.596"></status>
</kw>
<kw name="SHOW INTERFACE PORT STATISTICS BRIEF">
<kw name="Show Intf Port Stats Br" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:31:16.200" level="INFO">show interfaces port statistics brief | tab | nomore</msg>
<msg timestamp="20200422 16:31:16.200" level="INFO">${result} = show interfaces port statistics brief | tab | nomore
                     IF                                                                                                               
            ...</msg>
<status status="PASS" endtime="20200422 16:31:16.200" starttime="20200422 16:31:15.599"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:31:16.202" starttime="20200422 16:31:16.200"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:16.202" starttime="20200422 16:31:15.598"></status>
</kw>
<kw name="Show Cos Qos Policy Rules" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:31:17.009" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore</msg>
<msg timestamp="20200422 16:31:17.010" level="INFO">${result} = show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS    ...</msg>
<status status="PASS" endtime="20200422 16:31:17.010" starttime="20200422 16:31:16.203"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:31:17.014" starttime="20200422 16:31:17.011"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Premium\\s+1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:31:17.019" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      6946     1083576  0        0        0        0        0        
LAN1-VRF-Business1         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Business2         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Business3         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Internet-Default  23     0       0      6969     1085164  0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     14     0       0      0        0        14       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:02:45]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:31:17.020" starttime="20200422 16:31:17.019"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:31:17.021" level="INFO">LAN1-VRF-Premium\s+1</msg>
<status status="PASS" endtime="20200422 16:31:17.021" starttime="20200422 16:31:17.020"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:31:17.024" starttime="20200422 16:31:17.023"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:17.025" starttime="20200422 16:31:17.022"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:17.026" starttime="20200422 16:31:17.017"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Business1\\s+1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:31:17.030" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      6946     1083576  0        0        0        0        0        
LAN1-VRF-Business1         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Business2         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Business3         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Internet-Default  23     0       0      6969     1085164  0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     14     0       0      0        0        14       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:02:45]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:31:17.030" starttime="20200422 16:31:17.029"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:31:17.031" level="INFO">LAN1-VRF-Business1\s+1</msg>
<status status="PASS" endtime="20200422 16:31:17.032" starttime="20200422 16:31:17.031"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:31:17.035" starttime="20200422 16:31:17.033"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:17.035" starttime="20200422 16:31:17.032"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:17.035" starttime="20200422 16:31:17.027"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Business2\\s+1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:31:17.040" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      6946     1083576  0        0        0        0        0        
LAN1-VRF-Business1         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Business2         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Business3         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Internet-Default  23     0       0      6969     1085164  0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     14     0       0      0        0        14       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:02:45]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:31:17.041" starttime="20200422 16:31:17.039"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:31:17.043" level="INFO">LAN1-VRF-Business2\s+1</msg>
<status status="PASS" endtime="20200422 16:31:17.044" starttime="20200422 16:31:17.042"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:31:17.047" starttime="20200422 16:31:17.045"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:17.047" starttime="20200422 16:31:17.044"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:17.048" starttime="20200422 16:31:17.037"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Business3\\s+1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:31:17.054" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      6946     1083576  0        0        0        0        0        
LAN1-VRF-Business1         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Business2         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Business3         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Internet-Default  23     0       0      6969     1085164  0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     14     0       0      0        0        14       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:02:45]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:31:17.054" starttime="20200422 16:31:17.052"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:31:17.057" level="INFO">LAN1-VRF-Business3\s+1</msg>
<status status="PASS" endtime="20200422 16:31:17.057" starttime="20200422 16:31:17.055"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:31:17.063" starttime="20200422 16:31:17.061"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:17.064" starttime="20200422 16:31:17.058"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:17.065" starttime="20200422 16:31:17.049"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Internet-Default\\s+(\\d{1})</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:31:17.070" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      6946     1083576  0        0        0        0        0        
LAN1-VRF-Business1         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Business2         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Business3         1      0       0      6947     1083732  0        0        0        0        0        
LAN1-VRF-Internet-Default  23     0       0      6969     1085164  0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     14     0       0      0        0        14       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:02:45]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:31:17.070" starttime="20200422 16:31:17.069"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:31:17.071" level="INFO">LAN1-VRF-Internet-Default\s+(\d{1})</msg>
<status status="PASS" endtime="20200422 16:31:17.071" starttime="20200422 16:31:17.070"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:31:17.075" starttime="20200422 16:31:17.073"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:17.075" starttime="20200422 16:31:17.072"></status>
</kw>
<status status="PASS" endtime="20200422 16:31:17.075" starttime="20200422 16:31:17.066"></status>
</kw>
<kw name="Stop Stream Traffic" library="spirent1">
<arguments>
<arg>${premium_tcp_stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:31:28.303" level="INFO">***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:31:28.303" starttime="20200422 16:31:17.076"></status>
</kw>
<kw name="Stop Stream Traffic" library="spirent1">
<arguments>
<arg>${business1_tcp_stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:31:36.740" level="INFO">***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:31:36.740" starttime="20200422 16:31:28.304"></status>
</kw>
<kw name="Stop Stream Traffic" library="spirent1">
<arguments>
<arg>${business2_tcp_stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:31:45.930" level="INFO">***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:31:45.930" starttime="20200422 16:31:36.740"></status>
</kw>
<kw name="Stop Stream Traffic" library="spirent1">
<arguments>
<arg>${business3_tcp_stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:31:54.833" level="INFO">***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:31:54.833" starttime="20200422 16:31:45.931"></status>
</kw>
<kw name="Stop Stream Traffic" library="spirent1">
<arguments>
<arg>${internet_default_tcp_stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:32:03.919" level="INFO">***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:32:03.919" starttime="20200422 16:31:54.834"></status>
</kw>
<doc>DSCP Values based QOS</doc>
<tags>
<tag>QOS</tag>
</tags>
<status status="PASS" endtime="20200422 16:32:03.919" critical="yes" starttime="20200422 16:30:43.600"></status>
</test>
<test id="s1-t6" name="NV_SINGLE_CPE_MPLS_ONLY_QOS_02">
<kw name="Modify Qos Device Config" library="VD1">
<arguments>
<arg>${CPE1['Device_name']}</arg>
<arg>${cpe1['ORG_NAME']}</arg>
<arg>qos_ip_based_premium.j2</arg>
<arg>src_address_obj=${ipaddobj_1}</arg>
</arguments>
<msg timestamp="20200422 16:32:03.923" level="INFO">

STEP :CONFIG QOS
</msg>
<msg timestamp="20200422 16:32:03.934" level="INFO">delete devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match dscp [ 46 ]

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match source address address-list src_ip_add_obj11

move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium first


</msg>
<status status="PASS" endtime="20200422 16:32:09.991" starttime="20200422 16:32:03.923"></status>
</kw>
<kw name="Move Qos Policy Rule" library="VD1">
<arguments>
<arg>${CPE1['Device_name']}</arg>
<arg>${cpe1['ORG_NAME']}</arg>
<arg>Default-Policy</arg>
<arg>LAN1-VRF-Premium</arg>
<arg>first</arg>
</arguments>
<msg timestamp="20200422 16:32:15.743" level="INFO">move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium first
[ok][2020-04-22 11:03:59]

[edit]
Automated@VDir-BLR-NEW-01% commit
No modifications to commit.
[ok][2020-04-22 11:03:59]

[edit]
Automated@VDir-BLR-NEW-01% exit configuration-mode
[ok][2020-04-22 11:04:01]
Automated@VDir-BLR-NEW-01&gt;</msg>
<status status="PASS" endtime="20200422 16:32:15.743" starttime="20200422 16:32:09.991"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20200422 16:32:25.744" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20200422 16:32:25.744" starttime="20200422 16:32:15.744"></status>
</kw>
<kw name="REQ CLR SESSION ALL">
<kw name="Req Clr Sess All" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:32:26.148" level="INFO">${result} = request clear sessions all
[ok][2020-04-22 11:03:54]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:32:26.148" starttime="20200422 16:32:25.746"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:26.149" starttime="20200422 16:32:26.148"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:26.149" starttime="20200422 16:32:25.745"></status>
</kw>
<kw name="SHOW SESSION SDWAN DETAIL">
<kw name="Show Session Sdwan Detail" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:32:27.356" level="INFO">show orgs org IPC00190 sessions sdwan detail | nomore</msg>
<msg timestamp="20200422 16:32:27.356" level="INFO">${result} = show orgs org IPC00190 sessions sdwan detail | nomore
% No entries found.
[ok][2020-04-22 11:03:56]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:32:27.356" starttime="20200422 16:32:26.150"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:27.357" starttime="20200422 16:32:27.356"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:27.357" starttime="20200422 16:32:26.149"></status>
</kw>
<kw name="SHOW INTERFACE PORT STATISTICS BRIEF">
<kw name="Show Intf Port Stats Br" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:32:27.959" level="INFO">show interfaces port statistics brief | tab | nomore</msg>
<msg timestamp="20200422 16:32:27.960" level="INFO">${result} = show interfaces port statistics brief | tab | nomore
                     IF                                                                                                        
                   ...</msg>
<status status="PASS" endtime="20200422 16:32:27.960" starttime="20200422 16:32:27.358"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:27.963" starttime="20200422 16:32:27.960"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:27.963" starttime="20200422 16:32:27.357"></status>
</kw>
<kw name="SHOW COMMIT CHANGES 0">
<kw name="Show Commit Changes 0" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:32:30.171" level="INFO">show commit changes 0 | nomore</msg>
<msg timestamp="20200422 16:32:30.172" level="INFO">${result} = show commit changes 0 | nomore 
#
# Created by: admin
# Date: 2020-04-22 11:03:38
# Client: netconf
#
% No configuration changes found.
[ok][2020-04-22 11:03:58]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-I...</msg>
<status status="PASS" endtime="20200422 16:32:30.172" starttime="20200422 16:32:27.965"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:30.174" starttime="20200422 16:32:30.173"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:30.175" starttime="20200422 16:32:27.964"></status>
</kw>
<kw name="Show Config Object Addresses" library="CPE1">
<arguments>
<arg>${ipaddobj_1}</arg>
</arguments>
<msg timestamp="20200422 16:32:30.978" level="INFO">show configuration orgs org-services IPC00190 objects addresses src_ip_add_obj11 | display set | nomore
set orgs org-services IPC00190 objects addresses src_ip_add_obj11 ipv4-prefix 192.170.1.3/32
[ok][2020-04-22 11:03:59]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt;</msg>
<status status="PASS" endtime="20200422 16:32:30.979" starttime="20200422 16:32:30.176"></status>
</kw>
<kw name="Req Clr Stats Cos Qos Plcy All" library="CPE1">
<status status="PASS" endtime="20200422 16:32:31.583" starttime="20200422 16:32:30.980"></status>
</kw>
<kw name="Show Config Cos Qos Policy Rules" library="CPE1">
<msg timestamp="20200422 16:32:32.587" level="INFO">show configuration orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | display set  | nomore
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match source address address-list [ src_ip_add_obj11 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match destination zone zone-list [ ptvi ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium set qos-profile Premium
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 match dscp [ 26 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 set qos-profile Business1
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 match dscp [ 18 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 set qos-profile Business2
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 match dscp [ 10 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 set qos-profile Business3
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default set qos-profile Internet-Default
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN match source zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN match services predefined-services-list [ ESP ICMP ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN match services services-list [ IPSEC IPSecAH ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT match destination zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT match services predefined-services-list [ ESP ICMP ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT match services services-list [ IPSEC IPSIPSecAH ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_IN match source zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_IN match ether-type ARP
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_IN set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_OUT match destination zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_OUT match ether-type ARP
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_OUT set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_IN match source zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_IN set action deny
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_OUT match destination zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_OUT set action deny
[ok][2020-04-22 11:04:01]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt;</msg>
<status status="PASS" endtime="20200422 16:32:32.588" starttime="20200422 16:32:31.583"></status>
</kw>
<kw name="Show Cos Qos Policy Rules" library="CPE1">
<msg timestamp="20200422 16:32:33.392" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore</msg>
<status status="PASS" endtime="20200422 16:32:33.392" starttime="20200422 16:32:32.589"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20200422 16:32:43.396" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20200422 16:32:43.396" starttime="20200422 16:32:33.394"></status>
</kw>
<kw name="Start Stream Traffic" library="spirent1">
<arguments>
<arg>${stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:32:46.009" level="INFO">streamblock1
***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:32:46.009" starttime="20200422 16:32:43.398"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20200422 16:32:56.011" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20200422 16:32:56.013" starttime="20200422 16:32:46.010"></status>
</kw>
<kw name="SHOW INTERFACE PORT STATISTICS BRIEF">
<kw name="Show Intf Port Stats Br" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:32:56.618" level="INFO">show interfaces port statistics brief | tab | nomore</msg>
<msg timestamp="20200422 16:32:56.619" level="INFO">${result} = show interfaces port statistics brief | tab | nomore
                     IF                                                                                                              
             ...</msg>
<status status="PASS" endtime="20200422 16:32:56.619" starttime="20200422 16:32:56.015"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:56.622" starttime="20200422 16:32:56.620"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:56.623" starttime="20200422 16:32:56.014"></status>
</kw>
<kw name="Show Cos Qos Policy Rules" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:32:57.427" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore</msg>
<msg timestamp="20200422 16:32:57.428" level="INFO">${result} = show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS    ...</msg>
<status status="PASS" endtime="20200422 16:32:57.428" starttime="20200422 16:32:56.624"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:57.432" starttime="20200422 16:32:57.430"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Premium\\s+1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:32:57.438" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      13891    2166996  0        0        0        0        0        
LAN1-VRF-Business1         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business2         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business3         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Internet-Default  12     0       0      12       816      0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     13     0       0      0        0        13       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:04:25]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:32:57.439" starttime="20200422 16:32:57.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:32:57.441" level="INFO">LAN1-VRF-Premium\s+1</msg>
<status status="PASS" endtime="20200422 16:32:57.441" starttime="20200422 16:32:57.439"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:57.445" starttime="20200422 16:32:57.444"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:57.446" starttime="20200422 16:32:57.442"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:57.446" starttime="20200422 16:32:57.435"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Business1\\s+0</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:32:57.451" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      13891    2166996  0        0        0        0        0        
LAN1-VRF-Business1         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business2         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business3         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Internet-Default  12     0       0      12       816      0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     13     0       0      0        0        13       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:04:25]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:32:57.452" starttime="20200422 16:32:57.450"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:32:57.454" level="INFO">LAN1-VRF-Business1\s+0</msg>
<status status="PASS" endtime="20200422 16:32:57.455" starttime="20200422 16:32:57.453"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:57.460" starttime="20200422 16:32:57.457"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:57.460" starttime="20200422 16:32:57.456"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:57.461" starttime="20200422 16:32:57.448"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Business2\\s+0</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:32:57.467" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      13891    2166996  0        0        0        0        0        
LAN1-VRF-Business1         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business2         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business3         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Internet-Default  12     0       0      12       816      0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     13     0       0      0        0        13       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:04:25]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:32:57.468" starttime="20200422 16:32:57.465"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:32:57.470" level="INFO">LAN1-VRF-Business2\s+0</msg>
<status status="PASS" endtime="20200422 16:32:57.470" starttime="20200422 16:32:57.469"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:57.473" starttime="20200422 16:32:57.472"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:57.474" starttime="20200422 16:32:57.471"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:57.474" starttime="20200422 16:32:57.462"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Business3\\s+0</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:32:57.478" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      13891    2166996  0        0        0        0        0        
LAN1-VRF-Business1         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business2         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business3         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Internet-Default  12     0       0      12       816      0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     13     0       0      0        0        13       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:04:25]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:32:57.479" starttime="20200422 16:32:57.478"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:32:57.480" level="INFO">LAN1-VRF-Business3\s+0</msg>
<status status="PASS" endtime="20200422 16:32:57.480" starttime="20200422 16:32:57.479"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:57.481" starttime="20200422 16:32:57.481"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:57.481" starttime="20200422 16:32:57.480"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:57.482" starttime="20200422 16:32:57.476"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Internet-Default\\s+(\\d{1})</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:32:57.485" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      13891    2166996  0        0        0        0        0        
LAN1-VRF-Business1         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business2         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business3         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Internet-Default  12     0       0      12       816      0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     13     0       0      0        0        13       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:04:25]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:32:57.485" starttime="20200422 16:32:57.485"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:32:57.486" level="INFO">LAN1-VRF-Internet-Default\s+(\d{1})</msg>
<status status="PASS" endtime="20200422 16:32:57.486" starttime="20200422 16:32:57.486"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:32:57.488" starttime="20200422 16:32:57.487"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:57.488" starttime="20200422 16:32:57.487"></status>
</kw>
<status status="PASS" endtime="20200422 16:32:57.488" starttime="20200422 16:32:57.483"></status>
</kw>
<kw name="Stop Stream Traffic" library="spirent1">
<arguments>
<arg>${stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:33:08.731" level="INFO">***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:33:08.732" starttime="20200422 16:32:57.489"></status>
</kw>
<kw name="Modify Qos Device Config" library="VD1">
<arguments>
<arg>${CPE1['Device_name']}</arg>
<arg>${cpe1['ORG_NAME']}</arg>
<arg>revert_qos_ip_based_premium.j2</arg>
<arg>src_address_obj=${ipaddobj_1}</arg>
</arguments>
<msg timestamp="20200422 16:33:08.733" level="INFO">

STEP :CONFIG QOS
</msg>
<msg timestamp="20200422 16:33:08.745" level="INFO">
delete devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match source address address-list src_ip_add_obj11

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match dscp [ 46 ]
move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium first
</msg>
<status status="PASS" endtime="20200422 16:33:14.041" starttime="20200422 16:33:08.732"></status>
</kw>
<kw name="Move Qos Policy Rule" library="VD1">
<arguments>
<arg>${CPE1['Device_name']}</arg>
<arg>${cpe1['ORG_NAME']}</arg>
<arg>Default-Policy</arg>
<arg>LAN1-VRF-Premium</arg>
<arg>first</arg>
</arguments>
<msg timestamp="20200422 16:33:19.704" level="INFO">move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium first
[ok][2020-04-22 11:05:03]

[edit]
Automated@VDir-BLR-NEW-01% commit
No modifications to commit.
[ok][2020-04-22 11:05:03]

[edit]
Automated@VDir-BLR-NEW-01% exit configuration-mode
[ok][2020-04-22 11:05:05]
Automated@VDir-BLR-NEW-01&gt;</msg>
<status status="PASS" endtime="20200422 16:33:19.704" starttime="20200422 16:33:14.042"></status>
</kw>
<doc>Source IP address Based QOS</doc>
<tags>
<tag>QOS</tag>
</tags>
<status status="PASS" endtime="20200422 16:33:19.704" critical="yes" starttime="20200422 16:32:03.922"></status>
</test>
<test id="s1-t7" name="NV_SINGLE_CPE_MPLS_ONLY_QOS_03">
<kw name="Modify Qos Device Config" library="VD1">
<arguments>
<arg>${CPE1['Device_name']}</arg>
<arg>${cpe1['ORG_NAME']}</arg>
<arg>qos_ip_based_premium.j2</arg>
<arg>dst_address_obj=${ipaddobj_2}</arg>
</arguments>
<msg timestamp="20200422 16:33:19.707" level="INFO">

STEP :CONFIG QOS
</msg>
<msg timestamp="20200422 16:33:19.710" level="INFO">delete devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match dscp [ 46 ]

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match destination address address-list dst_ip_add_obj11

move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium first


</msg>
<status status="PASS" endtime="20200422 16:33:25.980" starttime="20200422 16:33:19.706"></status>
</kw>
<kw name="Move Qos Policy Rule" library="VD1">
<arguments>
<arg>${CPE1['Device_name']}</arg>
<arg>${cpe1['ORG_NAME']}</arg>
<arg>Default-Policy</arg>
<arg>LAN1-VRF-Premium</arg>
<arg>first</arg>
</arguments>
<msg timestamp="20200422 16:33:31.977" level="INFO">move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium first
[ok][2020-04-22 11:05:15]

[edit]
Automated@VDir-BLR-NEW-01% commit
No modifications to commit.
[ok][2020-04-22 11:05:15]

[edit]
Automated@VDir-BLR-NEW-01% exit configuration-mode
[ok][2020-04-22 11:05:17]
Automated@VDir-BLR-NEW-01&gt;</msg>
<status status="PASS" endtime="20200422 16:33:31.977" starttime="20200422 16:33:25.981"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20200422 16:33:41.978" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20200422 16:33:41.978" starttime="20200422 16:33:31.977"></status>
</kw>
<kw name="REQ CLR SESSION ALL">
<kw name="Req Clr Sess All" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:33:42.381" level="INFO">${result} = request clear sessions all
[ok][2020-04-22 11:05:11]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:33:42.381" starttime="20200422 16:33:41.979"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:33:42.382" starttime="20200422 16:33:42.381"></status>
</kw>
<status status="PASS" endtime="20200422 16:33:42.382" starttime="20200422 16:33:41.978"></status>
</kw>
<kw name="SHOW SESSION SDWAN DETAIL">
<kw name="Show Session Sdwan Detail" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:33:43.586" level="INFO">show orgs org IPC00190 sessions sdwan detail | nomore</msg>
<msg timestamp="20200422 16:33:43.586" level="INFO">${result} = show orgs org IPC00190 sessions sdwan detail | nomore
% No entries found.
[ok][2020-04-22 11:05:12]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:33:43.586" starttime="20200422 16:33:42.383"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:33:43.587" starttime="20200422 16:33:43.586"></status>
</kw>
<status status="PASS" endtime="20200422 16:33:43.587" starttime="20200422 16:33:42.383"></status>
</kw>
<kw name="SHOW INTERFACE PORT STATISTICS BRIEF">
<kw name="Show Intf Port Stats Br" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:33:44.190" level="INFO">show interfaces port statistics brief | tab | nomore</msg>
<msg timestamp="20200422 16:33:44.190" level="INFO">${result} = show interfaces port statistics brief | tab | nomore
                     IF                                                                                                        
                   ...</msg>
<status status="PASS" endtime="20200422 16:33:44.190" starttime="20200422 16:33:43.588"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:33:44.192" starttime="20200422 16:33:44.191"></status>
</kw>
<status status="PASS" endtime="20200422 16:33:44.193" starttime="20200422 16:33:43.587"></status>
</kw>
<kw name="SHOW COMMIT CHANGES 0">
<kw name="Show Commit Changes 0" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:33:46.400" level="INFO">show commit changes 0 | nomore</msg>
<msg timestamp="20200422 16:33:46.400" level="INFO">${result} = show commit changes 0 | nomore 
#
# Created by: admin
# Date: 2020-04-22 11:04:54
# Client: netconf
#
% No configuration changes found.
[ok][2020-04-22 11:05:14]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-I...</msg>
<status status="PASS" endtime="20200422 16:33:46.401" starttime="20200422 16:33:44.194"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:33:46.403" starttime="20200422 16:33:46.401"></status>
</kw>
<status status="PASS" endtime="20200422 16:33:46.404" starttime="20200422 16:33:44.194"></status>
</kw>
<kw name="Show Config Object Addresses" library="CPE1">
<arguments>
<arg>${ipaddobj_2}</arg>
</arguments>
<msg timestamp="20200422 16:33:47.209" level="INFO">show configuration orgs org-services IPC00190 objects addresses dst_ip_add_obj11 | display set | nomore
set orgs org-services IPC00190 objects addresses dst_ip_add_obj11 ipv4-prefix 192.169.101.3/32
[ok][2020-04-22 11:05:15]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt;</msg>
<status status="PASS" endtime="20200422 16:33:47.209" starttime="20200422 16:33:46.405"></status>
</kw>
<kw name="Req Clr Stats Cos Qos Plcy All" library="CPE1">
<status status="PASS" endtime="20200422 16:33:47.812" starttime="20200422 16:33:47.210"></status>
</kw>
<kw name="Show Config Cos Qos Policy Rules" library="CPE1">
<msg timestamp="20200422 16:33:48.816" level="INFO">show configuration orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | display set  | nomore
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match destination zone zone-list [ ptvi ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match destination address address-list [ dst_ip_add_obj11 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium set qos-profile Premium
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 match dscp [ 26 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business1 set qos-profile Business1
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 match dscp [ 18 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business2 set qos-profile Business2
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 match dscp [ 10 ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Business3 set qos-profile Business3
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default match source zone zone-list [ Intf-LAN1-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Internet-Default set qos-profile Internet-Default
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN match source zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN match services predefined-services-list [ ESP ICMP ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN match services services-list [ IPSEC IPSecAH ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_IN set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT match destination zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT match services predefined-services-list [ ESP ICMP ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT match services services-list [ IPSEC IPSIPSecAH ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules IPSEC_OUT set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_IN match source zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_IN match ether-type ARP
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_IN set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_OUT match destination zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_OUT match ether-type ARP
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules ARP_OUT set action allow
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_IN match source zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_IN set action deny
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_OUT match destination zone zone-list [ Intf-MPLS-WAN-Zone ]
set orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules WAN_OUT set action deny
[ok][2020-04-22 11:05:17]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt;</msg>
<status status="PASS" endtime="20200422 16:33:48.816" starttime="20200422 16:33:47.814"></status>
</kw>
<kw name="Show Cos Qos Policy Rules" library="CPE1">
<msg timestamp="20200422 16:33:49.619" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore</msg>
<status status="PASS" endtime="20200422 16:33:49.619" starttime="20200422 16:33:48.817"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20200422 16:33:59.620" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20200422 16:33:59.620" starttime="20200422 16:33:49.620"></status>
</kw>
<kw name="Start Stream Traffic" library="spirent1">
<arguments>
<arg>${stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:34:00.904" level="INFO">streamblock1
***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:34:00.904" starttime="20200422 16:33:59.620"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20200422 16:34:10.905" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20200422 16:34:10.905" starttime="20200422 16:34:00.905"></status>
</kw>
<kw name="SHOW INTERFACE PORT STATISTICS BRIEF">
<kw name="Show Intf Port Stats Br" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:34:11.511" level="INFO">show interfaces port statistics brief | tab | nomore</msg>
<msg timestamp="20200422 16:34:11.511" level="INFO">${result} = show interfaces port statistics brief | tab | nomore
                     IF                                                                                                              
             ...</msg>
<status status="PASS" endtime="20200422 16:34:11.511" starttime="20200422 16:34:10.908"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:34:11.513" starttime="20200422 16:34:11.512"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:11.513" starttime="20200422 16:34:10.907"></status>
</kw>
<kw name="Show Cos Qos Policy Rules" library="CPE1">
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200422 16:34:12.315" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore</msg>
<msg timestamp="20200422 16:34:12.315" level="INFO">${result} = show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS    ...</msg>
<status status="PASS" endtime="20200422 16:34:12.316" starttime="20200422 16:34:11.514"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:34:12.318" starttime="20200422 16:34:12.316"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Premium\\s+1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:34:12.322" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      13892    2167152  0        0        0        0        0        
LAN1-VRF-Business1         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business2         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business3         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Internet-Default  12     0       0      12       816      0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     14     0       0      0        0        14       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:05:40]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:34:12.322" starttime="20200422 16:34:12.321"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:34:12.323" level="INFO">LAN1-VRF-Premium\s+1</msg>
<status status="PASS" endtime="20200422 16:34:12.323" starttime="20200422 16:34:12.323"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:34:12.326" starttime="20200422 16:34:12.325"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:12.326" starttime="20200422 16:34:12.324"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:12.327" starttime="20200422 16:34:12.319"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Business1\\s+0</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:34:12.329" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      13892    2167152  0        0        0        0        0        
LAN1-VRF-Business1         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business2         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business3         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Internet-Default  12     0       0      12       816      0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     14     0       0      0        0        14       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:05:40]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:34:12.330" starttime="20200422 16:34:12.329"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:34:12.330" level="INFO">LAN1-VRF-Business1\s+0</msg>
<status status="PASS" endtime="20200422 16:34:12.330" starttime="20200422 16:34:12.330"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:34:12.331" starttime="20200422 16:34:12.331"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:12.331" starttime="20200422 16:34:12.330"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:12.331" starttime="20200422 16:34:12.328"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Business2\\s+0</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:34:12.332" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      13892    2167152  0        0        0        0        0        
LAN1-VRF-Business1         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business2         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business3         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Internet-Default  12     0       0      12       816      0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     14     0       0      0        0        14       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:05:40]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:34:12.332" starttime="20200422 16:34:12.332"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:34:12.333" level="INFO">LAN1-VRF-Business2\s+0</msg>
<status status="PASS" endtime="20200422 16:34:12.333" starttime="20200422 16:34:12.332"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:34:12.333" starttime="20200422 16:34:12.333"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:12.334" starttime="20200422 16:34:12.333"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:12.334" starttime="20200422 16:34:12.331"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Business3\\s+0</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:34:12.335" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      13892    2167152  0        0        0        0        0        
LAN1-VRF-Business1         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business2         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business3         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Internet-Default  12     0       0      12       816      0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     14     0       0      0        0        14       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:05:40]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:34:12.335" starttime="20200422 16:34:12.335"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:34:12.336" level="INFO">LAN1-VRF-Business3\s+0</msg>
<status status="PASS" endtime="20200422 16:34:12.336" starttime="20200422 16:34:12.336"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:34:12.338" starttime="20200422 16:34:12.337"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:12.338" starttime="20200422 16:34:12.336"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:12.338" starttime="20200422 16:34:12.334"></status>
</kw>
<kw name="CHECK RESULT">
<doc>Check result contains expected value</doc>
<arguments>
<arg>actual=${result}</arg>
<arg>expected=LAN1-VRF-Internet-Default\\s+(\\d{1})</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${actual}</arg>
</arguments>
<msg timestamp="20200422 16:34:12.340" level="INFO">show orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules | tab | nomore
                                  QOS     QOS    QOS      QOS      QOS      PPS      PPS      KBPS     KBPS     
                           QOS    DROP    DROP   FORWARD  FORWARD  SESSION  POLICER  POLICER  POLICER  POLICER  
                           HIT    PACKET  BYTE   PACKET   BYTE     DENY     PKTS     BYTES    PKTS     BYTES    
RULE NAME                  COUNT  COUNT   COUNT  COUNT    COUNT    COUNT    DROPPED  DROPPED  DROPPED  DROPPED  
----------------------------------------------------------------------------------------------------------------
LAN1-VRF-Premium           1      0       0      13892    2167152  0        0        0        0        0        
LAN1-VRF-Business1         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business2         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Business3         0      0       0      0        0        0        0        0        0        0        
LAN1-VRF-Internet-Default  12     0       0      12       816      0        0        0        0        0        
IPSEC_IN                   0      0       0      0        0        0        0        0        0        0        
IPSEC_OUT                  0      0       0      0        0        0        0        0        0        0        
ARP_IN                     0      0       0      0        0        0        0        0        0        0        
ARP_OUT                    0      0       0      0        0        0        0        0        0        0        
WAN_IN                     14     0       0      0        0        14       0        0        0        0        
WAN_OUT                    0      0       0      0        0        0        0        0        0        0        

[ok][2020-04-22 11:05:40]
admin@CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190-cli&gt; </msg>
<status status="PASS" endtime="20200422 16:34:12.340" starttime="20200422 16:34:12.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20200422 16:34:12.341" level="INFO">LAN1-VRF-Internet-Default\s+(\d{1})</msg>
<status status="PASS" endtime="20200422 16:34:12.341" starttime="20200422 16:34:12.340"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should match regexp</arg>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${actual}</arg>
<arg>${expected}</arg>
</arguments>
<status status="PASS" endtime="20200422 16:34:12.341" starttime="20200422 16:34:12.341"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:12.341" starttime="20200422 16:34:12.341"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:12.342" starttime="20200422 16:34:12.339"></status>
</kw>
<kw name="Stop Stream Traffic" library="spirent1">
<arguments>
<arg>${stream1['stream_id']}</arg>
</arguments>
<msg timestamp="20200422 16:34:22.496" level="INFO">***** run sth.traffic_control successfully</msg>
<status status="PASS" endtime="20200422 16:34:22.496" starttime="20200422 16:34:12.342"></status>
</kw>
<kw name="Modify Qos Device Config" library="VD1">
<arguments>
<arg>${CPE1['Device_name']}</arg>
<arg>${cpe1['ORG_NAME']}</arg>
<arg>revert_qos_ip_based_premium.j2</arg>
<arg>dst_address_obj=${ipaddobj_2}</arg>
</arguments>
<msg timestamp="20200422 16:34:22.497" level="INFO">

STEP :CONFIG QOS
</msg>
<msg timestamp="20200422 16:34:22.501" level="INFO">
delete devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match destination address address-list dst_ip_add_obj11

set devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium match dscp [ 46 ]
move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium first
</msg>
<status status="PASS" endtime="20200422 16:34:28.357" starttime="20200422 16:34:22.497"></status>
</kw>
<kw name="Move Qos Policy Rule" library="VD1">
<arguments>
<arg>${CPE1['Device_name']}</arg>
<arg>${cpe1['ORG_NAME']}</arg>
<arg>Default-Policy</arg>
<arg>LAN1-VRF-Premium</arg>
<arg>first</arg>
</arguments>
<msg timestamp="20200422 16:34:34.017" level="INFO">move devices device CPE26-HKG-SINGLE-CPE-MPLSONLY-IPC00190 config orgs org-services IPC00190 class-of-service qos-policies Default-Policy rules LAN1-VRF-Premium first
[ok][2020-04-22 11:06:17]

[edit]
Automated@VDir-BLR-NEW-01% commit
No modifications to commit.
[ok][2020-04-22 11:06:17]

[edit]
Automated@VDir-BLR-NEW-01% exit configuration-mode
[ok][2020-04-22 11:06:20]
Automated@VDir-BLR-NEW-01&gt;</msg>
<status status="PASS" endtime="20200422 16:34:34.017" starttime="20200422 16:34:28.359"></status>
</kw>
<doc>Destination IP address Based QOS</doc>
<tags>
<tag>QOS</tag>
</tags>
<status status="PASS" endtime="20200422 16:34:34.017" critical="yes" starttime="20200422 16:33:19.705"></status>
</test>
<kw type="teardown" name="CLEANUP">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"cleanup done"</arg>
</arguments>
<status status="PASS" endtime="20200422 16:34:34.021" starttime="20200422 16:34:34.020"></status>
</kw>
<kw name="Delete Service Object" library="CPE1">
<arguments>
<arg>${serviceobj_1}</arg>
</arguments>
<msg timestamp="20200422 16:34:34.022" level="INFO">
DELETE Service Object
</msg>
<msg timestamp="20200422 16:34:36.094" level="INFO">
PASS</msg>
<msg timestamp="20200422 16:34:36.094" level="INFO">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ADDRESS OBJECT DELETION PASSED. &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</msg>
<msg timestamp="20200422 16:34:36.094" level="INFO">&lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20200422 16:34:36.094" starttime="20200422 16:34:34.021"></status>
</kw>
<kw name="Delete Address Object" library="CPE1">
<arguments>
<arg>${ipaddobj_1}</arg>
</arguments>
<msg timestamp="20200422 16:34:36.095" level="INFO">
DELETE IPaddress Object
</msg>
<msg timestamp="20200422 16:34:37.278" level="INFO">
PASS</msg>
<msg timestamp="20200422 16:34:37.278" level="INFO">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ADDRESS OBJECT DELETION PASSED. &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</msg>
<msg timestamp="20200422 16:34:37.278" level="INFO">&lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20200422 16:34:37.279" starttime="20200422 16:34:36.095"></status>
</kw>
<kw name="Delete Address Object" library="CPE1">
<arguments>
<arg>${ipaddobj_2}</arg>
</arguments>
<msg timestamp="20200422 16:34:37.280" level="INFO">
DELETE IPaddress Object
</msg>
<msg timestamp="20200422 16:34:38.531" level="INFO">
PASS</msg>
<msg timestamp="20200422 16:34:38.531" level="INFO">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ADDRESS OBJECT DELETION PASSED. &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</msg>
<msg timestamp="20200422 16:34:38.531" level="INFO">&lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20200422 16:34:38.531" starttime="20200422 16:34:37.279"></status>
</kw>
<kw name="Release Ports" library="spirent1">
<msg timestamp="20200422 16:34:39.972" level="INFO">Release resources
***** run sth.interface_config_delete successfully
***** run sth.interface_config_delete successfully
***** run sth.cleanup_session successfully</msg>
<status status="PASS" endtime="20200422 16:34:39.972" starttime="20200422 16:34:38.531"></status>
</kw>
<status status="PASS" endtime="20200422 16:34:39.973" starttime="20200422 16:34:34.020"></status>
</kw>
<doc>A test suite with tests for SDWAN SINGLE CPE MPLS only Solution.
Topology:-
____________________________
| VersaDirector |
|___________________________|
|
|
|
_____________|_______________
| WanCtrller1 |
|____________________________|
| |
| |
| |
INTERNET/MPLS
| |
| |___
______|__ ___|___
| | | |
LAN1--+ CPE1 | | CPE2 +--LAN1
|________| |_______|


Testplan Goals:-
1. CHECK WAN INTERFACES STATUS.
2. CHECK BGP NEIGHBOR STATUS.
3. CHECK LAN ROUTE.
4. Ping Test.
5. IPERF Test.
6. Traffic steering Test.
7. QOS Test.</doc>
<metadata>
<item name="Version">1.0
More Info For more information about Robot Framework see http://robotframework.org
Author Sathishkumar murugesan
Date 12 Dec 2017
Executed At HOST
Test Framework Robot Framework Python</item>
</metadata>
<status status="PASS" endtime="20200422 16:34:39.973" starttime="20200422 16:24:18.162"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="7">Critical Tests</stat>
<stat fail="0" pass="7">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">IPERF</stat>
<stat fail="0" pass="2">PING</stat>
<stat fail="0" pass="3">QOS</stat>
<stat fail="0" pass="4">SANITY1</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="SINGLE CPE MPLS ONLY SOLUTION TEST" pass="7">SINGLE CPE MPLS ONLY SOLUTION TEST</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
