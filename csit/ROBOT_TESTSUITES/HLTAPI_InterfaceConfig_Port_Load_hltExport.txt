############# Spirent HLTAPI Export Log File #############
#puts "source hltapi_5.10_stc_2.10.tcl"
#source  hltapi_5.10_stc_2.10.tcl
puts "package require SpirentHltApi"
package require SpirentHltApi
set logged_ret "{offline 0} {port_handle {{10 {{91 {{113 {{124 {{10/1 port1} {10/2 port2}}}}}}}}}}} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::interface_config -create_host false -scheduling_mode RATE_BASED -phy_mode copper -port_loadunit MEGABITS_PER_SECOND -control_plane_mtu 1500 -enable_ping_response 0 -autonegotiation 1 -port_handle port1 -duplex full -mode config -port_load 5 -speed ether1000 -intf_mode ethernet"
set ret [sth::interface_config -create_host false -scheduling_mode RATE_BASED -phy_mode copper -port_loadunit MEGABITS_PER_SECOND -control_plane_mtu 1500 -enable_ping_response 0 -autonegotiation 1 -port_handle port1 -duplex full -mode config -port_load 5 -speed ether1000 -intf_mode ethernet]
set logged_ret "{arpnd_status 1} {arpnd_cache none} {arpnd_report none} {status 1} {handles 0}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::interface_config -create_host false -scheduling_mode RATE_BASED -phy_mode copper -port_loadunit MEGABITS_PER_SECOND -control_plane_mtu 1500 -enable_ping_response 0 -autonegotiation 1 -port_handle port2 -duplex full -mode config -port_load 5 -speed ether1000 -intf_mode ethernet"
set ret [sth::interface_config -create_host false -scheduling_mode RATE_BASED -phy_mode copper -port_loadunit MEGABITS_PER_SECOND -control_plane_mtu 1500 -enable_ping_response 0 -autonegotiation 1 -port_handle port2 -duplex full -mode config -port_load 5 -speed ether1000 -intf_mode ethernet]
set logged_ret "{arpnd_status 1} {arpnd_cache none} {arpnd_report none} {status 1} {handles 0}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::emulation_device_config -resolve_gateway_mac true -port_handle port1 -intf_ip_addr 192.169.101.3 -mode create -vlan_id 600 -gateway_ip_addr 192.169.101.1 -ip_version ipv4 -encapsulation ethernet_ii_vlan -enable_ping_response 1"
set ret [sth::emulation_device_config -resolve_gateway_mac true -port_handle port1 -intf_ip_addr 192.169.101.3 -mode create -vlan_id 600 -gateway_ip_addr 192.169.101.1 -ip_version ipv4 -encapsulation ethernet_ii_vlan -enable_ping_response 1]
set logged_ret "{handle host1} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::emulation_device_config -resolve_gateway_mac true -port_handle port2 -intf_ip_addr 192.169.111.3 -mode create -vlan_id 610 -gateway_ip_addr 192.169.111.1 -ip_version ipv4 -encapsulation ethernet_ii_vlan -enable_ping_response 1"
set ret [sth::emulation_device_config -resolve_gateway_mac true -port_handle port2 -intf_ip_addr 192.169.111.3 -mode create -vlan_id 610 -gateway_ip_addr 192.169.111.1 -ip_version ipv4 -encapsulation ethernet_ii_vlan -enable_ping_response 1]
set logged_ret "{handle host2} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 2 -tcp_src_port 2000 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 48 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create"
set ret [sth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 2 -tcp_src_port 2000 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 48 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create]
set logged_ret "{stream_id streamblock1} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 2 -tcp_src_port 2001 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 48 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create"
set ret [sth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 2 -tcp_src_port 2001 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 48 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create]
set logged_ret "{stream_id streamblock2} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 2 -pkts_per_burst 1 -udp_src_port_repeat_count 0 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -udp_dst_port 1025 -udp_src_port_mode increment -fill_type constant -length_mode fixed -fcs_error 0 -udp_src_port 2002 -port_handle port1 -emulation_dst_handle host2 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 48 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_protocol 17 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -udp_src_port_count 1 -frame_size 160 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -udp_src_port_step 1 -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -l4_protocol udp -high_speed_result_analysis 1 -mode create"
set ret [sth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 2 -pkts_per_burst 1 -udp_src_port_repeat_count 0 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -udp_dst_port 1025 -udp_src_port_mode increment -fill_type constant -length_mode fixed -fcs_error 0 -udp_src_port 2002 -port_handle port1 -emulation_dst_handle host2 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 48 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_protocol 17 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -udp_src_port_count 1 -frame_size 160 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -udp_src_port_step 1 -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -l4_protocol udp -high_speed_result_analysis 1 -mode create]
set logged_ret "{stream_id streamblock3} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 1 -tcp_src_port 3001 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 46 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create"
set ret [sth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 1 -tcp_src_port 3001 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 46 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create]
set logged_ret "{stream_id streamblock4} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 1 -tcp_src_port 3002 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 26 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create"
set ret [sth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 1 -tcp_src_port 3002 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 26 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create]
set logged_ret "{stream_id streamblock5} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 1 -tcp_src_port 3003 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 18 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create"
set ret [sth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 1 -tcp_src_port 3003 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 18 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create]
set logged_ret "{stream_id streamblock6} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 1 -tcp_src_port 3004 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 10 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create"
set ret [sth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 1 -tcp_src_port 3004 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 10 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create]
set logged_ret "{stream_id streamblock7} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 1 -tcp_src_port 5000 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 48 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create"
set ret [sth::traffic_config -tx_port_sending_traffic_to_self_en false -mac_discovery_gw 192.169.101.1 -rate_mbps 1 -tcp_src_port 5000 -frame_size 160 -pkts_per_burst 1 -high_speed_result_analysis 1 -tcp_dst_port 1024 -enable_stream_only_gen 1 -inter_stream_gap_unit bytes -emulation_dst_handle host2 -fill_type constant -length_mode fixed -fcs_error 0 -port_handle port1 -ip_ttl 255 -ip_fragment_offset 0 -ip_dscp 48 -traffic_state 1 -burst_loop_count 30 -enable_control_plane 0 -ip_hdr_length 5 -l3_length 160 -ip_mbz 0 -dest_port_list port2 -transmit_mode continuous -tcp_src_port_repeat_count 0 -ip_id 0 -l3_protocol ipv4 -disable_signature 0 -tcp_src_port_count 1 -tcp_src_port_mode increment -emulation_src_handle host1 -ip_precedence 6 -fill_value 0 -inter_stream_gap 12 -tcp_src_port_step 1 -l4_protocol tcp -mode create]
set logged_ret "{stream_id streamblock8} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock4"
set ret [sth::traffic_control -action run -stream_handle streamblock4]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock5"
set ret [sth::traffic_control -action run -stream_handle streamblock5]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock6"
set ret [sth::traffic_control -action run -stream_handle streamblock6]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock7"
set ret [sth::traffic_control -action run -stream_handle streamblock7]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock8"
set ret [sth::traffic_control -action run -stream_handle streamblock8]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock4"
set ret [sth::traffic_control -action stop -stream_handle streamblock4]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock5"
set ret [sth::traffic_control -action stop -stream_handle streamblock5]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock6"
set ret [sth::traffic_control -action stop -stream_handle streamblock6]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock7"
set ret [sth::traffic_control -action stop -stream_handle streamblock7]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock8"
set ret [sth::traffic_control -action stop -stream_handle streamblock8]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock1"
set ret [sth::traffic_control -action run -stream_handle streamblock1]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock2"
set ret [sth::traffic_control -action run -stream_handle streamblock2]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock3"
set ret [sth::traffic_control -action run -stream_handle streamblock3]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock3"
set ret [sth::traffic_control -action stop -stream_handle streamblock3]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock2"
set ret [sth::traffic_control -action stop -stream_handle streamblock2]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock1"
set ret [sth::traffic_control -action stop -stream_handle streamblock1]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock1"
set ret [sth::traffic_control -action run -stream_handle streamblock1]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock2"
set ret [sth::traffic_control -action run -stream_handle streamblock2]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock3"
set ret [sth::traffic_control -action run -stream_handle streamblock3]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock3"
set ret [sth::traffic_control -action stop -stream_handle streamblock3]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock2"
set ret [sth::traffic_control -action stop -stream_handle streamblock2]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock1"
set ret [sth::traffic_control -action stop -stream_handle streamblock1]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action run -stream_handle streamblock1"
set ret [sth::traffic_control -action run -stream_handle streamblock1]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -action stop -stream_handle streamblock1"
set ret [sth::traffic_control -action stop -stream_handle streamblock1]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::cleanup_session -port_handle {port1 port2} -clean_dbfile 1"
set ret [sth::cleanup_session -port_handle {port1 port2} -clean_dbfile 1]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret
